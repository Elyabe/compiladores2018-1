options {
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compilador)
import java.io.*;
public class Compilador {
  static Tabela tabela = new Tabela();
  static int status =1;
  
   public static void main(String args[])  throws ParseException  {
      Compilador compilador = null;
      try {
         compilador = new Compilador(new FileInputStream("exemplo17.spc"));
         Compilador.inicio();
         if(status==1) {
           System.out.println("Análise léxica,sintática, semantica sem erros!");
         }
         System.out.println(tabela);
         
      }
      catch(FileNotFoundException e) {
         System.out.println("Erro: arquivo nao encontrado");
      }
      catch(TokenMgrError e) {
         System.out.println("Erro lexico\n" + e.getMessage());
      }
      catch(ParseException e) {
         System.out.println("Erro sintático\n" + e.getMessage());
      }
   }
}
PARSER_END(Compilador)
 
SKIP : { " " | "\t" | "\r" | "\n" }

//TOKENS DE COMANDOS 
TOKEN [IGNORE_CASE] : {
  		<EXIBE: "exibe" >  |
  		<LEITURA: "le" > | 
		<SE: "se" > |
      	<FIMSE: "fimse" > |
      	<ENQUANTO: "enquanto" > |
      	<FIMENQUANTO: "fimenquanto" > 
}
//TOKENS DE TIPOS 
TOKEN [IGNORE_CASE] : {
  		<NUMERO: "numero" >  |
  		<PALAVRA: "palavra" >  
}
//----------CARACTERES----------
TOKEN : {
		< #CHAR: ["a"-"z"] | ["A" - "Z"] > | 
   		< AP: "(" > |
    	< FP: ")" > |
		< PV: ";" > |
		< VIRGULA: "," > |
    	< STRING: "\"" (~["\""])* "\"" > |
   		< VAR: (< CHAR >)+ (["a" - "z", "A" - "Z" ,"0" - "9", "_"])* > 
}
//-----------NUMEROS-----------
TOKEN : {
	< #DIGIT: ["0"-"9"] > |  
    < NUM: (< DIGIT >)* (".")? (< DIGIT >)+ > 
}
//----------OPERADORES---------
TOKEN : {
 	< SOMA: "+" > |
	< SUB: "-" > |
	< MUL: "*" > |
    < DIV: "/" > |
    < OU: "OR" > |
    < ATRIB: "<-"  > |
    < IGUAL: "=" > |
   	< CONCAT: "&" > 
}
void inicio() : {}
{
   programa() <EOF>
}

void programa() : {}
{
   ( comando() )*
}

void comando() : {}
{
   atribuicao() | declaracao() | se() | enquanto() | le() | exibe()
}

void atribuicao() : {Simbolo s; Token t;}
{
   t=<VAR>
   {
     if(!(tabela.isExiste(t.image))) {
        status=0;
        System.out.println("Erro semântico variável "+t.image+ " não foi inicializada na linha "+t.endLine);
     }
   }
   <ATRIB> expressao() <PV>
}

void declaracao() : {Simbolo simb; Token t; String tipo;} { 
	(<NUMERO> {tipo= "numero"; } | <PALAVRA> { tipo= "palavra"; })
	t = <VAR> {
		
		if((tabela.isExiste(t.image))) {
		  status=0;
		  System.out.println("Erro: variável "+t.image+" duplicada na linha "+t.endLine);
		}
		else {
			simb = new Simbolo(t.image,tipo);
			tabela.inclui(simb);
		}
	  }
	( <ATRIB> expressao() )?
	(<VIRGULA> t = <VAR> {
		if((tabela.isExiste(t.image))) {
		  status=0;
		  System.out.println("Erro: variável "+t.image+" duplicada na linha "+t.endLine);
		}
		else {
			simb = new Simbolo(t.image,tipo);
			tabela.inclui(simb);
			
		}
	  }
	( <ATRIB> expressao() )? )* <PV> 
}

void se() : {}
{
   <SE> <AP> expressao() <FP> programa() <FIMSE>
}

void enquanto() : {}
{
   <ENQUANTO> <AP> expressao() <FP> programa() <FIMENQUANTO>
}

void le() : {Token t;}
{
   <LEITURA> t=<VAR>
   {
     	if(!tabela.isExiste(t.image)){
     	  	 status=0;
	         System.out.println("Erro semântico variável "+t.image+ " não foi inicializada na linha "+t.endLine);
		} 
   }
   ( <VIRGULA> <VAR>
   {
     	if(!tabela.isExiste(t.image)){
     	  status=0;
	         System.out.println("Erro semântico variável "+t.image+ " não foi inicializada na linha "+t.endLine);
		} 
   }
    )* <PV>
}

void exibe() : {}
{
   <EXIBE> expressao() ( <VIRGULA> expressao() )* <PV>
}

void expressao() : {}
{
   termo()(<OU>termo())*
}

void termo() : {}
{
   termo1() (<IGUAL> termo1())?
}

void termo1() : {}
{
   termo2() (<CONCAT> termo2())*
}

void termo2() : {}
{
   termo3() ((<SOMA>|<SUB>) termo3())*
}

void termo3() : {}
{
   termo4() ((<MUL>|<DIV>) termo4())*
}

void termo4() : {Token t;}
{
   <AP> expressao() <FP>
   |<NUM>
   |<SOMA><NUM>
   |<SUB><NUM>
   |t=<VAR>
   {
		if(!tabela.isExiste(t.image)){
		  status=0;
	        System.out.println("Erro semântico variável "+t.image+ " não foi inicializada na linha "+t.endLine);
		} 
	}
   |<STRING>
}

