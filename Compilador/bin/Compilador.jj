options {
	DEBUG_PARSER = false;
	DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compilador)
import java.io.*;
import javax.swing.*;
import classesExtras.*;
public class Compilador {
   static Tabela tabela = new Tabela();
  
	public static void main(String args[])  throws ParseException  {
		Compilador compilador = null;
		System.out.println("Começando o Teste: ");
		String s = (String) JOptionPane.showInputDialog(
		  						null, "RemoveName",
								"Digite o Nome do Arquivo",
								JOptionPane.QUESTION_MESSAGE,
								null, null, "exemplos/.spc");
		try {
			// Troque 's' pelo caminho e comente a linha da Janela,
			// caso não queira usar a janela de seleção
			compilador = new Compilador(new FileInputStream(s));
			Compilador.inicio();
        	//System.out.println(tabela.toString());
         	System.out.println("Análise léxica, sintática e semântica sem erros!");
		} catch(FileNotFoundException e) {
			System.out.println("Erro: arquivo nao encontrado");
		} catch(TokenMgrError e) {
			System.out.println("Erro lexico\n" + e.getMessage());
		} catch(ParseException e) {
        	System.out.println("Erro sintático\n" + e.getMessage());
      }
		System.out.println("Fim do Teste!");
	}
}
PARSER_END(Compilador)

SKIP : { " " | "\t" | "\r" | "\n" }

//TOKENS DE COMANDOS 
TOKEN [IGNORE_CASE] : {
	  < EXIBE: "exibe" >
	| < LEITURA: "le" > 
	| < SE: "se" > 
	| < FIMSE: "fim-se" > 
	| < ENQUANTO: "enquanto" >
	| < FIMENQUANTO: "fim-enquanto" > 
}
//TOKENS DE TIPOS 
TOKEN [IGNORE_CASE] : {
	  < NUMERO: "numero" >
	| < PALAVRA: "palavra" >  
}
//----------CARACTERES----------
TOKEN : {
	  < #CHAR: ["a"-"z"] | ["A" - "Z"] > 
	| < AP: "(" > 
	| < FP: ")" > 
	| < PV: ";" > 
	| < VIRGULA: "," > 
	| < STRING: "\"" (~["\""])* "\"" > 
	| < VAR: (< CHAR >)+ (["a" - "z", "A" - "Z" ,"0" - "9", "_"])* > 
}
//-----------NUMEROS-----------
TOKEN : {
	  < #DIGIT: ["0"-"9"] > 
	| < NUM: (< DIGIT >)* (".")? (< DIGIT >)+ > 
}
//----------OPERADORES---------
TOKEN : {
	  < SOMA: "+" > 
	| < SUB: "-" >
	| < MUL: "*" > 
	| < DIV: "/" > 
	| < OU: "OR" > 
	| < ATRIB: "<-" > 
	| < IGUAL: "=" >
	| < CONCAT: "&" > 
}


void inicio() : { } { 
	( comando() )* <EOF>
}

void comando() : { }  {
	  atribuicao() 
	| declaracao()
	| se()
	| enquanto() 
	| le()
	| exibe()
}

void atribuicao() : {Simbolo simb; Token t;} {

	t = <VAR> {
        simb = new Simbolo(t.image);
		tabela.inclui(simb);
	}
	<ATRIB> expressao() <PV> 
}
void declaracao() : {Simbolo simb; Token t;} { 
	(<NUMERO> | <PALAVRA>)
	t = <VAR> {
		simb = new Simbolo(t.image);
		tabela.inclui(simb);
	  }
	( <ATRIB> expressao() )?
	(<VIRGULA> t = <VAR> {
		simb = new Simbolo(t.image);
		tabela.inclui(simb);
	  }
	( <ATRIB> expressao() )? )* <PV> 
}
void se() : { } {
	<SE> <AP> expressao() <FP> (comando())* <FIMSE>
	//Correção do problema da Gramática, não se pode chamar
	//o início mais de uma vez, pois ele cria a falsa existência
	//de mais de um <EOF>, então reproduzimos apenas o seu conteúdo;
	//Valido para o Se e Enquanto
}
void enquanto() : { } {
	<ENQUANTO> <AP> expressao() <FP> (comando())* <FIMENQUANTO> 
}
void le() : { } {
	<LEITURA> <VAR> ( <VIRGULA> <VAR> )* <PV> 
}
void exibe() : { } {
	<EXIBE> expressao() ( <VIRGULA> expressao() )* <PV>
}
void expressao() : { } {
	termo() (<OU> termo())* 
}
void termo() : { } {
	termo1() (<IGUAL> termo1())? 
}
void termo1() : { } {
	termo2() (<CONCAT> termo2())* 
}
void termo2() : { } {
	termo3() ((<SOMA> | <SUB>) termo3())* 
}
void termo3() : { } {
	termo4() ((<MUL> | <DIV>) termo4())* 
}
void termo4() : {Simbolo simb; Token t;} {
      <AP> expressao()<FP> 
	| <NUM> 
	| <SOMA><NUM> 
	| <SUB><NUM> 
	| t = <VAR> {
			if(!tabela.isExiste(t.image)){
			  	// Primeira Opcao, com exception e fecha com o erro;
 				throw new SemanticException(t.image);
 				//Segunda opção apenas com o print do erro;
	            // System.out.println("Erro semântico\nA variável \'" + t.image + "\' não foi inicializada");
			} else {	
				simb = new Simbolo(t.image);
				tabela.inclui(simb);
	        }
		}
	| <STRING>
}