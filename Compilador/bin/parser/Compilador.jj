options {
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compilador)
package parser;
import semantico.Tabela;
import apoio.AcoesSemanticas;
import java.io.*;
import geradorCodigo.Expressao;
import semantico.Tipo;
import apoio.ErroSemantico;
public class Compilador {
   static Tabela tabela = new Tabela();
   public static void main(String args[])  throws ParseException  {
      Compilador compilador = null;
      try {
         compilador = new Compilador(new FileInputStream("exemplo16.spc"));
         Compilador.inicio();
                
      }
      catch(FileNotFoundException e) {
         System.out.println(e.getMessage());
      }
      catch(TokenMgrError e) {
         System.out.println("Erro lexico\n" + e.getMessage());
      }
      catch(ParseException e) {
         System.out.println("Erro sintático\n" + e.getMessage());
      }
      catch(ErroSemantico e) {
         System.out.println(e.getMessage());
      }
   }
}
PARSER_END(Compilador)
 
SKIP : { " " | "\t" | "\r" | "\n" }

//TOKENS DE COMANDOS 
TOKEN [IGNORE_CASE] : {
  		<EXIBE: "exibe" >  |
  		<LEITURA: "le" > | 
		<SE: "se" > |
      	<FIMSE: "fimse" > |
      	<ENQUANTO: "enquanto" > |
      	<FIMENQUANTO: "fimenquanto" > 
}
//TOKENS DE TIPOS 
TOKEN [IGNORE_CASE] : {
  		<NUMERO: "numero" >  |
  		<PALAVRA: "palavra" >  
}
//----------CARACTERES----------
TOKEN : {
		< #CHAR: ["a"-"z"] | ["A" - "Z"] > | 
   		< AP: "(" > |
    	< FP: ")" > |
		< PV: ";" > |
		< VIRGULA: "," > |
    	< STRING: "\"" (~["\""])* "\"" > |
   		< VAR: (< CHAR >)+ (["a" - "z", "A" - "Z" ,"0" - "9", "_"])* > 
}
//-----------NUMEROS-----------
TOKEN : {
	< #DIGIT: ["0"-"9"] > |  
    < NUM: (< DIGIT >)* (".")? (< DIGIT >)+ > 
}
//----------OPERADORES---------
TOKEN : {
 	< SOMA: "+" > |
	< SUB: "-" > |
	< MUL: "*" > |
    < DIV: "/" > |
    < OU: "OR" > |
    < ATRIB: "<-"  > |
    < IGUAL: "=" > |
   	< CONCAT: "&" > 
}
void inicio() : {}
{
   programa() <EOF>
}

void programa() : {}
{
   ( comando() )*
}

void comando() : {}
{
   atribuicao() | declaracao() | se() | enquanto() | le() | exibe()
}

void atribuicao() : {Token t;}
{
   t= <VAR>
   {
     	AcoesSemanticas.verificarInicialização(tabela, t.image, t.endLine);
   } <ATRIB> expressao() <PV>
}


void declaracao() : {Token t; String tipo;} { 
	(<NUMERO>{tipo= "NUMERO"; }|<PALAVRA>{ tipo= "PALAVRA"; }) t=<VAR>
	{
		AcoesSemanticas.adicionarTabela (tabela, t.image, tipo, t.endLine);
	}
	( <ATRIB> expressao() )? (<VIRGULA> t=<VAR>
	{
	  	AcoesSemanticas.adicionarTabela (tabela, t.image, tipo, t.endLine);
	}
	( <ATRIB> expressao() )? )* <PV> 
}


void se() : {}
{
   <SE> <AP> expressao() <FP> programa() <FIMSE>
}

void enquanto() : {}
{
   <ENQUANTO> <AP> expressao() <FP> programa() <FIMENQUANTO>
}

void le() : {Token t;}
{
   <LEITURA> t=<VAR>
   {
   		AcoesSemanticas.verificarInicialização(tabela, t.image, t.endLine);
   }
   ( <VIRGULA> t=<VAR>
   {
    	AcoesSemanticas.verificarInicialização(tabela, t.image, t.endLine);
   }
   )* <PV>
}

void exibe() : {}
{
   <EXIBE> expressao() ( <VIRGULA> expressao() )* <PV>
}

void expressao() : {Expressao expressao = new Expressao();}
{
   expressaoAuxiliar(expressao)
    {System.out.println(expressao.getListaExpPosFixa().toString());}
}

void expressaoAuxiliar(Expressao expressao) : {Token t;}
{
   termo(expressao)(t=<OU>termo(expressao)
   {
     expressao.addListaPos (t.image, Tipo.OPERADOR);
   }
   )*

}

void termo(Expressao expressao) : {Token t;}
{
   termo1(expressao) (t=<IGUAL> termo1(expressao)
   {
     expressao.addListaPos (t.image, Tipo.OPERADOR);
   }
   )?
}

void termo1(Expressao expressao) : {Token t;}
{
   termo2(expressao) (t=<CONCAT> termo2(expressao)
   {
     expressao.addListaPos (t.image, Tipo.OPERADOR);
   }
   )*
}

void termo2(Expressao expressao) : {Token t;}
{
   termo3(expressao) ((t=<SOMA>|t=<SUB>) termo3(expressao)
   {
     expressao.addListaPos (t.image, Tipo.OPERADOR);
   }
   )*
}

void termo3(Expressao expressao) : {Token t;}
{
   termo4(expressao) ((t=<MUL>|t=<DIV>) termo4(expressao)
   {
     expressao.addListaPos (t.image, Tipo.OPERADOR);
   }
   )*
}

void termo4(Expressao expressao) : {Token t; Token tipo; Token valor; Token sinal;}
{
   <AP> expressaoAuxiliar(expressao) <FP>
   |valor=<NUM>
   {
     expressao.addListaPos (valor.image, Tipo.NUMERO);
   }
   |sinal=<SOMA>valor=<NUM>
   {
     expressao.addListaPos (sinal.image+valor.image, Tipo.NUMERO);
   }
   |sinal=<SUB>valor=<NUM>
   {
     expressao.addListaPos (sinal.image+valor.image, Tipo.NUMERO);
   }
   |t=<VAR>
   {
     AcoesSemanticas.verificarInicialização(tabela, t.image, t.endLine);
     expressao.addListaPos (t.image, Tipo.VARIAVEL);
   }
   |valor=<STRING>
   {
     expressao.addListaPos (valor.image, Tipo.PALAVRA);
   }
}
