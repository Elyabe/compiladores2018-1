options {
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compilador)
import java.io.*;
import files.*;
public class Compilador {

   public static Tabela tab = new Tabela();
  
   public static void main(String args[])  throws ParseException  {
      Compilador compilador = null;
      
      try {
       	 
         compilador = new Compilador(new FileInputStream("exemplo18.spc"));
         Compilador.inicio();
         tab.imprimeTabela();
      }
      catch(FileNotFoundException e) {
         System.out.println("Erro: arquivo nao encontrado");
      }
      catch(TokenMgrError e) {
         System.out.println("Erro lexico\n" + e.getMessage());
      }
   }
}
PARSER_END(Compilador)
 
SKIP : { " " | "\t" | "\r" | "\n" }

//TOKENS DE COMANDOS 
TOKEN [IGNORE_CASE] : {
  		<EXIBE: "exibe" >  |
  		<LEITURA: "le" > | 
		<SE: "se" > |
      	<FIMSE: "fim-se" > |
      	<ENQUANTO: "enquanto" > |
      	<FIMENQUANTO: "fim-enquanto" > 
}
//TOKENS DE TIPOS 
TOKEN [IGNORE_CASE] : {
  		<NUMERO: "numero" >  |
  		<PALAVRA: "palavra" >  
}
//----------CARACTERES----------
TOKEN : {
		< #CHAR: ["a"-"z"] | ["A" - "Z"] > | 
   		< AP: "(" > |
    	< FP: ")" > |
		< PV: ";" > |
		< VIRGULA: "," > |
    	< STRING: "\"" (~["\""])* "\"" > |
   		< VAR: (< CHAR >)+ (["a" - "z", "A" - "Z" ,"0" - "9", "_"])* > 
}
//-----------NUMEROS-----------
TOKEN : {
	< #DIGIT: ["0"-"9"] > |  
    < NUM: (< DIGIT >)* (".")? (< DIGIT >)+ > 
}
//----------OPERADORES---------
TOKEN : {
 	< SOMA: "+" > |
	< SUB: "-" > |
	< MUL: "*" > |
    < DIV: "/" > |
    < OU: "OR" > |
    < ATRIB: "<-"  > |
    < IGUAL: "=" > |
   	< CONCAT: "&" > 
}
  
//JAVACODE void inicio()
//{
//      Token t;
//   do {
//      t = getNextToken();
//      System.out.println(tokenImage[t.kind]+"\t"+t.image);
//   }
//   while(t.kind != EOF);
//}

//Gramatica de expressoes:

void expressao():
{}
{
	 termo()(< OU > termo())*
}

void  termo():
{}
{
  	termo1() (< IGUAL > termo1())?
}

void termo1():
{}
{
  	termo2() (< CONCAT > termo2())*
} 
void termo2():
{}
{
  	termo3() ((< SOMA >|< SUB >) termo3())*
}

void termo3():
{}
{
   termo4() ((< MUL >|< DIV >) termo4())*
}

void termo4():
{Token t;}
{
  <AP> expressao() <FP> 
|<NUM> 
|<SOMA><NUM> 
|<SUB><NUM> 
|t=<VAR>
{
  	if(tab.verificaSimbolo(t.image) == false) {
  	  	System.out.println("Variavel nao Declarada");
  	  	return;
  	}
}
|<STRING>

}
 
//GRAMATICA COMPLETA 
void inicio() :
{}
{
  (comando())*

}

void comando():
{}
{
    atribuicao() | declaracao() | se() | enquanto() | le() | exibe()
}

void atribuicao():
{}
{
  	< VAR > < ATRIB > expressao() < PV >
}

void declaracao():
{ 	Simbolo simbolo;
 	Token tipo, variavel;
}
{
  	(tipo=<NUMERO>|tipo=<PALAVRA>) variavel=<VAR>
  	{
	  if(tab.verificaSimbolo(variavel.image) == false) { 
	  	  simbolo = new Simbolo();
	  	  simbolo.setTipo(tipo.image);
	  	  simbolo.setNome(variavel.image);
	  	  simbolo.setReferencia();
	  	  simbolo.incrementaMarcador(tipo.image);
	  	  tab.insereSimbolo(simbolo);
  	  }else {
  	    	System.out.println("Variavel "+ variavel.image + " Duplicada");
  	    	return;
  	  }

  	}
  	( <ATRIB> expressao() )? (<VIRGULA> <VAR> ( <ATRIB> expressao() )? )* <PV>
}

void se():
{}
{
  	<SE> <AP> expressao() <FP> inicio() <FIMSE>
}
 
void enquanto():
{}
{
  	<ENQUANTO> <AP> expressao() <FP> inicio() <FIMENQUANTO>
}
 
void le():
{}
{
  	<LEITURA> <VAR> ( <VIRGULA> <VAR> )* <PV>
}
 
void exibe():
{}
{
	<EXIBE> expressao() ( <VIRGULA> expressao() )* <PV>
}
	