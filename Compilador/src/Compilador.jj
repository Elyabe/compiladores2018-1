options {
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compilador)

import java.io.*;
public class Compilador
{
   // Tabela de símbolos do compilador
   static public Tabela tab;
    
   public static void main(String args[])  throws ParseException
   {
      Compilador compilador = null;
	  tab = new Tabela();

      try
      {
         compilador = new Compilador(new FileInputStream("exemplo16.spc"));
         Compilador.inicio();
		 System.out.println(tab);
         System.out.println("Execução finalizada com sucesso!\n");
      }
      catch(FileNotFoundException e)
      {
         System.out.println("Erro: arquivo nao encontrado\n");
      }
      catch(TokenMgrError e)
      {
         System.out.println("Erro lexico:\n" + e.getMessage());
      }
      catch(ParseException e)
      {
		System.out.println("Erro Sintático:\n" + e.getMessage());
      }
      
   } 
}
PARSER_END(Compilador)
 
SKIP : { " " | "\t" | "\r" | "\n" }

//TOKENS DE COMANDOS 
TOKEN [IGNORE_CASE] :
{
  		<EXIBE: "exibe" >  |
  		<LEITURA: "le" > | 
		<SE: "se" > |
      	<FIMSE: "fim-se" > |
      	<ENQUANTO: "enquanto" > |
      	<FIMENQUANTO: "fim-enquanto" > 
}

//TOKENS DE TIPOS 
TOKEN [IGNORE_CASE] :
{
  		<NUMERO: "numero" >  |
  		<PALAVRA: "palavra" >  
}
//----------CARACTERES----------
TOKEN : {
		< #CHAR: ["a"-"z"] | ["A" - "Z"] > | 
   		< AP: "(" > |
    	< FP: ")" > |
		< PV: ";" > |
		< VIRGULA: "," > |
    	< STRING: "\"" (~["\""])* "\"" > |
   		< VAR: (< CHAR >)+ (["a" - "z", "A" - "Z" ,"0" - "9", "_"])* > 
}
//-----------NUMEROS-----------
TOKEN : {
	< #DIGIT: ["0"-"9"] > |  
    < NUM: (< DIGIT >)* (".")? (< DIGIT >)+ > 
}
//----------OPERADORES---------
TOKEN : {
 	< SOMA: "+" > |
	< SUB: "-" > |
	< MUL: "*" > |
    < DIV: "/" > |
    < OU: "OR" > |
    < ATRIB: "<-"  > |
    < IGUAL: "=" > |
   	< CONCAT: "&" > 
}
  
void inicio() : { }
{
	( comando() )* < EOF > 
}

void expressao() : { }
{
	termo() ( < OU > termo() )*
}

void termo() : { }
{
	termo1()( < IGUAL > termo1() )?
}

void termo1() : { }
{
	termo2()( < CONCAT > termo2() )*
}

void termo2() : { }
{
	termo3()( ( < SOMA > | < SUB > ) termo3() )*
}

void termo3() : { }
{
	termo4()( ( < MUL > | < DIV > ) termo4() )*
}

void termo4() : { Token t; }
{
	< AP > expressao() < FP > |
	< NUM > |
	< SOMA > < NUM > |
	< SUB > < NUM > |
	t = < VAR > { tab.declaracaoPrevia(t); } |
	< STRING >
}

void comando() : { }
{
	atribuicao() |
	declaracao() |
	se() |
	enquanto() |
	le() |
	exibe()
}

void atribuicao() : { Token t;}
{
	t = < VAR > { tab.declaracaoPrevia(t);} < ATRIB > expressao() < PV >
}

void declaracao() : {Token t; char c_tp; }
{
	( < NUMERO > { c_tp = 'N'; } | < PALAVRA > { c_tp = 'S'; } )
	t = < VAR > { tab.alocarVariavel( t, c_tp ); }( < ATRIB > expressao() )?
	( < VIRGULA > t =  < VAR > ( < ATRIB > expressao() )? { tab.alocarVariavel( t, c_tp ); } )* < PV >
}

void se() : { }
{
	< SE > < AP > expressao() < FP > ( comando() )* < FIMSE >
}

void enquanto() : { }
{
	< ENQUANTO > < AP > expressao() < FP > ( comando() )* < FIMENQUANTO >
}

void le() : { Token t; }
{
	< LEITURA > t = < VAR > { tab.declaracaoPrevia(t); } ( < VIRGULA > t = < VAR > { tab.declaracaoPrevia(t); } )* < PV >
}

void exibe() : { }
{
	< EXIBE > expressao() ( < VIRGULA > expressao() )* < PV >
}