options
{
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compilador)

import java.io.*;
public class Compilador
{
   // Tabela de símbolos do compilador
   static public Tabela tab;
    
   public static void main(String args[])  throws ParseException
   {
      Compilador compilador = null;
	  tab = new Tabela();

      try
      {
         compilador = new Compilador(new FileInputStream("exemplo14.spc"));
         Compilador.inicio();
		 System.out.println(tab);
         System.out.println("Execução finalizada com sucesso!\n");
      }
      catch(FileNotFoundException e)
      {
         System.out.println("Erro: arquivo nao encontrado\n");
      }
      catch(TokenMgrError e)
      {
         System.out.println("Erro lexico:\n" + e.getMessage());
      }
      catch(ParseException e)
      {
		System.out.println("Erro Sintático:\n" + e.getMessage());
      }
      
   }
}
PARSER_END(Compilador)
 
SKIP : { " " | "\t" | "\r" | "\n" }

//TOKENS DE COMANDOS 
TOKEN [IGNORE_CASE] :
{
  		<EXIBE: "exibe" >  |
  		<LEITURA: "le" > | 
		<SE: "se" > |
      	<FIMSE: "fim-se" > |
      	<ENQUANTO: "enquanto" > |
      	<FIMENQUANTO: "fim-enquanto" > 
}

//TOKENS DE TIPOS 
TOKEN [IGNORE_CASE] :
{
  		<NUMERO: "numero" >  |
  		<PALAVRA: "palavra" >  
}
//----------CARACTERES----------
TOKEN : {
		< #CHAR: ["a"-"z"] | ["A" - "Z"] > | 
   		< AP: "(" > |
    	< FP: ")" > |
		< PV: ";" > |
		< VIRGULA: "," > |
    	< STRING: "\"" (~["\""])* "\"" > |
   		< VAR: (< CHAR >)+ (["a" - "z", "A" - "Z" ,"0" - "9", "_"])* > 
}
//-----------NUMEROS-----------
TOKEN :
{
	< #DIGIT: ["0"-"9"] > |  
    < NUM: (< DIGIT >)* (".")? (< DIGIT >)+ > 
}
//----------OPERADORES---------
TOKEN :
{
 	< SOMA: "+" > |
	< SUB: "-" > |
	< MUL: "*" > |
    < DIV: "/" > |
    < OU: "OR" > |
    < ATRIB: "<-"  > |
    < IGUAL: "=" > |
   	< CONCAT: "&" > 
}
  
void inicio() : { }
{
	( comando() )* < EOF > 
}

void pre_exp() : { Lista listaExp = new Lista(); }
{
	expressao( listaExp ){ System.out.println(listaExp);}
}


void expressao( Lista listaExp ) : { Token t; Item item; }
{
	( termo( listaExp ) ( t = < OU > termo( listaExp ) { item = new Item( t.image, Operador.OU ); listaExp.add(item); } )* )
}

void termo(  Lista listaExp ) : { Token t; Item item; }
{
	termo1( listaExp )( t = < IGUAL > termo1( listaExp ) { item = new Item( t.image, Operador.IGUAL ); listaExp.add(item); } )?
}

void termo1( Lista listaExp ) : { Token t; Item item; }
{
	termo2( listaExp )
	( t = < CONCAT > termo2( listaExp )
	{
	  item = new Item( t.image, Operador.CONCAT );
	  listaExp.add(item);
	}
	)*
}

void termo2( Lista listaExp ) : { Token t; Item item; Operador op; }
{
	termo3( listaExp )
	( ( t = < SOMA > { op = Operador.ADD; } | t = < SUB > { op = Operador.SUB; } ) termo3( listaExp )
	  {
		item = new Item( t.image, op );
		listaExp.add( item );
	  }
	)*
}

void termo3( Lista listaExp ) : { Item item; Token t; Operador op; }
{
	termo4( listaExp )
	( ( t = < MUL > { op = Operador.MUL; } | t = < DIV > { op = Operador.DIV; } ) termo4( listaExp )
	  {  
		item = new Item( t.image, op );
		listaExp.add(item);
      }
	)*
}

void termo4( Lista listaExp ) : { Item item; Token t; Tipo tp = null ; String sinal = "";}
{
	< AP > expressao( listaExp ) < FP >|
    (
	    t = < NUM > { tp = Tipo.NUMERO; }|
		< SOMA > t = < NUM > { sinal = "+"; }|
		< SUB > t = < NUM > { sinal = "-"; }|
		t = < VAR > { AcaoSemantica.declaracaoPrevia( tab, t ); tp = Tipo.VARNUM; }|
		t = < STRING > { tp = Tipo.VARSTR; }
	)
	{
		item = new Item( sinal + t.image, tp );
		listaExp.add( item );
	}
}

void comando() : { }
{
	atribuicao() |
	declaracao() |
	se() |
	enquanto() |
	le() |
	exibe()
}

void atribuicao() : { Token t;}
{
	t = < VAR > { AcaoSemantica.declaracaoPrevia( tab, t ); } < ATRIB > pre_exp() < PV >
}

void declaracao() : { Token t; char c_tp; }
{
	( < NUMERO > { c_tp = 'N'; } | < PALAVRA > { c_tp = 'S'; } )
	t = < VAR > { AcaoSemantica.criarVariavel( tab, t, c_tp ); }( < ATRIB > pre_exp() )?
	( < VIRGULA > t =  < VAR > ( < ATRIB > pre_exp() )? { AcaoSemantica.criarVariavel( tab, t, c_tp ); } )* < PV >
}

void se() : {}
{
	< SE > < AP > pre_exp() < FP > ( comando() )* < FIMSE >
}

void enquanto() : {}
{ 
	< ENQUANTO > < AP > pre_exp() < FP > ( comando() )* < FIMENQUANTO >
}

void le() : { Token t;}
{
	< LEITURA > t = < VAR > { AcaoSemantica.declaracaoPrevia( tab, t ); } ( < VIRGULA > t = < VAR > { AcaoSemantica.declaracaoPrevia( tab, t ); } )* < PV >
}

void exibe() : {}
{
	< EXIBE > pre_exp() ( < VIRGULA > pre_exp() )* < PV >
}