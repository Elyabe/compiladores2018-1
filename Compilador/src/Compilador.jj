options {
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}
 
PARSER_BEGIN(Compilador)
import java.io.*;
import java.util.LinkedList;
public class Compilador {
	static Tabela tabela = new Tabela();  
   public static void main(String args[])  throws ParseException
   {
      Compilador compilador = null;
      
      try {        
         compilador = new Compilador(new FileInputStream("exemplo17.spc"));

         Compilador.one_line();
         
      }
      catch(FileNotFoundException e) {
         System.out.println("Erro: arquivo nao encontrado");
      }
      catch(TokenMgrError e) {
         System.out.println("Erro lexico\n" + e.getMessage());
      }
      catch(ParseException e) {
         System.out.println("Erro sintático\n" + e.getMessage());
      }
   }
}

PARSER_END(Compilador)
 
SKIP : { " " | "\t" | "\r" | "\n" }

//TOKENS DE COMANDOS
TOKEN [IGNORE_CASE] : {
  		<EXIBE: "exibe" >  |
  		<LEITURA: "le" > | 
		<SE: "se" > |
      	<FIMSE: "fim-se" > |
      	<ENQUANTO: "enquanto" > |
      	<FIMENQUANTO: "fim-enquanto" > 
}
//TOKENS DE TIPOS 
TOKEN [IGNORE_CASE] : {
  		<NUMERO: "numero" >  |
  		<PALAVRA: "palavra" >  
}
//----------CARACTERES----------
TOKEN : {
		< #CHAR: ["a"-"z"] | ["A" - "Z"] > | 
   		< AP: "(" > |
    	< FP: ")" > |
		< PV: ";" > |
		< VIRGULA: "," > |
    	< STRING: "\"" (~["\""])* "\"" > |
   		< VAR: (< CHAR >)+ (["a" - "z", "A" - "Z" ,"0" - "9", "_"])* > 
}
//-----------NUMEROS-----------
TOKEN : {
	< #DIGIT: ["0"-"9"] > |  
    < NUM: (< DIGIT >)* (".")? (< DIGIT >)+ > 
}
//----------OPERADORES---------
TOKEN : {
 	< SOMA: "+" > |
	< SUB: "-" > |
	< MUL: "*" > |
    < DIV: "/" > |
    < OU: "OR" > |
    < ATRIB: "<-"  > |
    < IGUAL: "=" > |
   	< CONCAT: "&" > 
}

//problema ao chamar expressao novamente pois pode criar outra lista

LinkedList<Item> expressao(): {LinkedList<Item> listaExp = new LinkedList<Item>();
								Item item = null;}
{

	item = termo()
	{
		listaExp.add(item);
	}
	(< OU > item = termo()
	{
		listaExp.add(item);
		listaExp.add(new Item('o',"OR"));
	}
	)*

	{return listaExp;}
}

LinkedList<Item> termo(): {LinkedList<Item> listaExp = new LinkedList<Item>();
								Item item = null; } {
	item = termo1()
	{
		listaExp.add(item);
	}(< IGUAL > item = termo1()
	{
		listaExp.add(item);
		listaExp.add(new Item('o',"="));
	}
	)?
	{return listaExp;}
}

LinkedList<Item> termo1(): {LinkedList<Item> listaExp = new LinkedList<Item>();
								Item item = null;} {
	//termo2()(< CONCAT > termo2())*
	item = termo2()
	{
		listaExp.add(item);
	}(< CONCAT > item = termo2()
	{
		listaExp.add(item);
		listaExp.add(new Item('o',"&"));
	}
	)*
	{return listaExp;}
}

LinkedList<Item> termo2(): {LinkedList<Item> listaExp = new LinkedList<Item>();
								Item item = null; Token s;} {
	a = termo3()

	{
		listaExp.add(item);
	}
	((s = < SOMA > | s = < SUB >) item = termo3()
	  
	{
	  listaExp.add(item);
	  listaExp.add(new Item('o',s.image));
	}
	
	)*
}

LinkedList<Item> termo3(): {LinkedList<Item> listaExp = new LinkedList<Item>();
								Item item = null; Token s;} {
	//termo4()((< MUL > | < DIV >) termo4())*
	item = termo4()

	{
		listaExp.add(item);
	}
	((s = < MUL > | s = < DIV >) item = termo4()
	  
	{
	  listaExp.add(item);
	  listaExp.add(new Item('o',s.image));
	}	
	)*
}

void termo4(): {} {
	< AP > expressao() <FP >| < NUM > | < SOMA > <NUM > | < SUB > <NUM > | < VAR > | < STRING >
}

void one_line() : {}
{
   inicio() <EOF>
}

void inicio(): { } {
	(comando())*
}

void comando(): { } {
  atribuicao() | declaracao() | se() | enquanto() | le() | exibe()
}

void atribuicao(): {Token var; LinkedList<Item> listaExp;} { 
	var = < VAR >
	{
	  if(!tabela.isExiste(var.image))
		System.out.println("Erro semântico \n A variável "+var.image+
                                     " não foi inicializada");
	} < ATRIB > listaExp = expressao() { System.out.println(listaExp); } < PV >  
}

void declaracao(): {Simbolo simb; Token var, tipo;} {
  	
	(tipo=< NUMERO > | tipo=< PALAVRA >)
	var=< VAR > {

		if(tabela.isExiste(var.image)) { 
			System.out.println("Erro semântico \n A variável "+var.image+
                                     " já foi declarada");
		}else { 
			simb = new Simbolo(var.image, tipo.image);
			simb.setReferencia(tabela, tipo.image);
			tabela.inclui(simb);
		}		
	} (< ATRIB > expressao())?
	(< VIRGULA > var = < VAR >(< ATRIB > expressao())? {

	  	if(tabela.isExiste(var.image)) { 
			System.out.println("Erro semântico \n A variável "+var.image+
                                     " já foi declarada");
		}else {
			simb = new Simbolo(var.image, tipo.image);
			simb.setReferencia(tabela, tipo.image);
			tabela.inclui(simb);
		}
	}
	)* { System.out.println(tabela);} < PV >
	
}

/*
void declaracao(): {Token var, tipo;} {
  	
	(tipo=< NUMERO > | tipo=< PALAVRA >)
	var=< VAR > {
		Simbolo simb = new Simbolo();
		simb.setNome(var.image);
		simb.setReferencia(tipo.image);	

		if(!simb.tab.containsKey(simb.getNome())) {
			simb.tab.put(simb.getNome(), simb);
		}
		
	} (< ATRIB > expressao())?
	(< VIRGULA > var = < VAR >(< ATRIB > expressao())?   {
		simb = new Simbolo();
		simb.setNome(var.image);
		simb.setReferencia(tipo.image);

		if(!simb.tab.containsKey(simb.getNome())) {
			simb.tab.put(simb.getNome(), simb);
		}
				
	}  )*
	< PV >
}
*/

void se(): { } {
	< SE > <AP > expressao() < FP > inicio() < FIMSE >
}

void enquanto(): { } {
	< ENQUANTO > <AP > expressao() < FP > inicio() < FIMENQUANTO >
}

void le(): { } {
	< LEITURA > <VAR > (< VIRGULA ><VAR >)*< PV >
}

void exibe(): { } {
	< EXIBE > expressao() (< VIRGULA > expressao())*< PV >
}