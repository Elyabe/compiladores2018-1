options {
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compilador)
import java.io.*;
import java.util.*;
public class Compilador {  
   static Tabela tabela;
   
   public static void main(String args[])  throws ParseException  {
      Compilador compilador = null;
      tabela = new Tabela();
      
      try {
         compilador = new Compilador(new FileInputStream("exemplo01.spc"));
         Compilador.programa();
         System.out.println("\n---------------------------\n");
         System.out.println("TABELA DE SIMBOLOS");
         System.out.println(tabela.tab);
      }  
      catch(FileNotFoundException e) {
         System.out.println("Erro: arquivo nao encontrado");
      }
      catch(TokenMgrError e) {
         System.out.println("Erro lexico\n" + e.getMessage());
      }
   }
}
PARSER_END(Compilador)
 
SKIP : { " " | "\t" | "\r" | "\n" }


//TOKENS DE COMANDOS

TOKEN [IGNORE_CASE] : {
         <EXIBE: "exibe" > |
         <LEITURA: "le" > | 
         <SE: "se" > |
         <FIMSE: "fim-se" > |
         <ENQUANTO: "enquanto" >   |
         <FIMENQUANTO: "fim-enquanto" >
}

//TOKENS DE TIPOS

 TOKEN [IGNORE_CASE] : {
	<NUMERO: "numero" >  |
	<PALAVRA: "palavra" >  
 }

//CARACTERES

 TOKEN : {
	< #CHAR: ["a"-"z"] | ["A" - "Z"] > | 
	< AP: "(" > |
	< FP: ")" > |
	< PV: ";" > |
	< VIRGULA: "," > |
    < STRING: "\"" (~["\""])* "\"" > |
	< VAR: (< CHAR >)+ (["a" - "z", "A" - "Z" ,"0" - "9", "_"])* > 
 }

//NÚMEROS

 TOKEN : {
	< #DIGIT: ["0"-"9"] > |  
	< NUM: (< DIGIT >)* (".")? (< DIGIT >)+ > 
 }

//OPERADORES

 TOKEN : {
	< SOMA: "+" > |
	< SUB: "-" > |
	< MUL: "*" > |
	< DIV: "/" > |
	< OU: "OR" > |
	< ATRIB: "<-"  > |
	< IGUAL: "=" > |
	< CONCAT: "&" > 
 }
  
void programa() : { }
{
  ( comando() )*
}

void comando() : { }
{
  atribuicao() | declaracao() | se() | enquanto() | le() | exibe()
}

void atribuicao() : {
	Token v;
}
{
  v = <VAR> { tabela.verificaDeclarada(v); }<ATRIB> expressao() <PV>
}

void declaracao() : {
	Simbolo simb;
	Token t, v; //t - recebe o tipo, v - recebe o nome da variavel
}
{
  	(t = <NUMERO>| t = <PALAVRA>) v = <VAR>
		{ tabela.addVar(t, v); }
	( <ATRIB> expressao() )? (<VIRGULA> v = <VAR>
		{ tabela.addVar(t, v); }
	( <ATRIB> expressao() )? )* <PV>
}

void se() : { }
{
  <SE> <AP> expressao() <FP> programa() <FIMSE>
}

void enquanto() : { }
{
  <ENQUANTO> <AP> expressao() <FP> programa() <FIMENQUANTO>
}

void le() : {
	Token v;
}
{
  <LEITURA> v = <VAR> { tabela.verificaDeclarada(v); } ( <VIRGULA> v = <VAR> { tabela.verificaDeclarada(v); } )* <PV>
}

void exibe() : { }
{
  <EXIBE> expressao() ( <VIRGULA> expressao() )* <PV>
}

void expressao() : { LinkedList<Item> listaExp = new LinkedList<Item>(); }
{
  termo(listaExp)(<OU> termo(listaExp))*
}

void termo(LinkedList<Item> listaExp) : { }
{
  termo1(listaExp)(<IGUAL> termo1(listaExp))?
}

void termo1(LinkedList<Item> listaExp) : { }
{
  termo2(listaExp)(<CONCAT> termo2(listaExp))*
}

String termo2(LinkedList<Item> listaExp) : {
	String a, b="";
	Token sinal;
}
{
  a = termo3(listaExp)((sinal = <SOMA>| sinal = <SUB>) b = termo3(listaExp) {
//pegar o operador aqui e botar na lista
    Item isinal = new Item();
    isinal.setValor(sinal.image);    
    listaExp.add(isinal);
    
    a = a+b+sinal.image;
    
    System.out.println("posfixo "+a);
    System.out.println(Arrays.toString(listaExp.toArray()));

    })* { return a; } 
}

String termo3(LinkedList<Item> listaExp) : {
	String a, b="";
	Token sinal;
}
{
  a = termo4(listaExp)((sinal = <MUL>|sinal = <DIV>) b = termo4(listaExp) { a = a+b+sinal.image; })* { return a; }
}

String termo4(LinkedList<Item> listaExp) : { 
	Token v;
	String a;
}
{
  <AP> expressao() <FP> { return ""; }
  |v = <NUM> { Item vItem = new Item(); vItem.setValor(v.image); listaExp.add(vItem); return v.image; }//jah colocar na lista imediatamente
  |v = <SOMA><NUM>{ return v.image; }
  |v = <SUB><NUM>{ return v.image; }
  |v = <VAR> { tabela.verificaDeclarada(v); return v.image; }
  |v = <STRING>{ return v.image; }
}