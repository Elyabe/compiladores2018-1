/* Generated By:JavaCC: Do not edit this line. Compilador.java */
package parser;
import java.io.*;
import apoio.*;
import comando.*;
import geradorCodigo.*;
import tratamentoErro.*;
import semantico.*;
import jasmin.*;

public class Compilador implements Config, CompiladorConstants {
  public static Tabela tabela;
  public static ListaComandosAltoNivel listaComandosAltoNivel = null;
  public static ListaComandosPrimitivos listaComandosPrimitivos = null;
  public static String arquivo[] = { pacoteExemplos + nomeArquivoAssembler + extensaoSegPassagem };

  public static void main(String args []) throws ParseException
  {
        Compilador compilador = null;
        listaComandosAltoNivel = null;
        tabela = null;

        try
    {
                compilador = new Compilador(new FileInputStream( pacoteExemplos + nomeArquivo + extensaoFonte));
                tabela = new Tabela();
                listaComandosAltoNivel = Compilador.inicio();;
                listaComandosPrimitivos = listaComandosAltoNivel.geraListaComandoPrimitivosTotal();
                CodigoDestino.geraCodigoAssembler( listaComandosPrimitivos );


                System.out.println("\u005cnTABELA DE S\u00cdMBOLOS:\u005cn" + tabela +
                                                   "\u005cn\u005cnCOMANDOS ALTO N\u00cdVEL:\u005cn" + listaComandosAltoNivel +
                                                   "\u005cn\u005cnCOMANDOS PRIMITIVOS:\u005cn" + listaComandosPrimitivos);

                Main.main(arquivo);
        System.out.println("\u005cnExecucao finalizada com sucesso !\u005cn");
    }
    catch(FileNotFoundException e)
    {
        System.err.println("Erro: Arquivo informado nao foi encontrado. \u005cn");
    }
    catch(TokenMgrError e)
    {
        System.err.println("Erro lexico: " + e.getMessage());
    }
    catch(ParseException e)
    {
                System.err.println("Erro Sintatico: " + e.getMessage());
    }
    catch(ErroSemantico e)
    {
                System.err.println("Erro Semantico: " + e.getMessage());
    }
  }

  static final public Expressao expressao() throws ParseException {
                         Expressao exp = new Expressao();
    posExpressao(exp);
                            {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  static final public void posExpressao(Expressao exp) throws ParseException {
                                    Token token = null; Item item  = null;
    termo(exp);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OU:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      token = jj_consume_token(OU);
            item = new Operador(token, TipoOperador.OU);
            exp.addItemInfixo(item);
      termo(exp);
            item = new Operador(token, TipoOperador.OU);
            exp.addItemPosfixo(item);
    }
  }

  static final public void termo(Expressao exp) throws ParseException {
                            Token token = null; Item item  = null;
    termo1(exp);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      token = jj_consume_token(IGUAL);
            item = new Operador(token, TipoOperador.IGUAL);
            exp.addItemInfixo(item);
      termo1(exp);
            item = new Operador(token, TipoOperador.IGUAL);
            exp.addItemPosfixo(item);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  static final public void termo1(Expressao exp) throws ParseException {
                             Token token = null; Item item = null;
    termo2(exp);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCAT:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      token = jj_consume_token(CONCAT);
            item = new Operador(token, TipoOperador.CONCAT);
            exp.addItemInfixo(item);
      termo2(exp);
            item = new Operador(token, TipoOperador.CONCAT);
            exp.addItemPosfixo(item);
    }
  }

  static final public void termo2(Expressao exp) throws ParseException {
  Token token = null;
  Operador item = null;
  TipoOperador op = null;
    termo3(exp);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
      case SUB:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
        token = jj_consume_token(SOMA);
                                        op = TipoOperador.ADD;
        break;
      case SUB:
        token = jj_consume_token(SUB);
                                                   op = TipoOperador.SUB;
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                             item = new Operador(token, op); exp.addItemInfixo(item);
      termo3(exp);
                                               item = new Operador(token, op); exp.addItemPosfixo(item);
    }
  }

  static final public void termo3(Expressao exp) throws ParseException {
                             Token token = null; Operador item = null; TipoOperador op = null;
    termo4(exp);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
      case DIV:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
        token = jj_consume_token(MUL);
                                       op = TipoOperador.MUL;
        break;
      case DIV:
        token = jj_consume_token(DIV);
                                                   op = TipoOperador.DIV;
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                              item = new Operador(token, op); exp.addItemInfixo(item);
      termo4(exp);
                     item = new Operador(token, op); exp.addItemPosfixo(item);
    }
  }

  static final public void termo4(Expressao exp) throws ParseException {
  Token token = null, token_sinal = null;
  Operando item = null;
  Operador item_apresentacao = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AP:
      jj_consume_token(AP);
      posExpressao(exp);
      jj_consume_token(FP);
      break;
    case SOMA:
    case SUB:
    case STRING:
    case VAR:
    case NUM:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        token = jj_consume_token(NUM);
                           item = new Operando(token, TipoDado.NUM, TipoElemento.CTE);
        break;
      case SOMA:
        token_sinal = jj_consume_token(SOMA);
        token = jj_consume_token(NUM);
            item = new Operando(token, TipoDado.NUM, TipoElemento.CTE );
                item_apresentacao = new Operador(token_sinal, TipoOperador.ADD );
                exp.addItemInfixo( item_apresentacao );
        break;
      case SUB:
        token_sinal = jj_consume_token(SUB);
        token = jj_consume_token(NUM);
            token.image = token_sinal.image + token.image;
            item = new Operando(token, TipoDado.NUM, TipoElemento.CTE);
        break;
      case VAR:
        token = jj_consume_token(VAR);
            Compilador.tabela.declaracaoPrevia(token);
                item = new Operando( token, Compilador.tabela.consultaTipo( token.image ), TipoElemento.VAR );
        break;
      case STRING:
        token = jj_consume_token(STRING);
                              item = new Operando(token, TipoDado.STR, TipoElemento.CTE);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        exp.addItemPosfixo(item);
        exp.addItemInfixo(item);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public ListaComandosAltoNivel inicio() throws ParseException {
                                   ListaComandosAltoNivel lista = new ListaComandosAltoNivel();
    programa(lista);
    jj_consume_token(0);
                                  {if (true) return lista;}
    throw new Error("Missing return statement in function");
  }

  static final public void programa(ListaComandosAltoNivel lista) throws ParseException {
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXIBE:
      case LEITURA:
      case SE:
      case ENQUANTO:
      case NUMERO:
      case PALAVRA:
      case VAR:
      case COMENTLINHA:
      case COMENTBLOCO:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
      comando(lista);
    }
  }

  static final public void comando(ListaComandosAltoNivel lista) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      atribuicao(lista);
      break;
    case NUMERO:
    case PALAVRA:
      declaracao(lista);
      break;
    case SE:
      se(lista);
      break;
    case ENQUANTO:
      enquanto(lista);
      break;
    case LEITURA:
      le(lista);
      break;
    case EXIBE:
      exibe(lista);
      break;
    case COMENTLINHA:
      jj_consume_token(COMENTLINHA);
      break;
    case COMENTBLOCO:
      jj_consume_token(COMENTBLOCO);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void atribuicao(ListaComandosAltoNivel lista) throws ParseException {
                                                Token token; Expressao exp;
    token = jj_consume_token(VAR);
                          Compilador.tabela.declaracaoPrevia(token);
    jj_consume_token(ATRIB);
    exp = expressao();
    jj_consume_token(PV);
          lista.addComando(new ComandoAtribuicao(tabela.consultaSimbolo(token.image), exp));
  }

  static final public void declaracao(ListaComandosAltoNivel lista) throws ParseException {
  Token token; TipoDado tpDado;
  TipoElemento tpElemento;
  Expressao expAtrib;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO:
      jj_consume_token(NUMERO);
                 tpDado = TipoDado.NUM;
      break;
    case PALAVRA:
      jj_consume_token(PALAVRA);
                                                          tpDado = TipoDado.STR;
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    token = jj_consume_token(VAR);
                    Compilador.tabela.criarVariavel(token, tpDado);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATRIB:
      jj_consume_token(ATRIB);
      expAtrib = expressao();
         lista.addComando(new ComandoAtribuicao(tabela.consultaSimbolo(token.image), expAtrib ));
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      jj_consume_token(VIRGULA);
      token = jj_consume_token(VAR);
                                  Compilador.tabela.criarVariavel(token, tpDado);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATRIB:
        jj_consume_token(ATRIB);
        expAtrib = expressao();
                  lista.addComando(new ComandoAtribuicao(tabela.consultaSimbolo(token.image), expAtrib ));
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
    }
    jj_consume_token(PV);
  }

  static final public void se(ListaComandosAltoNivel lista) throws ParseException {
  Expressao exp; Token token;
  ListaComandosAltoNivel lista_se = new ListaComandosAltoNivel();
    token = jj_consume_token(SE);
    jj_consume_token(AP);
    exp = expressao();
    jj_consume_token(FP);
    programa(lista_se);
    jj_consume_token(FIMSE);
          lista.addComando(new ComandoCondicionalSimples(token, exp, lista_se));
  }

  static final public void enquanto(ListaComandosAltoNivel lista) throws ParseException {
  Expressao exp;
  ListaComandosAltoNivel lista_enquanto = new ListaComandosAltoNivel();
  Token token;
    token = jj_consume_token(ENQUANTO);
    jj_consume_token(AP);
    exp = expressao();
    jj_consume_token(FP);
    programa(lista_enquanto);
    jj_consume_token(FIMENQUANTO);
          lista.addComando(new ComandoEnquanto(token, exp, lista_enquanto));
  }

  static final public void le(ListaComandosAltoNivel lista) throws ParseException {
                                        Token token, token_leitura;
    token_leitura = jj_consume_token(LEITURA);
    token = jj_consume_token(VAR);
                                                     Compilador.tabela.declaracaoPrevia(token);
         lista.addComando(new ComandoEntrada(token_leitura, tabela.consultaSimbolo(token.image)));
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_7;
      }
      jj_consume_token(VIRGULA);
      token = jj_consume_token(VAR);
                                 Compilador.tabela.declaracaoPrevia(token);
         lista.addComando(new ComandoEntrada(token_leitura, tabela.consultaSimbolo(token.image)));
    }
    jj_consume_token(PV);
  }

  static final public void exibe(ListaComandosAltoNivel lista) throws ParseException {
                                           Token token; Expressao exp;
    token = jj_consume_token(EXIBE);
    exp = expressao();
                                             lista.addComando(new ComandoSaida(token, exp));
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_8;
      }
      jj_consume_token(VIRGULA);
      exp = expressao();
                                         lista.addComando(new ComandoSaida(token, exp));
    }
    jj_consume_token(PV);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompiladorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20000,0x80000,0x100000,0x6000,0x6000,0x18000,0x18000,0x8c006000,0x8c406000,0x38001ae0,0x38001ae0,0x1800,0x40000,0x2000000,0x40000,0x2000000,0x2000000,};
   }

  /** Constructor with InputStream. */
  public Compilador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compilador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Compilador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Compilador(CompiladorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompiladorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[32];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 32; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
