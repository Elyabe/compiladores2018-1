/* Generated By:JavaCC: Do not edit this line. Compilador.java */
package parser;
import semantico.*;
import apoio.*;
import java.io.*;
import java.util.LinkedList;
import geradorCodigo.*;
import comandos.*;
import primitivo.*;
import jasmin.*;

public class Compilador implements CompiladorConstants {

        public static Tabela tabela = new Tabela();
        static ListaComandosAltoNivel listaCAN;
        static ListaComandosPrimitivos listaCP;

   public static void main(String args[])  throws ErroSemantico
   {
      Compilador compilador = null;

      try {
        compilador = new Compilador(new FileInputStream("exemplosSPC/exemplo13.spc"));

                //listaCAN = new ListaComandosAltoNivel();
                //listaCP = new ListaComandosPrimitivos();

        listaCAN = Compilador.one_line();

                listaCP = listaCAN.geraListaComandosPrimitivosTotal();

                String codigoDestino;

                codigoDestino = listaCP.geraCodigoDestinoTotal();
                BufferedWriter arqSaida;
                try {
                        arqSaida = new BufferedWriter(new FileWriter("prog_destino.j"));

                        arqSaida.write(codigoDestino);
                        arqSaida.close();
                }
                catch(IOException e) {
              System.out.println("Problema no arquivo 'prog_destino.j'");
        }
        catch(Exception e) {
              System.out.println(e.getMessage());
        }

                String arquivo[] = {"prog_destino.j"};
                Main.main(arquivo);
                //System.out.println(listaCAN);
                //System.out.println(listaCP.geraCodigoDestinoTotal());
        //System.out.println(tabela);



      }
      catch(FileNotFoundException e) {
         System.out.println("Erro: arquivo nao encontrado");
      }
      catch(ErroSemantico e) {
         System.out.println("Erro semantico\u005cn" + e.getMessage());
      }
      catch(TokenMgrError e) {
         System.out.println("Erro lexico\u005cn" + e.getMessage());
      }
      catch(ParseException e) {
         System.out.println("Erro sint\u00e1tico\u005cn" + e.getMessage());
      }

   }

//--------------------------------------------------------------------------------------------
  static final public Expressao expressao() throws ParseException {
                       Expressao e = new Expressao();
    iniciaExp(e);
                //System.out.println(e.listaExpPosfixa);

          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public void iniciaExp(Expressao e) throws ParseException {
                             Token s; Item item = null;
    termo(e);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OU:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      s = jj_consume_token(OU);
      termo(e);
                //e.listaExpPosfixa.add(new Item(Tipo.operacao,s.image));

          item = new Operador(TipoOperador.OR,s);
          e.listaExpPosfixa.add(item);
    }
  }

  static final public void termo(Expressao e) throws ParseException {
                         Token s; Item item = null;
    termo1(e);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      s = jj_consume_token(IGUAL);
      termo1(e);
                //e.listaExpPosfixa.add(new Item(Tipo.operacao,s.image));
          item = new Operador(TipoOperador.COMP,s);
          e.listaExpPosfixa.add(item);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  static final public void termo1(Expressao e) throws ParseException {
                          Token s; Item item = null;
    termo2(e);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCAT:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      s = jj_consume_token(CONCAT);
      termo2(e);
                //e.listaExpPosfixa.add(new Item(Tipo.operacao,s.image));
                item = new Operador(TipoOperador.CONCAT,s);
                e.listaExpPosfixa.add(item);
    }
  }

  static final public void termo2(Expressao e) throws ParseException {
                           Token s; Item item = null; TipoOperador tipo = null;
    termo3(e);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
      case SUB:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
        s = jj_consume_token(SOMA);
                        tipo = TipoOperador.ADD;
        break;
      case SUB:
        s = jj_consume_token(SUB);
                      tipo = TipoOperador.SUB;
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      termo3(e);
          //e.listaExpPosfixa.add(new Item(Tipo.operacao, s.image));

          item = new Operador(tipo,s);
          e.listaExpPosfixa.add(item);
    }
  }

  static final public void termo3(Expressao e) throws ParseException {
                           Token s; Item item = null; TipoOperador tipo = null;
    termo4(e);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
      case DIV:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
        s = jj_consume_token(MUL);
                       tipo = TipoOperador.MUL;
        break;
      case DIV:
        s = jj_consume_token(DIV);
                      tipo = TipoOperador.DIV;
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      termo4(e);
          //e.listaExpPosfixa.add(new Item(Tipo.operacao, s.image));

          item = new Operador(tipo,s);
          e.listaExpPosfixa.add(item);
    }
  }

  static final public void termo4(Expressao e) throws ParseException {
                           Token s,a; Item item = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AP:
      jj_consume_token(AP);
      expressao();
      jj_consume_token(FP);
      break;
    case NUM:
      a = jj_consume_token(NUM);
          //e.listaExpPosfixa.add(new Item(Tipo.numero, a.image));
          item = new Operando(TipoDado.NUM,TipoElemento.CTE,a);
          e.listaExpPosfixa.add(item);
      break;
    case SOMA:
      s = jj_consume_token(SOMA);
      a = jj_consume_token(NUM);
          //e.listaExpPosfixa.add(new Item(Tipo.numero, a.image));
          //e.listaExpPosfixa.add(new Item(Tipo.operacao, s.image));
          item = new Operando(TipoDado.NUM,TipoElemento.CTE,a);
          e.listaExpPosfixa.add(item);

          item = new Operador(TipoOperador.ADD,s);
          e.listaExpPosfixa.add(item);
      break;
    case SUB:
      s = jj_consume_token(SUB);
      a = jj_consume_token(NUM);
          //e.listaExpPosfixa.add(new Item(Tipo.numero, a.image));
          //e.listaExpPosfixa.add(new Item(Tipo.operacao, s.image));
          item = new Operando(TipoDado.NUM,TipoElemento.CTE,a);
          e.listaExpPosfixa.add(item);

          item = new Operador(TipoOperador.SUB,s);
          e.listaExpPosfixa.add(item);
      break;
    case VAR:
      s = jj_consume_token(VAR);
          if(tabela.tab.get(s.image).getTipo().equals(TipoDado.STR)) {
                        item = new Operando(TipoDado.STR, TipoElemento.VAR, s);
                        e.listaExpPosfixa.add(item);
          }
          else {
                        item = new Operando(TipoDado.NUM, TipoElemento.VAR, s);
                        e.listaExpPosfixa.add(item);
          }
      break;
    case STRING:
      s = jj_consume_token(STRING);
          item = new Operando(TipoDado.STR, TipoElemento.CTE, s);
          e.listaExpPosfixa.add(item);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//----------------------------------FUNCOES INICIAIS--------------------------------------------
  static final public ListaComandosAltoNivel one_line() throws ParseException {
                                     ListaComandosAltoNivel listaComandos;
    listaComandos = inicio();
    jj_consume_token(0);
    {if (true) return listaComandos;}
    throw new Error("Missing return statement in function");
  }

  static final public ListaComandosAltoNivel inicio() throws ParseException {
 ComandoAltoNivel cmd = null; ListaComandosAltoNivel listaComandos = new ListaComandosAltoNivel();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXIBE:
      case LEITURA:
      case SE:
      case ENQUANTO:
      case NUMERO:
      case PALAVRA:
      case VAR:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      comando(listaComandos);
    }
          {if (true) return listaComandos;}
    jj_consume_token(0);
    throw new Error("Missing return statement in function");
  }

  static final public void comando(ListaComandosAltoNivel listaCAN) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      atribuicao(listaCAN);
      break;
    case NUMERO:
    case PALAVRA:
      declaracao(listaCAN);
      break;
    case SE:
      se(listaCAN);
      break;
    case ENQUANTO:
      enquanto(listaCAN);
      break;
    case LEITURA:
      le(listaCAN);
      break;
    case EXIBE:
      exibe(listaCAN);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void atribuicao(ListaComandosAltoNivel listaCAN) throws ParseException {
                                                   Expressao e; Token var,cmd; Simbolo simb = null; ComandoAltoNivel comando;
    var = jj_consume_token(VAR);
                AcoesSemanticas.inicializacao(var.image);
                simb = new Simbolo(var.image,TipoDado.STR,tabela.marcador);
    cmd = jj_consume_token(ATRIB);
    e = expressao();
          comando = new ComandoAtribuicao(simb,e,cmd);
          listaCAN.addComando(comando);
    jj_consume_token(PV);
  }

  static final public void declaracao(ListaComandosAltoNivel listaCAN) throws ParseException {
                                                  Expressao e; Simbolo simb = null; Token var,cmd; TipoDado tipo; ComandoAltoNivel comando;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO:
      jj_consume_token(NUMERO);
                     tipo = TipoDado.NUM;
      break;
    case PALAVRA:
      jj_consume_token(PALAVRA);
                                                           tipo = TipoDado.STR;
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    var = jj_consume_token(VAR);
                AcoesSemanticas.redeclaracao(var.image, simb, tipo);
                comando = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATRIB:
      cmd = jj_consume_token(ATRIB);
      e = expressao();
                simb = new Simbolo(var.image,tipo,tabela.marcador);
                comando = new ComandoAtribuicao(simb,e,cmd);

                listaCAN.addComando(comando);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      jj_consume_token(VIRGULA);
      var = jj_consume_token(VAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATRIB:
        cmd = jj_consume_token(ATRIB);
        e = expressao();
                simb = new Simbolo(var.image,tipo,tabela.marcador);
                comando = new ComandoAtribuicao(simb,e,cmd);

                listaCAN.addComando(comando);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
                AcoesSemanticas.redeclaracao(var.image, simb, tipo);
    }
    jj_consume_token(PV);
  }

  static final public void se(ListaComandosAltoNivel listaCAN) throws ParseException {
                                          Expressao e; Token var,cmd; ComandoAltoNivel comando; ListaComandosAltoNivel lista = null;
    cmd = jj_consume_token(SE);
    jj_consume_token(AP);
    e = expressao();
    jj_consume_token(FP);
    lista = inicio();
                comando = new ComandoCondicional(e,lista,cmd);

                listaCAN.addComando(comando);
    jj_consume_token(FIMSE);
  }

  static final public void enquanto(ListaComandosAltoNivel listaCAN) throws ParseException {
                                                Expressao e; Token var,cmd; ComandoAltoNivel comando; ListaComandosAltoNivel lista = null;
    cmd = jj_consume_token(ENQUANTO);
    jj_consume_token(AP);
    e = expressao();
    jj_consume_token(FP);
    lista = inicio();
                comando = new ComandoEnquanto(e,lista,cmd);

                listaCAN.addComando(comando);
    jj_consume_token(FIMENQUANTO);
  }

  static final public void le(ListaComandosAltoNivel listaCAN) throws ParseException {
 Simbolo simb = null; Token cmd, r; ComandoAltoNivel comando; ComandoEntrada cmdE;
    cmd = jj_consume_token(LEITURA);
    r = jj_consume_token(VAR);
                AcoesSemanticas.declaracao(r.image);
                simb = new Simbolo(r.image, TipoDado.STR,tabela.marcador);
                comando = new ComandoEntrada(simb ,cmd);

                listaCAN.addComando(comando);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
      jj_consume_token(VIRGULA);
      r = jj_consume_token(VAR);
          simb = new Simbolo(r.image, TipoDado.STR,tabela.marcador);
          comando = new ComandoEntrada(simb ,cmd);

          listaCAN.addComando(comando);
    }
    jj_consume_token(PV);
  }

  static final public void exibe(ListaComandosAltoNivel listaCAN) throws ParseException {
                                             Expressao e; ComandoAltoNivel comando; Token cmd;
    cmd = jj_consume_token(EXIBE);
    e = expressao();
          comando = new ComandoSaida(e,cmd);

          listaCAN.addComando(comando);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_8;
      }
      jj_consume_token(VIRGULA);
      e = expressao();
          comando = new ComandoSaida(e,cmd);

          listaCAN.addComando(comando);
    }
    jj_consume_token(PV);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompiladorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000000,0x10000000,0x20000000,0xc00000,0xc00000,0x3000000,0x3000000,0xec4000,0x81ae0,0x81ae0,0x1800,0x8000000,0x20000,0x8000000,0x20000,0x20000,};
   }

  /** Constructor with InputStream. */
  public Compilador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compilador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Compilador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Compilador(CompiladorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompiladorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[30];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
