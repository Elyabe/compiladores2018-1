/* Generated By:JavaCC: Do not edit this line. Compilador.java */
package parser;
import java.io.*;
import apoio.*;
import geradorCodigo.*;
import semantico.*;
import exception.*;
import comando.*;
import java.util.LinkedList;

public class Compilador implements Config, CompiladorConstants {
        static Tabela tabela = new Tabela();
        public static void main(String args[])  throws SemanticException  {
        try {
                 System.out.println("Lista de Comandos:\u005cn");
                 Compilador compilador = new Compilador(new FileInputStream(nomeArquivoFonte + extensaoFonte));
                 Compilador.inicio();
                 System.out.println("\u005cnAnalise lexica, sintatica e semantica sem erros!");
                 /*System.out.println("\nTabela de Simbolos:");
	 		 System.out.println(tabela);
	 		 System.out.println("\nMarcador:\n" + tabela.get_marcador());*/
                 }
             catch(TokenMgrError e) {
                System.out.println("Erro lexico\u005cn" + e.getMessage());
             }
             catch(ParseException e) {
                 System.out.println("Erro sintatico\u005cn" + e.getMessage());
             }
              catch(SemanticException e) {
                 System.out.println("Erro semantico\u005cn" + e.getMessage());
             }
             catch(FileNotFoundException e) {
                 System.out.println("Erro: arquivo nao encontrado");
             }
   }

//=========================================Gramática de Expressões==========================================
  static final public Expressao expressaoPrincipal() throws ParseException {
                                          Expressao _expressao = new Expressao();
    expressao(_expressao);
                                         /*System.out.println(_expressao);*/ {if (true) return _expressao;}
    throw new Error("Missing return statement in function");
  }

  static final public void expressao(Expressao _expressao) throws ParseException {
                                                Token token;
    termo(_expressao);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OU:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      token = jj_consume_token(OU);
      termo(_expressao);
                _expressao.addItemPosfixo(new Operador(token, TipoOperador.OU));
    }
  }

  static final public void termo(Expressao _expressao) throws ParseException {
                                            Token token;
    termo1(_expressao);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      token = jj_consume_token(IGUAL);
      termo1(_expressao);
                _expressao.addItemPosfixo(new Operador(token, TipoOperador.IGUAL));
    }
  }

  static final public void termo1(Expressao _expressao) throws ParseException {
                                             Token token;
    termo2(_expressao);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCAT:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      token = jj_consume_token(CONCAT);
      termo2(_expressao);
               _expressao.addItemPosfixo(new Operador(token, TipoOperador.CONCAT));
    }
  }

  static final public void termo2(Expressao _expressao) throws ParseException {
                                         Token token; TipoOperador tipo;
    termo3(_expressao);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
      case SUB:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
        token = jj_consume_token(SOMA);
                                                                 tipo = TipoOperador.ADD;
        break;
      case SUB:
        token = jj_consume_token(SUB);
                                            tipo = TipoOperador.SUB;
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      termo3(_expressao);
                          _expressao.addItemPosfixo(new Operador(token, tipo));
    }
  }

  static final public void termo3(Expressao _expressao) throws ParseException {
                                             Token token; TipoOperador tipo;
    termo4(_expressao);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
      case DIV:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
        token = jj_consume_token(MUL);
                                                      tipo = TipoOperador.MUL;
        break;
      case DIV:
        token = jj_consume_token(DIV);
                                                                                                    tipo = TipoOperador.DIV;
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      termo4(_expressao);
                _expressao.addItemPosfixo(new Operador(token, TipoOperador.OU));
    }
  }

  static final public void termo4(Expressao _expressao) throws ParseException {
                                             Token token; Item item = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AP:
      jj_consume_token(AP);
      expressao(_expressao);
      jj_consume_token(FP);
      break;
    case VAR:
      token = jj_consume_token(VAR);
                                AcoesSemanticas.tratamentoVariavelNaoDeclarada(tabela,token);
                        _expressao.addItemPosfixo(new Operando(token, TipoDado.STR, TipoElemento.VAR));
      break;
    case STRING:
      token = jj_consume_token(STRING);
                        _expressao.addItemPosfixo(new Operando(token, TipoDado.STR, TipoElemento.CTE));
      break;
    case NUM:
    case SOMA:
    case SUB:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
      case SUB:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SOMA:
          jj_consume_token(SOMA);
          break;
        case SUB:
          jj_consume_token(SUB);
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      token = jj_consume_token(NUM);
                          _expressao.addItemPosfixo(new Operando(token, TipoDado.NUM, TipoElemento.CTE));
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//=========================================Gramática Completa==============================================
  static final public void inicio() throws ParseException {
                 ListaComandosAltoNivel listaComandoAltoNivel = null;
    listaComandoAltoNivel = programa();
    jj_consume_token(0);
  }

  static final public ListaComandosAltoNivel programa() throws ParseException {
                                             ListaComandosAltoNivel listaComandoAltoNivel = new ListaComandosAltoNivel();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXIBE:
      case LEITURA:
      case SE:
      case ENQUANTO:
      case NUMERO:
      case PALAVRA:
      case VAR:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_6;
      }
      comando(listaComandoAltoNivel);
    }
                                                   {if (true) return listaComandoAltoNivel;}
    throw new Error("Missing return statement in function");
  }

  static final public void comando(ListaComandosAltoNivel _listaComandoAltoNivel) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      atribui(_listaComandoAltoNivel);
      break;
    case LEITURA:
      le(_listaComandoAltoNivel);
      break;
    case EXIBE:
      exibe(_listaComandoAltoNivel);
      break;
    case NUMERO:
    case PALAVRA:
      declaracao();
      break;
    case ENQUANTO:
      enquanto(_listaComandoAltoNivel);
      break;
    case SE:
      se(_listaComandoAltoNivel);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void atribui(ListaComandosAltoNivel _listaComandoAltoNivel) throws ParseException {
         Token token; Expressao expressao; ComandoAtribuicao comandoAtribuicao; Simbolo simbolo;
    token = jj_consume_token(VAR);
                  AcoesSemanticas.tratamentoVariavelNaoDeclarada(tabela,token);
    jj_consume_token(RECEBE);
    expressao = expressaoPrincipal();
                    simbolo = new Simbolo(token,TipoDado.STR);
                        comandoAtribuicao = new ComandoAtribuicao(token,simbolo,expressao);
                        _listaComandoAltoNivel.addComando(comandoAtribuicao);
                        System.out.println(comandoAtribuicao.toString());
    jj_consume_token(PV);
  }

  static final public void le(ListaComandosAltoNivel _listaComandoAltoNivel) throws ParseException {
         Token token; ComandoEntrada comandoEntrada; Simbolo simbolo;
    jj_consume_token(LEITURA);
    token = jj_consume_token(VAR);
                                simbolo = new Simbolo(token,TipoDado.STR);
                                comandoEntrada = new ComandoEntrada(token,simbolo);
                                _listaComandoAltoNivel.addComando(comandoEntrada);
                                System.out.println(comandoEntrada.toString());
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_7;
      }
      jj_consume_token(VIRGULA);
      token = jj_consume_token(VAR);
                        simbolo = new Simbolo(token,TipoDado.STR);
                                comandoEntrada = new ComandoEntrada(token,simbolo);
                                _listaComandoAltoNivel.addComando(comandoEntrada);
                                System.out.println(comandoEntrada.toString());
    }
    jj_consume_token(PV);
  }

  static final public void exibe(ListaComandosAltoNivel _listaComandoAltoNivel) throws ParseException {
         Token token; Expressao expressao; ComandoSaida comandoSaida;
    token = jj_consume_token(EXIBE);
    expressao = expressaoPrincipal();
                        comandoSaida = new ComandoSaida(token,expressao);
                        _listaComandoAltoNivel.addComando(comandoSaida);
                        System.out.println(comandoSaida.toString());
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_8;
      }
      jj_consume_token(VIRGULA);
      expressao = expressaoPrincipal();
                                comandoSaida = new ComandoSaida(token,expressao);
                        _listaComandoAltoNivel.addComando(comandoSaida);
                        System.out.println(comandoSaida.toString());
    }
    jj_consume_token(PV);
  }

  static final public void declaracao() throws ParseException {
         Token token; TipoDado tipo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO:
      jj_consume_token(NUMERO);
                             tipo = TipoDado.NUM;
      break;
    case PALAVRA:
      jj_consume_token(PALAVRA);
                                                                  tipo = TipoDado.STR ;
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    token = jj_consume_token(VAR);
                                AcoesSemanticas.tratamentoDeclaracao(tabela, token, tipo);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RECEBE:
      jj_consume_token(RECEBE);
      expressaoPrincipal();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_9;
      }
      jj_consume_token(VIRGULA);
      token = jj_consume_token(VAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RECEBE:
        jj_consume_token(RECEBE);
        expressaoPrincipal();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
                             AcoesSemanticas.tratamentoDeclaracao(tabela, token, tipo);
    }
    jj_consume_token(PV);
  }

  static final public void enquanto(ListaComandosAltoNivel _listaComandoAltoNivel) throws ParseException {
         Token token; Expressao expressao; ComandoEnquanto comandoEnquanto; ListaComandosAltoNivel listaComandoAltoNivel = null;
    token = jj_consume_token(ENQUANTO);
    jj_consume_token(AP);
    expressao = expressaoPrincipal();
    jj_consume_token(FP);
    listaComandoAltoNivel = programa();
                                comandoEnquanto = new ComandoEnquanto(token, expressao, listaComandoAltoNivel);
                                _listaComandoAltoNivel.addComando(comandoEnquanto);
                                System.out.println(comandoEnquanto.toString());
    jj_consume_token(FIMENQUANTO);
  }

  static final public void se(ListaComandosAltoNivel _listaComandoAltoNivel) throws ParseException {
         Token token; Expressao expressao; ComandoCondicional comandoCondicional; ListaComandosAltoNivel listaComandoAltoNivel = null;
    token = jj_consume_token(SE);
    jj_consume_token(AP);
    expressao = expressaoPrincipal();
    jj_consume_token(FP);
    listaComandoAltoNivel = programa();
                        comandoCondicional = new ComandoCondicionalSimples(token, expressao, listaComandoAltoNivel);
                        _listaComandoAltoNivel.addComando(comandoCondicional);
                        System.out.println(comandoCondicional.toString());
    jj_consume_token(FIMSE);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompiladorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000000,0x20000000,0x40000000,0xc00000,0xc00000,0x3000000,0x3000000,0xc00000,0xc00000,0xec4000,0x81ae0,0x81ae0,0x20000,0x20000,0x1800,0x10000000,0x20000,0x10000000,};
   }

  /** Constructor with InputStream. */
  public Compilador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compilador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Compilador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Compilador(CompiladorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompiladorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[31];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 31; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
