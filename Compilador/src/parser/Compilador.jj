/* Compilador para a Linguagem Removename (extensao spc2)
   Turma de Compiladores 2018 - Eng de Computacao e Ciencia da Computacao
   UFES - Campus de Sao Mateus

   Git: https://github.com/hmcristovao/compiladores2018
   
	 Para executar (prompt no diretorio 'saida'):
	 > java -jar jasmin.jar teste.j
	 > java teste 

Obs.: o comando repetir-ate parou de funcionar (funcionava ate o commit da tarefa 14)
 
*/

options {
	DEBUG_PARSER = false;
	DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compilador)

package parser;

import jasmin.*; 
import java.io.*;
import semantico.*;
import apoio.*;
import tratamentoErro.*;
import comandoAltoNivel.*;
import comandoPrimitivo.*;
import codigoDestino.*;
import java.util.LinkedList;


public class Compilador {
	public static Tabela tabela = new Tabela();
	// Argumentos para o jasmin gerar automaticamente o .class na pasta saida
	public static String arquivo[] = { "-d", Config.pathSaida, Config.pathSaida + Config.nomeArquivo + Config.extensaoCodigoDestino };
	 
	public static void main(String args[])  throws ParseException  {
		Compilador compilador = null;
		try {
			// Leitura do arquivo com o codigo fonte
			compilador = new Compilador(new FileInputStream(Config.pathProgFonte + Config.nomeArquivo + Config.extensaoFonte));

			// Primeira passagem
			ListaComandosAltoNivel listaComandosAltoNivel = new ListaComandosAltoNivel();
			Compilador.inicio(listaComandosAltoNivel);

			System.out.println("***** Primeira Passagem *****\n"
								+ "Lista de Comandos Alto Nivel:\n"
								+ listaComandosAltoNivel);

			// Exibicao da tabela de simbolos
			System.out.println("\n\n***** Tabela de Simbolos *****\n"
								+ tabela);

			//Warnings
			AcoesSemanticas.warnings();

			// Segunda passagem
			ListaComandosPrimitivos listaComandosPrimitivos = new ListaComandosPrimitivos();
			listaComandosPrimitivos = listaComandosAltoNivel.geraListaComandoPrimitivosCompleta();
			System.out.println("\n\n***** Segunda Passagem *****\n"
								+ "Lista de Comandos Primitivos:\n"
								+ listaComandosPrimitivos);

			// Terceira passagem
			CodigoDestino codigoDestino = new CodigoDestino(listaComandosPrimitivos);
			System.out.println("\n\n***** Terceira Passagem *****\n"
								+ "Lista de Comandos Destino:\n"
								+ codigoDestino);

			// Criacao do arquivo destino
			codigoDestino.geraArquivo(Config.pathSaida + Config.nomeArquivo + Config.extensaoCodigoDestino );
			System.out.println("\n\n***** Criacao do arquivo destino *****\n"
								+ "Arquivo destino: "
								+ Config.pathSaida + Config.nomeArquivo + Config.extensaoCodigoDestino);

			// Fim
			if(AcoesSemanticas.qtdWarnings > 0 ) {
			  System.out.println("\n\n***** Compilacao bem sucedida com "+AcoesSemanticas.qtdWarnings+" warnings! *****");
			}else {
				System.out.println("\n\n***** Compilacao bem sucedida! *****");
			}

			// Geracao automatizada do .class na pasta saida
			Main.main(arquivo);
			
		}
		
		catch(FileNotFoundException e) {
			System.err.println("\nErro: arquivo nao encontrado");
		}
		catch (IOException e) {
			System.out.println("Erro de criacao de arquivo" + e.getMessage());
		}
		catch(TokenMgrError e) {
			System.err.println("\nErro lexico: " + e.getMessage());
		}
		catch(ParseException e) {
			System.err.println("\nErro Sintatico: " + e.getMessage());
		}
		catch(ErroSemantico e) {
			System.err.println("\nErro Semantico: " + e.getMessage());
		}
	}
}
PARSER_END(Compilador)
 
SKIP : { " " | "\t" | "\r" | "\n" }

SKIP : { "/*" : comentarioGeral }
<comentarioGeral> SKIP: { "*/" : DEFAULT | <~[]> }

//TOKENS DE COMANDOS 
TOKEN [IGNORE_CASE] : {
	<EXIBE: "exibe" >  |
	<LEITURA: "le" > |
	<LEITURACOMPLETA: "lecompleto" > | 
	<SE: "se" > |
	<SENAO: "senao" > |
	<FIMSE: "fim-se" > |
	<ENQUANTO: "enquanto" > |
	<FIMENQUANTO: "fim-enquanto" > |
	<PARA: "para" > |
	<FIMPARA: "fim-para" > |
	<SELETOR: "seletor" > |
	<FIMSELETOR: "fim-seletor"> |
	<CASO: "caso"> |
	<FIMCASO: "fim-caso"> |
	<FACA: "faca"> |
	<FAZERENQUANTO: "fazer-enquanto"> |
	<REPEAT: "repeat" > |
	<FIMREPEAT: "fim-repeat"> |
	<SEREPETE: "se-repete"> |
	<FIMSEREPETE: "fim-se-repete"> |
	<DUPLO: "duplo"> |
	<FIMDUPLO: "fim-duplo"> |
	<MATRIX3D : "matrix3D" > |
	<FIMMATRIX3D: "fim-matrix3D" > |
	<MAX : "max" > |
	<MIN : "min" > |
	<COMENTLINHA : "//" (~["\n"])* ("\n")? >  
}
//TOKENS DE TIPOS 
TOKEN [IGNORE_CASE] : {
	<NUMERO: "numero" >  |
	<PALAVRA: "palavra" >  
}

//-----------NUMEROS-----------
TOKEN : {
	< #DIGIT: ["0"-"9"] > |  
	< NUM: (< DIGIT >)* (".")? (< DIGIT >)+ > 
}
//----------OPERADORES---------
TOKEN : {
	< SOMA: "+" > |
	< SUB: "-" > |
	< MUL: "*" > |
	< DIV: "/" > |
	< POT : "**" >|
	< LOG: "log" > |
	< OU: "OU" > |
	< OUEXCLUSIVO: "XOU" > |
	< NEGACAO : "NAO" > |
	< E: "E" > |
	< ATRIB: "<-"  > |
	< ATRIBMULT: "<=="  > |
	< IGUAL: "=" > |
	< DIFERENTE: "!=" > |
	< CONCAT: "&" > |
	< MENOR: "<" > |
	< MAIORIGUAL: ">=" > |
	< TO: "to" > |
	< EXIBELN : "exibeln" >
}
//----------CARACTERES----------
TOKEN : {
	< #CHAR: ["a"-"z"] | ["A" - "Z"] > | 
	< AP: "(" > |
	< FP: ")" > |
	< AC: "{" > |
	< FC: "}" > |
	< PV: ";" > |
	< DP: ":" > |
	< VIRGULA: "," > |
	< STRING: "\"" (~["\""])* "\"" >      	
}
//----------VARIAVEL---------
TOKEN : {
	< VAR: (< CHAR >)+ (["a" - "z", "A" - "Z" ,"0" - "9", "_"])* > 
}  

//Gramatica de expressoes:

Expressao iniciaExpressao():
{
	Expressao exp = new Expressao();
}
{
	expressao(exp)
	{
	    exp.otimizarPosFixaConst1();
        exp.otimizaPosfixa();
        exp.otimizarNegacao();
		return exp;
	}	
}

void expressao(Expressao exp):
{
	Token t ;
	Item item = null;
}
{
	termo(exp)
	( ( t = <OU> { item = new Operador(TipoOperador.OU,t); } |
	    t = < OUEXCLUSIVO > {  item = new Operador(TipoOperador.OUEXCLUSIVO,t); }
	   ) 
		{
			exp.addListaExpInfixa(item);
		}
		termo(exp)
		{
			exp.addListaExpPosFixa(item);	 	
		}
	)*	 	
}

void termo(Expressao exp):
{
	Token t;
	Item item = null;
}
{
	termo1(exp)
	(t = <E>
		{
			item = new Operador(TipoOperador.E,t);
			exp.addListaExpInfixa(item);
		}
		termo1(exp)
		{
			exp.addListaExpPosFixa(item);
		}
	)* 
}

void  termo1(Expressao exp):
{
	Token t;
	Item item = null;
	TipoOperador operador;
}
{
	negacao(exp)
	(	  
	    (
	         t = <IGUAL> { operador = TipoOperador.IGUAL; } 
		   | t = <DIFERENTE> { operador = TipoOperador.DIFERENTE; }	
		   | t = <MENOR> { operador = TipoOperador.MENOR; } 
		   | t = <MAIORIGUAL> {operador = TipoOperador.MAIORIGUAL; }
	    )
	    {
			item = new Operador(operador,t);
			exp.addListaExpInfixa(item);
		}
		negacao(exp)
		{
			item = new Operador(operador,t);
			exp.addListaExpPosFixa(item);
		}
	)?
}

void negacao( Expressao exp ) :
{
	Token t;
	Item item = null;
}
{
	termo2(exp) |
	(t = <NEGACAO>
		{
			item = new Operador(TipoOperador.NEGACAO,t);
			exp.addListaExpInfixa(item);
		}
		negacao(exp)
		{
			exp.addListaExpPosFixa(item);
		}
	) 
}


void termo2(Expressao exp):
{
	Token t;
	Item item = null;
}
{
	termo3(exp)
	( t = <CONCAT>
		{
			item = new Operador(TipoOperador.CONCAT,t);
			exp.addListaExpInfixa(item); 
		}
		termo3(exp)
		{
			item = new Operador(TipoOperador.CONCAT,t);
			exp.addListaExpPosFixa(item);
		}
	)*
} 
void termo3(Expressao exp):
{
	Token t;
	TipoOperador operador;
	Item item = null;
}
{
	termo4(exp)
	(
		(
		    t = <SOMA> {operador = TipoOperador.SOMA;} 
		  | t = <SUB> {operador = TipoOperador.SUB;}
		)
		{
			item = new Operador(operador,t);
			exp.addListaExpInfixa(item);
		}
		termo4(exp)
		{
			item = new Operador(operador,t);
			exp.addListaExpPosFixa(item);
		}
	)*
}

void termo4(Expressao exp):
{
	Token t;
	TipoOperador operador;
	Item item = null;
}
{
	pot(exp)
	(
		(
		   t = <MUL> {operador = TipoOperador.MUL;} 
		 | t = <DIV> {operador = TipoOperador.DIV;}
		)
		{
			item = new Operador(operador,t);
			exp.addListaExpInfixa(item);
		}
		pot(exp)
		{
			item = new Operador(operador,t);
			exp.addListaExpPosFixa(item);
		}
	)*
}

void pot(Expressao exp) :
{
	Token t;
	TipoOperador operador;
	Item item = null;}
{
	log(exp)
	(
	  t=<POT> { operador = TipoOperador.POT; }
	  {  
	        item = new Operador(operador, t);
            exp.addListaExpInfixa(item);
	  } 
	  pot(exp)
	  {
	    	item = new Operador(operador, t);
            exp.addListaExpPosFixa(item);
	  }  
	)?
}

void log(Expressao exp) :
{
	Token t;
	TipoOperador operador;
	Item item = null;
}
{
  	termo5(exp) |
	(
	  t = <LOG> <AP> expressao(exp) <FP>  { operador = TipoOperador.LOG; } |
	  (
	    t = <MAX> { operador = TipoOperador.MAX; } |
	    t = <MIN> { operador = TipoOperador.MIN; }
	   ) <AP> expressao(exp) <VIRGULA> expressao(exp) <FP> 
	) 
  	{
        item = new Operador(operador, t);
        exp.addListaExpInfixa(item);
        exp.addListaExpPosFixa(item);
    }
}

void termo5(Expressao exp):
{
	Token tokenVar, tokenEntrada;
	Item item = null;
	Sinal sinal = Sinal.POS;
}
{
	tokenEntrada = <AP>
	{
		item = new Operador(TipoOperador.AP, tokenEntrada);
		exp.addListaExpInfixa(item);
	}
	expressao(exp)
	tokenEntrada = <FP>
	{
		item = new Operador(TipoOperador.FP, tokenEntrada);
		exp.addListaExpInfixa(item);
	}
	|  ( <SUB > { sinal = Sinal.NEG; } | <SOMA> { sinal = Sinal.POS; } )?
		( tokenEntrada = <NUM>
			{
				item = new Operando(TipoDado.NUMERO,TipoElemento.CTE, tokenEntrada, sinal);
				AcoesSemanticas.incompatibilidadeTipoExpressao(item,exp,tokenEntrada);
				exp.addListaExpInfixa(item);
				exp.addListaExpPosFixa(item);
			}
		
			|  tokenVar = <VAR>
			{
				tabela.verificaVariavelDeclarada(tokenVar.image);
				item = new Operando(tabela.tipoVariavel(tokenVar.image),TipoElemento.VAR, tokenVar, sinal);
				AcoesSemanticas.incompatibilidadeTipoExpressao(item,exp,tokenVar);
				tabela.pesquisaTabela(tokenVar.image).setIsUtilizada(true);
				exp.addListaExpInfixa(item);
				exp.addListaExpPosFixa(item);
			}
	    )
	| tokenEntrada = <STRING>
	{
		item = new Operando(TipoDado.PALAVRA,TipoElemento.CTE, tokenEntrada, Sinal.POS);
		AcoesSemanticas.incompatibilidadeTipoExpressao(item,exp,tokenEntrada);
		exp.addListaExpInfixa(item);
		exp.addListaExpPosFixa(item);
	}
}
 
 
//GRAMATICA COMPLETA

void inicio(ListaComandosAltoNivel listaComandosAltoNivel):
{}
{
	programa(listaComandosAltoNivel) <EOF>
}

void programa(ListaComandosAltoNivel listaComandosAltoNivel) :
{}
{
	(comando(listaComandosAltoNivel))*
}

void comando(ListaComandosAltoNivel listaComandosAltoNivel):
{}
{
	(
	    atribuicao(listaComandosAltoNivel) <PV>
	  | declaracao(listaComandosAltoNivel) 
	  | se(listaComandosAltoNivel)
	  | enquanto(listaComandosAltoNivel)
	  | le(listaComandosAltoNivel)
	  | exibe(listaComandosAltoNivel)
	  | para(listaComandosAltoNivel)
	  | seletor(listaComandosAltoNivel)
	  | fazerEnquanto(listaComandosAltoNivel)
	  | repeat(listaComandosAltoNivel)
	  | seRepete(listaComandosAltoNivel)
	  | duplo(listaComandosAltoNivel)
	  | matrix3D( listaComandosAltoNivel )
	  | < COMENTLINHA > 
	)	
}

void atribuicao(ListaComandosAltoNivel listaComandosAltoNivel):
{
	Token atrib, var;
	TipoOperador tpOperador;
	Item operando, operador;
	ComandoAltoNivel comando = null;
	Expressao expressao = null;
	LinkedList<Token > listaVar = new LinkedList<Token >();
	LinkedList<Expressao > listaExp = new LinkedList<Expressao >();
}
{
	var = <VAR>
	{
		tabela.verificaVariavelDeclarada(var.image);
		listaVar.add(var);
	}
   (     (
	     atrib = <ATRIB> expressao = iniciaExpressao() { listaExp.add( expressao); } |
	
	     ( < VIRGULA > var = < VAR > {  tabela.verificaVariavelDeclarada(var.image); listaVar.add(var); } )* 
		 atrib = < ATRIBMULT >
		               expressao = iniciaExpressao() { listaExp.add( expressao ); }
		 ( < VIRGULA > expressao = iniciaExpressao() {  listaExp.add( expressao ); } )*
   	 )
	 {
		 AcoesSemanticas.verificarParesAtribuicaoMultipla( listaVar, listaExp, atrib );  
		 AcoesSemanticas.gerarAtribuicoesMultiplas( listaComandosAltoNivel, listaVar, listaExp, atrib );
	 } |
		
	 ( atrib =  <SOMA> { tpOperador = TipoOperador.SOMA; } |
	   atrib = <SUB> { tpOperador = TipoOperador.SUB; } |
	   atrib = <MUL> { tpOperador = TipoOperador.MUL; } |
	   atrib = <DIV> { tpOperador = TipoOperador.DIV; }
	 )
	 {
	   operador = new Operador( tpOperador, atrib );
       operando = new Operando( tabela.tipoVariavel(var.image), TipoElemento.VAR, var, Sinal.POS );
       expressao = new Expressao();
       expressao.addListaExpInfixa( operando );
       expressao.addListaExpInfixa( operador );
       expressao.addListaExpPosFixa( operando );
	 } 
     <IGUAL> expressao( expressao )
	 {
		expressao.addListaExpPosFixa( operador );
		listaComandosAltoNivel.addComando( new ComandoAtribuicao( tabela.pesquisaTabela(var.image), expressao, atrib ) );
	 }  	 
   )
}

void declaracao(ListaComandosAltoNivel listaComandosAltoNivel):
{   
	Token atrib, variavel;
	TipoDado tipo = null;
	ComandoAltoNivel comando = null;
	Expressao expressao = null;
}
{
	(
	    <NUMERO> {tipo = TipoDado.NUMERO;}
	  | <PALAVRA> {tipo = TipoDado.PALAVRA;}
	)
	
	variavel = <VAR> 
	{
		tabela.insereNaTabela(variavel, tipo);
	}
	( 
		atrib = <ATRIB> expressao=iniciaExpressao() 
		{
			AcoesSemanticas.incompatibilidadeTipoAtribuicao (tabela.pesquisaTabela(variavel.image), expressao, variavel);
			comando = new ComandoAtribuicao(tabela.pesquisaTabela(variavel.image), expressao, atrib);
			tabela.pesquisaTabela(variavel.image).setIsInicializada(true);			
			AcoesSemanticas.faltaInicializacaoVariavel(expressao,variavel);			
			listaComandosAltoNivel.addComando(comando);
		}
	)?
	(
		<VIRGULA> variavel = <VAR>
		{
			//System.out.println(variavel.image);
			tabela.insereNaTabela(variavel, tipo);
		}
		(
			atrib = <ATRIB> expressao=iniciaExpressao()
			{
				AcoesSemanticas.incompatibilidadeTipoAtribuicao (tabela.pesquisaTabela(variavel.image), expressao, variavel);
				comando = new ComandoAtribuicao(tabela.pesquisaTabela(variavel.image), expressao, atrib);
				tabela.pesquisaTabela(variavel.image).setIsInicializada(true);
				AcoesSemanticas.faltaInicializacaoVariavel(expressao,variavel);
				listaComandosAltoNivel.addComando(comando);
			}
		)?
	)* <PV>
}

//Inclusão do senao(else) como opcional apos a leitura da listaProgramaSe
void  se(ListaComandosAltoNivel listaComandosAltoNivel):
{
	Token se,senao;
	ListaComandosAltoNivel listaProgramaSe =  new ListaComandosAltoNivel();	
	ListaComandosAltoNivel listaProgramaSenao =  new ListaComandosAltoNivel();
	Expressao expressao = null;
	ComandoAltoNivel  comando = null;
}
{
	se = <SE> <AP> expressao = iniciaExpressao() <FP> programa(listaProgramaSe)
	{
		comando = new ComandoCondicionalSimples(expressao, listaProgramaSe, se);
		AcoesSemanticas.faltaInicializacaoVariavel(expressao,se);
	}  
	(
	  senao = <SENAO> programa(listaProgramaSenao)
	  {
	    comando = new ComandoCondicionalCompleto(expressao, listaProgramaSe, listaProgramaSenao, se);
	  }
	)?
	<FIMSE>
	{
	  listaComandosAltoNivel.addComando(comando); 
	}	
}

void  fazerEnquanto(ListaComandosAltoNivel listaComandosAltoNivel):
{
	Token fazer;
	ListaComandosAltoNivel listaProgramaFazerEnquanto = new ListaComandosAltoNivel();
	Expressao expressao = null;
	ComandoAltoNivel comando = null;
}
{
	fazer = <FACA>programa(listaProgramaFazerEnquanto)<FAZERENQUANTO><AP>expressao = iniciaExpressao()<FP>< PV>
	{
		comando = new ComandoFazerEnquanto(expressao, listaProgramaFazerEnquanto, fazer);
		AcoesSemanticas.faltaInicializacaoVariavel(expressao, fazer);
		listaComandosAltoNivel.addComando(comando);
	}
}

void  enquanto(ListaComandosAltoNivel listaComandosAltoNivel):
{
	Token enq;
	ListaComandosAltoNivel listaProgramaEnquanto = new ListaComandosAltoNivel();
	Expressao expressao = null;
	ComandoAltoNivel comando = null;
}
{
	enq = <ENQUANTO> <AP> expressao = iniciaExpressao() <FP> programa(listaProgramaEnquanto)
	{
		comando = new ComandoEnquanto(expressao, listaProgramaEnquanto, enq);
		AcoesSemanticas.faltaInicializacaoVariavel(expressao,enq);
		listaComandosAltoNivel.addComando(comando);  
	}
	<FIMENQUANTO>
}
 
void le(ListaComandosAltoNivel listaComandosAltoNivel):
{
	Token le, t;
	ComandoAltoNivel comando = null;
}
{
	  (   le = <LEITURA> |
		  le = <LEITURACOMPLETA> t = <STRING> <VIRGULA> 
		  {
			Expressao expressao = new Expressao();
			Item string = new Operando( TipoDado.PALAVRA, TipoElemento.CTE, t, Sinal.POS );
			expressao.addListaExpInfixa( string );
			expressao.addListaExpPosFixa( string );
		    comando  = new ComandoSaida( expressao, le );
		    listaComandosAltoNivel.addComando( comando );
		  }
	  )
	t = <VAR>
	{
		comando = new ComandoEntrada(tabela.pesquisaTabela(t.image), le);
		tabela.pesquisaTabela(t.image).setIsInicializada(true);
		tabela.pesquisaTabela(t.image).setIsUtilizada(true);
		listaComandosAltoNivel.addComando(comando);  
	}
	( <VIRGULA> t = <VAR>
		{
			comando = new ComandoEntrada(tabela.pesquisaTabela(t.image), le);
			tabela.pesquisaTabela(t.image).setIsInicializada(true);
			listaComandosAltoNivel.addComando(comando);		
		}
	)* <PV>
}
 
void exibe(ListaComandosAltoNivel listaExibe):
{
	Token exibe;
	boolean novaLinha = false;
	Expressao expressao = null;
	ComandoSaida comando = null;
}
{
	( exibe = <EXIBE> | exibe = <EXIBELN> { novaLinha = true; })  expressao = iniciaExpressao()
	{
		comando = new ComandoSaida(expressao, exibe);
		AcoesSemanticas.faltaInicializacaoVariavel(expressao,exibe);
		listaExibe.addComando(comando); 
	}
	( <VIRGULA> expressao = iniciaExpressao()
		{
			comando = new ComandoSaida(expressao, exibe);
			AcoesSemanticas.faltaInicializacaoVariavel(expressao,exibe);
			listaExibe.addComando(comando);   
		}
	)* <PV>
	{
		if ( novaLinha ) AcoesSemanticas.adicionarQuebraLinha( listaExibe, exibe );
	}
}

void para(ListaComandosAltoNivel listaComandosAltoNivel):
{
  	Token tokenPara;
  	ListaComandosAltoNivel listaProgramaPara = new ListaComandosAltoNivel();
  	Expressao expressao = null;
  	ComandoAltoNivel comando = null;
  	ListaComandosAltoNivel listaAtribuicaoInicio = new ListaComandosAltoNivel();
  	ListaComandosAltoNivel listaAtribuicaoPasso = new ListaComandosAltoNivel();
}
{
  	tokenPara = <PARA> <AP> atribuicao(listaAtribuicaoInicio) <PV> expressao=iniciaExpressao() <PV> atribuicao(listaAtribuicaoPasso) <FP> programa(listaProgramaPara)< FIMPARA>
  	{
  	  	comando = new ComandoPara(listaAtribuicaoInicio, expressao, listaAtribuicaoPasso, listaProgramaPara, tokenPara);
  	  	AcoesSemanticas.faltaInicializacaoVariavel(expressao, tokenPara);
  	  	listaComandosAltoNivel.addComando(comando);
 	}
}

void seletor(ListaComandosAltoNivel listaComandosAltoNivel):
{
  	Token tokenSeletor, tokenEntrada;
  	Item itemCaso = null;
  	Expressao expressaoSeletor = null;
  	ComandoAltoNivel comando = null;
  	ListaComandosAltoNivel listaPrograma = new ListaComandosAltoNivel();
  	LinkedList<ListaComandosAltoNivel> listaComandosAltoNivelCasos = new LinkedList<ListaComandosAltoNivel>();
  	LinkedList<Item> listaOpcaoCasos = new LinkedList<Item>(); 
  	
}
{
 	tokenSeletor = <SELETOR> <AP> expressaoSeletor = iniciaExpressao() <FP>
 	(<CASO>
 	(
 	   	tokenEntrada = <NUM> {itemCaso = new Operando(TipoDado.NUMERO,TipoElemento.CTE, tokenEntrada, Sinal.POS);}
		|<SOMA> tokenEntrada = <NUM> {itemCaso = new Operando(TipoDado.NUMERO,TipoElemento.CTE, tokenEntrada, Sinal.POS);}
		|<SUB> tokenEntrada = <NUM> {itemCaso = new Operando(TipoDado.NUMERO,TipoElemento.CTE, tokenEntrada, Sinal.NEG);}
	)
 	<DP> programa(listaPrograma)
 	{
 	  listaComandosAltoNivelCasos.add(listaPrograma);
 	  listaOpcaoCasos.add(itemCaso);
 	  listaPrograma = new ListaComandosAltoNivel();
 	  
 	}
 	<FIMCASO>)+
 	{
 	  comando = new ComandoSeletor(expressaoSeletor, listaComandosAltoNivelCasos, listaOpcaoCasos, token);
 	  AcoesSemanticas.faltaInicializacaoVariavel(expressaoSeletor, tokenSeletor);
  	  listaComandosAltoNivel.addComando(comando);
 	}
 	<FIMSELETOR> 	 
}

void repeat(ListaComandosAltoNivel listaComandosAltoNivel):
{
  	Token tokenRepeat, tokenNumero;
  	ListaComandosAltoNivel listaProgramaRepeat = new ListaComandosAltoNivel();
  	ComandoAltoNivel comando = null;
  	Item item;
}
{
  tokenRepeat = <REPEAT>
  <AP> tokenNumero = <NUM>
  {
      item = new Operando(TipoDado.NUMERO,TipoElemento.CTE, tokenNumero, Sinal.POS);
  }
  <FP> programa(listaProgramaRepeat)< FIMREPEAT>
  {
      comando = new ComandoRepeat(listaProgramaRepeat, tokenRepeat, item);
  	  listaComandosAltoNivel.addComando(comando);
  }
}


void  seRepete(ListaComandosAltoNivel listaComandosAltoNivel):
{
	Token se_repete, token_repete_n;
	Expressao exp = null;
	Item item;
	ListaComandosAltoNivel lista_escopo_SeRepete = new ListaComandosAltoNivel();	
	ComandoAltoNivel comando = null;
}
{  	
	se_repete = <SEREPETE> <AP> exp = iniciaExpressao() <VIRGULA>  token_repete_n = <NUM> {
	  
		item = new Operando(TipoDado.NUMERO,TipoElemento.CTE, token_repete_n, Sinal.POS);
		
	} <FP> programa(lista_escopo_SeRepete)
	{	  	
		comando = new ComandoSeRepete(exp, token_repete_n, item, lista_escopo_SeRepete);
		AcoesSemanticas.faltaInicializacaoVariavel(exp, se_repete);
		listaComandosAltoNivel.addComando(comando);  
	}
	<FIMSEREPETE>
}

void duplo(ListaComandosAltoNivel listaComandosAltoNivel):
{
	Token tokenDuplo;
	ListaComandosAltoNivel listaProgramaDuplo = new ListaComandosAltoNivel();
	ComandoAltoNivel comando = null;
}
{
  	tokenDuplo = <DUPLO> programa(listaProgramaDuplo) 
  	{
    	comando = new ComandoDuplo(listaProgramaDuplo, tokenDuplo);
		listaComandosAltoNivel.addComando(comando);
  	}
  	<FIMDUPLO>
}

// Tarefa 18
void matrix3D(ListaComandosAltoNivel listaMatrix3D ):
{
  	Token tokenMatrix3D, tokenVarDimX, tokenVarDimY, tokenVarDimZ, tokenCteInit, tokenCteLimSup;
  	ComandoAltoNivel comandoMatrix3D = null;
  	Item cteInicializacao = null;
	Item cteLimiteSuperior = null;
	Expressao expInicializacao = new Expressao();
	Expressao expCondicaoParada = new Expressao();
  	ListaComandosAltoNivel blocoComandosMatrix = new ListaComandosAltoNivel();
}
{
	tokenMatrix3D = <MATRIX3D> <AP>
				tokenVarDimX = <VAR>
				{
				  if ( !tabela.verificaSimbolo( tokenVarDimX.image ) ) tabela.insereNaTabela( tokenVarDimX, TipoDado.NUMERO );
				  tabela.pesquisaTabela( tokenVarDimX.image ).setIsInicializada(true);
				} <VIRGULA>
				tokenVarDimY = <VAR>
				{
				  if ( !tabela.verificaSimbolo( tokenVarDimY.image ) ) tabela.insereNaTabela( tokenVarDimY, TipoDado.NUMERO );
				  tabela.pesquisaTabela( tokenVarDimY.image ).setIsInicializada(true);
				} <VIRGULA>
				tokenVarDimZ = <VAR>
				{
				  if ( !tabela.verificaSimbolo( tokenVarDimZ.image ) ) tabela.insereNaTabela( tokenVarDimZ, TipoDado.NUMERO );
				  tabela.pesquisaTabela( tokenVarDimZ.image ).setIsInicializada(true);
				} <SUB>
				tokenCteInit = <NUM>
				{
				  cteInicializacao = new Operando( TipoDado.NUMERO, TipoElemento.CTE, tokenCteInit, Sinal.POS );
				  expInicializacao.addListaExpInfixa( cteInicializacao );
				  expInicializacao.addListaExpPosFixa( cteInicializacao );
				}  <TO>
				tokenCteLimSup = <NUM>
				{
				  cteLimiteSuperior = new Operando( TipoDado.NUMERO, TipoElemento.CTE, tokenCteLimSup, Sinal.POS );
				  expCondicaoParada.addListaExpInfixa( cteLimiteSuperior );
				  expCondicaoParada.addListaExpPosFixa( cteLimiteSuperior );
				} <FP> programa( blocoComandosMatrix ) <FIMMATRIX3D>
				{
					comandoMatrix3D = new ComandoMatrix3D( tokenMatrix3D, tokenVarDimX, tokenVarDimY, tokenVarDimZ, expInicializacao, expCondicaoParada, blocoComandosMatrix );
					listaMatrix3D.addComando( comandoMatrix3D );
				}
}