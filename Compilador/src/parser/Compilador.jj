options {
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compilador)
package parser;

import java.util.Scanner;
import java.io.*;
import semantico.*;
import geradorCodigo.*;
import apoio.*;

public class Compilador {
  
  	public static boolean error=false;
	public static Tabela tabela = new Tabela();

   public static void main(String args[])  throws ParseException  {
      Compilador compilador;
      try {
         compilador = new Compilador(new FileInputStream(Config.arqfonte));
         Compilador.inicio();
         System.out.println("\n"+tabela.toString());
         
	      if(!error)
	      	System.out.println("\nSem erros sintáticos");
	      else
	      	System.out.println("\nForam encontrados erros sintáticos, mas foram ignorados para melhor análise");
      }
      catch(FileNotFoundException e) {
         System.out.println("Erro: arquivo nao encontrado");
      }
      catch(TokenMgrError e) {
         System.out.println("\nErro lexico: \n" + e.getMessage());
      }
   }
}

PARSER_END(Compilador)
 
SKIP : { " " | "\t" | "\r" | "\n" }

//TOKENS DE COMANDOS 
TOKEN [IGNORE_CASE] : {
  		<EXIBE: "exibe" >  |
  		<LEITURA: "le" > | 
		<SE: "se" > |
      	<FIMSE: "fim-se" > |
      	<ENQUANTO: "enquanto" > |
      	<FIMENQUANTO: "fim-enquanto" > 
}
//TOKENS DE TIPOS 
TOKEN [IGNORE_CASE] : {
  		<NUMERO: "numero" >  |
  		<PALAVRA: "palavra" >  
}
//----------CARACTERES----------
TOKEN : {
		< #CHAR: ["a"-"z"] | ["A" - "Z"] > | 
   		< AP: "(" > |
    	< FP: ")" > |
		< PV: ";" > |
		< VIRGULA: "," > |
    	< STRING: "\"" (~["\""])* "\"" > |
   		< VAR: (< CHAR >)+ (["a" - "z", "A" - "Z" ,"0" - "9", "_"])* > 
}
//-----------NUMEROS-----------
TOKEN : {
	< #DIGIT: ["0"-"9"] > |  
    < NUM: (< DIGIT >)* (".")? (< DIGIT >)+ > 
}
//----------OPERADORES---------
TOKEN : {
 	< SOMA: "+" > |
	< SUB: "-" > |
	< MUL: "*" > |
    < DIV: "/" > |
    < OU: "OR" > |
    < ATRIB: "<-"  > |
    < IGUAL: "=" > |
   	< CONCAT: "&" > 
}
  
void inicio() : { }
{
   
	try {
		(comando())* 
	}catch (ParseException e) {
		System.out.println("\n"+e.toString()+"\nErro sintático encontrado, continuando análise após próximo \";\"\n");
		Token t;
		error=true;
		do {
		  t = getNextToken();
		} while (t.kind != PV);
		inicio();
	}catch(ErroSemantico e){
  	  	System.out.println(e.getMessage());
		Token t;
	    do {
			t = getNextToken();
	    }while (t.kind != PV);
	    inicio();
  	}
  }

void comando(): { }
{
	atribuicao() | declaracao() | se()
| enquanto() | le() | exibe()
}

void atribuicao() : { Token t; }
{
	t=< VAR > {
		AcoesSemanticas.verificaDeclaracao(t,tabela);
		} < ATRIB > expressao() < PV >
}

void declaracao() : {Token t; TipoDado tipo;}
{
  (    < NUMERO > { tipo=TipoDado.NUMERO; }| < PALAVRA > { tipo=TipoDado.PALAVRA; })
    t=< VAR >
    {
		AcoesSemanticas.declaraVariavel(t,tipo,tabela);
      }(< ATRIB >expressao())?
	(	  < VIRGULA >t=< VAR >
	  {
		AcoesSemanticas.declaraVariavel(t,tipo,tabela);
		}
    (< ATRIB > expressao())?)*< PV >
}

void se() : { }
{
  < SE >< AP > expressao() < FP > inicio() < FIMSE >
}

void enquanto() : { }
{
  < ENQUANTO > < AP > expressao() < FP > inicio() < FIMENQUANTO >
}

void le() : { }
{
	< LEITURA >< VAR > (< VIRGULA > < VAR >)* < PV >
}

void exibe() : { }
{
  < EXIBE > expressao() (< VIRGULA >expressao())* < PV >
}

void expressao() : {Expressao pilha = new Expressao();}
{
  	expressao2(pilha){pilha.imprime(); }
}

void expressao2(Expressao pilha) : { Token t; }
{
  termo(pilha)(t=< OU >termo(pilha) {pilha.addItemPoxfixo(new Operador(t,TipoOperador.OR));})*
}

void termo(Expressao pilha) : {Token t; }
{
  termo1(pilha)(t=< IGUAL >termo1(pilha) {pilha.addItemPoxfixo(new Operador(t,TipoOperador.IGUAL));})?
}

void termo1(Expressao pilha) : {Token t; }
{
  termo2(pilha)(t=< CONCAT >termo2(pilha) {pilha.addItemPoxfixo(new Operador(t,TipoOperador.CONCAT));} )*
}

void termo2(Expressao pilha) : {Token t; TipoOperador tipoO;}
{
  termo3(pilha)((t=< SOMA >{ tipoO=TipoOperador.ADD; }|t=< SUB >{ tipoO=TipoOperador.SUB; })termo3(pilha){pilha.addItemPoxfixo(new Operador(t,tipoO));} )*
}

void termo3(Expressao pilha) : {Token t;TipoOperador tipoO; }
{
  termo4(pilha)((t=< MUL >{ tipoO=TipoOperador.MUL; }|t=< DIV >{ tipoO=TipoOperador.DIV; })termo4(pilha){pilha.addItemPoxfixo(new Operador(t,tipoO));} )*
}

void termo4(Expressao pilha) : {Token t;Token t1; Operador op;}
{
   < AP > expressao2(pilha) < FP >
| (t = < NUM > { pilha.addItemPoxfixo(new Operando(t,TipoDado.NUMERO,TipoElemento.CTE)); }
| t1=< SOMA > t = < NUM > { pilha.addItemPoxfixo(new Operando(t,TipoDado.NUMERO,TipoElemento.CTE)); }
| t1=< SUB > t = < NUM > { pilha.addItemPoxfixo(new Operando(t,TipoDado.NUMERO,TipoElemento.CTE)); }
| t = < VAR > { AcoesSemanticas.verificaDeclaracao(t,tabela);pilha.addItemPoxfixo(new Operando(t,tabela.consultaTipo(t.image),TipoElemento.VAR)); }
| t = < STRING > { pilha.addItemPoxfixo(new Operando(t,TipoDado.PALAVRA,TipoElemento.CTE)); }
)
}

/*
Duvidas:
Como Resolver o problema de expressões do tipo +2+-3 e etc;
*/




