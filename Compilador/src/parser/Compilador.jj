options{  DEBUG_PARSER = false;  DEBUG_TOKEN_MANAGER = false;}PARSER_BEGIN(Compilador)package parser;import java.io.*;import apoio.*;import comando.*;import geradorCodigo.*;import tratamentoErro.*;import semantico.*;public class Compilador implements Config{  static public Tabela tabela;  static public ListaComandosAltoNivel listaComandosAltoNivel;  //public static ListaComandosPrimitivos listaComandosPrimitivos;  public static String codigoDestino;      public static void main(String args []) throws ParseException   {	Compilador compilador = null;	listaComandosAltoNivel = new ListaComandosAltoNivel();	tabela = new Tabela();	try    {		compilador = new Compilador(new FileInputStream(nomeArquivo));        Compilador.inicio();        System.out.println("\nTabela:\n");        //tabela.showTabela();		System.out.println(tabela);        System.out.println("\nExecucao finalizada com sucesso !\n");    }    catch(FileNotFoundException e)    {        System.err.println("Erro: Arquivo informado nao foi encontrado. \n");    }    catch(TokenMgrError e)    {        System.err.println("Erro lexico: " + e.getMessage());    }    catch(ParseException e)    {		System.err.println("Erro Sintatico: " + e.getMessage());    }    catch(ErroSemantico e)    {		System.err.println("Erro Semantico: " + e.getMessage());    }  }}PARSER_END(Compilador) SKIP : {" " | "\t" | "\r" | "\n"}//TOKENS DE COMANDOS TOKEN [IGNORE_CASE] :{  	<EXIBE: "exibe" >  |  	<LEITURA: "le" > | 		<SE: "se" > |    <FIMSE: "fim-se" > |    <ENQUANTO: "enquanto" > |    <FIMENQUANTO: "fim-enquanto" > }//TOKENS DE TipoDadoS TOKEN [IGNORE_CASE] :{  		<NUMERO: "numero" >  |  		<PALAVRA: "palavra" >  }//----------CARACTERES----------TOKEN : {		< #CHAR: ["a"-"z"] | ["A" - "Z"] > |    	< AP: "(" > |    < FP: ")" > |		< PV: ";" > |		< VIRGULA: "," > |    < STRING: "\"" (~["\""])* "\"" > |   	< VAR: (< CHAR >)+ (["a" - "z", "A" - "Z" ,"0" - "9", "_"])* > }//-----------NUMEROS-----------TOKEN :{	< #DIGIT: ["0"-"9"] > |    < NUM: (< DIGIT >)* (".")? (< DIGIT >)+ > }//----------TipoDadoOperadorES---------TOKEN :{ 	< SOMA: "+" > |	< SUB: "-" > |	< MUL: "*" > |  < DIV: "/" > |  < OU: "OR" > |  < ATRIB: "<-"  > |  < IGUAL: "=" > |  < CONCAT: "&" > }Expressao expressao( ): {Expressao exp = new Expressao();}
{
	posExpressao(exp)	{	  System.out.println(exp.getExpressaoInfixa());	  return exp;			}
}

void posExpressao(Expressao exp): {Token token = null; Item item  = null;}
{
  (
	termo(exp) (token = < OU > {item = new Operador(token, TipoOperador.OU); exp.addItemInfixo(item);} termo(exp) {item = new Operador(token, TipoOperador.OU); exp.addItemPosfixo(item);})*
  )
}

void termo(Expressao exp): {Token token = null; Item item  = null;}
{
	termo1(exp) (token = < IGUAL > {item = new Operador(token, TipoOperador.IGUAL); exp.addItemInfixo(item);} termo1(exp) {item = new Operador(token, TipoOperador.IGUAL); exp.addItemPosfixo(item);})? 
}

void termo1(Expressao exp): {Token token = null; Item item = null;}
{
	termo2(exp) (token = < CONCAT > {item = new Operador(token, TipoOperador.CONCAT); exp.addItemInfixo(item);} termo2(exp) {item = new Operador(token, TipoOperador.CONCAT); exp.addItemPosfixo(item);})*
}

void termo2(Expressao exp): {Token token = null; Operador item = null; TipoOperador op = null;}
{
	termo3(exp) ((token = < SOMA > {op = TipoOperador.ADD;} | token = < SUB > {op = TipoOperador.SUB;}) {item = new Operador(token, op); exp.addItemInfixo(item);} termo3(exp)	{item = new Operador(token, op); exp.addItemPosfixo(item);})*
  
}

void termo3(Expressao exp): {Token token = null; Operador item = null; TipoOperador op = null;}
{
	termo4(exp) ((token = < MUL > {op = TipoOperador.MUL;} | token = < DIV >	{op = TipoOperador.DIV;}) {item = new Operador(token, op); exp.addItemInfixo(item);} termo4(exp)	{item = new Operador(token, op); exp.addItemPosfixo(item);})*
  
}

void termo4(Expressao exp): {Token token = null, token_sinal = null; Operando item = null; Operador item2 = null; String sinal = "";}
{
	< AP > expressao() < FP > | 
  (
  token = < NUM > {item = new Operando(token, TipoElemento.CTE);} | 
  token_sinal = < SOMA > token = < NUM > {item = new Operando(token, TipoElemento.CTE); sinal ="+";} | 
  token_sinal = < SUB > token = < NUM > {item = new Operando(token, TipoElemento.CTE); sinal = "-";} | 
  token = < VAR > {AcaoSemantica.declaracaoPrevia(tabela, token); item = new Operando(token, TipoElemento.VAR);}| 
  token = < STRING > {item = new Operando(token, TipoElemento.CTE);}
  )
  {
    if(sinal=="")    {		exp.addItemPosfixo(item);		exp.addItemInfixo(item);    }
    else if(sinal=="+")
    {
      item2 = new Operador(token_sinal, TipoOperador.ADD);
      exp.addItemPosfixo(item2);
      exp.addItemPosfixo(item);      exp.addItemInfixo(item2);      exp.addItemInfixo(item);
    }
    else if(sinal=="-")
    {
      item2 = new Operador(token_sinal, TipoOperador.SUB);
      exp.addItemPosfixo(item2);
      exp.addItemPosfixo(item);      exp.addItemInfixo(item2);      exp.addItemInfixo(item);
    }
  }
}

void inicio(): { }
{
	programa() < EOF >
}

void programa(): { }
{
	( comando() )*
	  
}

void comando(): { }
{
	atribuicao() | declaracao() | se() | enquanto() | le() | exibe()
}

void atribuicao(): { Token token; ComandoAtribuicao comand_atrib; Expressao exp; }
{
	token = < VAR > { AcaoSemantica.declaracaoPrevia(tabela, token); } < ATRIB > exp = expressao()	{comand_atrib = new ComandoAtribuicao(tabela.consultaSimbolo(token.image), exp); listaComandosAltoNivel.addComando(comand_atrib);} < PV >
}

void declaracao(): { Token token; TipoDado tipo; TipoElemento tipo2; }
{
	( < NUMERO > { tipo = TipoDado.NUM; } | < PALAVRA > { tipo = TipoDado.STR; } ) 
  token = < VAR > { AcaoSemantica.criarVariavel(tabela, token, tipo); }
  ( < ATRIB > expressao() { tipo2 = TipoElemento.CTE; } )?
	(< VIRGULA > token = < VAR > { AcaoSemantica.criarVariavel(tabela, token, tipo); }
  (< ATRIB > expressao() { tipo2 = TipoElemento.CTE; } )? )* < PV >
	  
}

void se(): { Expressao exp; }
{
	< SE >< AP > exp = expressao() < FP > programa() < FIMSE >
}

void enquanto(): { }
{
	< ENQUANTO > < AP > expressao() < FP > programa() < FIMENQUANTO >
}

void le(): { Token token; }
{
	< LEITURA > token = < VAR > { AcaoSemantica.declaracaoPrevia(tabela, token); }
  ( < VIRGULA > token = < VAR > { AcaoSemantica.declaracaoPrevia(tabela, token); } )* < PV >
}

void exibe(): { }
{
	< EXIBE > expressao() (< VIRGULA > expressao() )* < PV >
}
