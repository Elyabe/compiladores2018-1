options {
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}
 
PARSER_BEGIN(Compilador)
package parser;
import semantico.*;
import java.io.*; 
import java.util.LinkedList;
 
public class Compilador {

	static Tabela tabela = new Tabela();
	static LinkedList<Item> listaExp = new LinkedList<Item>();
	
   public static void main(String args[])  throws ParseException
   {
      Compilador compilador = null;
      
      try {        
        compilador = new Compilador(new FileInputStream("exemplosSPC/exemplo08.spc"));
		
        Compilador.one_line();
         
      }
      catch(FileNotFoundException e) {
         System.out.println("Erro: arquivo nao encontrado");
      }
      catch(TokenMgrError e) {
         System.out.println("Erro lexico\n" + e.getMessage());
      }
      catch(ParseException e) {
         System.out.println("Erro sintático\n" + e.getMessage());
      }
   }
}

PARSER_END(Compilador)
 
SKIP : { " " | "\t" | "\r" | "\n" }

//TOKENS DE COMANDOS
TOKEN [IGNORE_CASE] : {
  		<EXIBE: "exibe" >  |
  		<LEITURA: "le" > | 
		<SE: "se" > |
      	<FIMSE: "fim-se" > |
      	<ENQUANTO: "enquanto" > |
      	<FIMENQUANTO: "fim-enquanto" > 
}
//TOKENS DE TIPOS 
TOKEN [IGNORE_CASE] : {
  		<NUMERO: "numero" >  |
  		<PALAVRA: "palavra" >  
}
//----------CARACTERES----------
TOKEN : {
		< #CHAR: ["a"-"z"] | ["A" - "Z"] > | 
   		< AP: "(" > |
    	< FP: ")" > |
		< PV: ";" > |
		< VIRGULA: "," > |
    	< STRING: "\"" (~["\""])* "\"" > |
   		< VAR: (< CHAR >)+ (["a" - "z", "A" - "Z" ,"0" - "9", "_"])* > 
}
//-----------NUMEROS-----------
TOKEN : {
	< #DIGIT: ["0"-"9"] > |  
    < NUM: (< DIGIT >)* (".")? (< DIGIT >)+ > 
}
//----------OPERADORES---------
TOKEN : {
 	< SOMA: "+" > |
	< SUB: "-" > |
	< MUL: "*" > |
    < DIV: "/" > |
    < OU: "OR" > |
    < ATRIB: "<-"  > |
    < IGUAL: "=" > |
   	< CONCAT: "&" > 
}

//--------------------------------------------------------------------------------------------

void expressao():{}
{
	termo()	(< OU > termo()
	{
		listaExp.add(new Item('o',"OR"));
	}
	)*
	{
		System.out.println(listaExp);
		//tabela.toString();
	}	
}

void termo():{}
{
	termo1() (< IGUAL > termo1()
	{
	  	listaExp.add(new Item('o',"="));
	}
	)?
}

void termo1():{}
{
	termo2() (< CONCAT > termo2()
	{
		listaExp.add(new Item('o',"&"));
	}
	)*
}

void termo2(): {Token s;}
{
	termo3() ((s = < SOMA > | s = < SUB >) termo3()	  
	{
	  listaExp.add(new Item('o', s.image));
	}	
	)*
}

void termo3(): {Token s;} {
	termo4() ((s = < MUL > | s = < DIV >) termo4()
	{
	  listaExp.add(new Item('o', s.image));
	}	
	)*
}

void termo4(): {Token s, a;}{
	< AP > expressao() <FP >
	| a = < NUM >
	{
	  listaExp.add(new Item('n', a.image));
	}
	
	| s = < SOMA >	a = <NUM >
	{
	  listaExp.add(new Item('n', a.image));
	  listaExp.add(new Item('o', s.image));
	}
	
	| s = < SUB >	a = <NUM >
	{
	  listaExp.add(new Item('n', a.image));
	  listaExp.add(new Item('o', s.image));
	}
	
	| s = < VAR >
	{
	  listaExp.add(new Item('v', s.image)); // ?????
	}
	 
	| s = < STRING >
	{
	  listaExp.add(new Item('v', s.image)); // ?????
	}
}

//--------------------------------------------------------------------------------------------


void one_line() : {}
{
   inicio() <EOF>
}

void inicio(): { } {
	(comando())*
}

void comando(): { } {
  atribuicao() | declaracao() | se() | enquanto() | le() | exibe()
}

void atribuicao(): {Token var; Item item = null;} { 
	var = < VAR >
	{
  		AcoesSemanticas.inicializacao(tabela,var.image);
	}
	< ATRIB > < PV >
}

void declaracao(): {Simbolo simb = null; Token var, tipo;} {
  	
	(tipo=< NUMERO > | tipo=< PALAVRA >)
	var=< VAR >
	{
		tabela.vtnc(tabela, var.image, simb, tipo.image);
	}
	(< ATRIB > expressao())?
	(< VIRGULA > var = < VAR >(< ATRIB > expressao())?
	{
		tabela.vtnc(tabela, var.image, simb, tipo.image);
	}
	)*
	< PV >
	
}

void se(): { } {
	< SE > <AP > expressao() < FP > inicio() < FIMSE >
}

void enquanto(): { } {
	< ENQUANTO > <AP > expressao() < FP > inicio() < FIMENQUANTO >
}

void le(): { } {
	< LEITURA > <VAR > (< VIRGULA ><VAR >)*< PV >
}

void exibe(): { } {
	< EXIBE > expressao() (< VIRGULA > expressao())*< PV >
}