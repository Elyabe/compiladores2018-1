options {
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compilador)

package parser;
import java.io.*;
import apoio.*;
import geradorCodigo.*;
import semantico.*;
import exception.*;
import comando.*;
import java.util.LinkedList;

public class Compilador implements Config {
	static Tabela tabela = new Tabela();
	public static void main(String args[])  throws SemanticException  {
      	try {
	         Compilador compilador = new Compilador(new FileInputStream(nomeArquivoFonte + extensaoFonte));
	         Compilador.inicio();
	         System.out.println("Analise lexica, sintatica e semantica sem erros!");
	           /*System.out.println("\nTabela de Simbolos:");
	 		 	System.out.println(tabela);
	 		 	System.out.println("\n_marcador:\n" + tabela._marcador);*/
		 }
	     catch(TokenMgrError e) {
	        System.out.println("Erro lexico\n" + e.getMessage());
	     }
	     catch(ParseException e) {
	         System.out.println("Erro sintatico\n" + e.getMessage());
	     }
	      catch(SemanticException e) {
	         System.out.println("Erro semantico\n" + e.getMessage());
	     }
	     catch(FileNotFoundException e) {
	         System.out.println("Erro: arquivo nao encontrado");
	     }
   }
}

PARSER_END(Compilador)

SKIP : { " " | "\t" | "\r" | "\n" }

//============================================TOKENS==============================================
//TOKENS DE COMANDOS 
TOKEN [IGNORE_CASE] : {
  		<EXIBE: "exibe" >  |
  		<LEITURA: "le" > | 
		<SE: "se" > |
      	<FIMSE: "fimse" > |
      	<ENQUANTO: "enquanto" > |
      	<FIMENQUANTO: "fimenquanto" > 
}
//TOKENS DE TIPOS 
TOKEN [IGNORE_CASE] : {
  		<NUMERO: "numero" >  |
  		<PALAVRA: "palavra" >  
}
//----------CARACTERES----------
TOKEN : {
		< #CHAR: ["a"-"z"] | ["A" - "Z"] > | 
   		< AP: "(" > |
    	< FP: ")" > |
		< PV: ";" > |
		< VIRGULA: "," > |
    	< STRING: "\"" (~["\""])* "\"" > |
   		< VAR: (< CHAR >)+ (["a" - "z", "A" - "Z" ,"0" - "9", "-"])* > 
}
//-----------NUMEROS-----------
TOKEN : {
	< #DIGIT: ["0"-"9"] > |  
    < NUM: (< DIGIT >)* (".")? (< DIGIT >)+ > 
}
//----------OPERADORES---------
TOKEN : {
 	< SOMA: "+" > |
	< SUB: "-" > |
	< MUL: "*" > |
    < DIV: "/" > |
    < POT: "^" > |
    < OU: "OU" > |
    < RECEBE: "<-"  > |
    < IGUAL: "=" > |
   	< CONCAT: "&" > 
}

//=========================================Gramática de Expressões==========================================
	Expressao expressaoPrincipal() : {Expressao _expressao = new Expressao();}  
	{
	     expressao(_expressao)	{System.out.println(_expressao); return _expressao; }
	}
	void expressao(Expressao _expressao) : {Token token;}  
	{
	      termo(_expressao) ( (token = < OU >) termo(_expressao)
	      {
	        _expressao.addItemPosfixo(new Operador(token, TipoOperador.OU));
	      }
	      )*  
	}
	void termo(Expressao _expressao) : {Token token;}  
	{
	      termo1(_expressao) ( (token = < IGUAL >) termo1(_expressao)
	      {
	        _expressao.addItemPosfixo(new Operador(token, TipoOperador.IGUAL));
	      }
	      )*
	        
	}
	void termo1(Expressao _expressao) : {Token token;}  
	{
	     termo2(_expressao) ((token = < CONCAT >) termo2(_expressao)
	     {
	       _expressao.addItemPosfixo(new Operador(token, TipoOperador.CONCAT));
	     }
	     )*
	         
	}
    void termo2(Expressao _expressao) : {Token token; TipoOperador tipo;}  
	{
	  		termo3(_expressao) ( (token = < SOMA > { tipo = TipoOperador.ADD; }
	  		| token = < SUB > { tipo = TipoOperador.SUB; } ) termo3(_expressao)
	  		{
	  		  _expressao.addItemPosfixo(new Operador(token, tipo));
	  		}
	        )*
	}
	void termo3(Expressao _expressao) : {Token token; TipoOperador tipo;}  
	{
	      termo4(_expressao) ( (token = < MUL > { tipo = TipoOperador.MUL; }| token = < DIV > { tipo = TipoOperador.DIV; }) termo4(_expressao)
	      {
	        _expressao.addItemPosfixo(new Operador(token, TipoOperador.OU));
		  }
	      )*
	}
	void termo4(Expressao _expressao) : {Token token; Item item = null;} 
	{
			< AP > expressao(_expressao) < FP >
		 	|token = < VAR >
		 	{
		  		AcoesSemanticas.tratamentoVariavelNaoDeclarada(tabela,token);
     			_expressao.addItemPosfixo(new Operando(token, TipoDado.STR, TipoElemento.VAR));
     			System.out.println(token.image);
         	}
		  	|token = < STRING >
		  	{
     			_expressao.addItemPosfixo(new Operando(token, TipoDado.STR, TipoElemento.CTE));		
		    } 
		  	
		  	|(< SOMA > | < SUB >)?  token = <NUM>
		  	{
		  	  _expressao.addItemPosfixo(new Operando(token, TipoDado.NUM, TipoElemento.CTE));
      		}	
	}


void inicio() : {ListaComandoAltoNivel listaComandoAltoNivel = null;}	
	{
	      listaComandoAltoNivel = programa() 
	      {
	//  		ListaComandoAltoNivel.toString();
		  }
		  < EOF >
	}  
	ListaComandoAltoNivel programa(ListaComandoAltoNivel _listaComandoAltoNivel) : {}	
	{
	      (comando(listaComandoAltoNivel) )* { return listaComandoAltoNivel; }
	}
	void comando(ListaComandoAltoNivel _listaComandoAltoNivel) : {} 
	{
	      atribui(_listaComandoAltoNivel) | declaracao(_listaComandoAltoNivel) | se() | enquanto() | le() | exibe()  
	}
	void atribui(ListaComandoAltoNivel _listaComandoAltoNivel) :
	{Token token, tokenOperador; Expressao expressao; ComandoAtribuicao comando; Simbolo simbolo;} 
	{
		token = < VAR >
		{
		  AcoesSemanticas.tratamentoVariavelNaoDeclarada(tabela,token);
		}
		tokenOperador = <RECEBE> expressao = expressaoPrincipal()
		{
		    simbolo = new Simbolo(token,TipoDado.STR);
			comando = new ComandoAtribuicao(tokenOperador,simbolo,expressao);
			_listaComandoAltoNivel.addComando(comando);	
		}
		< PV >
	}
	void declaracao(ListaComandoAltoNivel _listaComandoAltoNivel) :
	{Token token,tokenOperador = null; TipoDado tipo; Expressao expressao = null; ComandoAtribuicao comando; Simbolo simbolo;}
	{
		(< NUMERO > {tipo = TipoDado.NUM;} | < PALAVRA > {tipo = TipoDado.STR ;}) token = < VAR >
		{
		  AcoesSemanticas.tratamentoDeclaracao(tabela, token, tipo);
	 	}
	 	(tokenOperador = < RECEBE > expressao = expressaoPrincipal())?
	 	{
				simbolo = new Simbolo(token,TipoDado.STR);
				comando = new ComandoAtribuicao(tokenOperador,simbolo,expressao);
				_listaComandoAltoNivel.addComando(comando);	
	 	}
	 	(< VIRGULA > token = < VAR > (tokenOperador = < RECEBE > expressao = expressaoPrincipal())? 
		{
			     AcoesSemanticas.tratamentoDeclaracao(tabela, token, tipo);
			     simbolo = new Simbolo(token,TipoDado.STR);
				  comando = new ComandoAtribuicao(tokenOperador,simbolo,expressao);
				  _listaComandoAltoNivel.addComando(comando);	
	   	}
	    )* < PV >
	}
	void se() : {}
	{
	      < SE > < AP > expressaoPrincipal() < FP > programa() < FIMSE >
	}
	void enquanto() : {}
	{
	      < ENQUANTO > < AP > expressaoPrincipal() < FP > programa() < FIMENQUANTO > 
	}
	void le() : {}
	{
	      <LEITURA> <VAR> ( < VIRGULA > < VAR > )* < PV > 
	}
	void exibe() : {}
	{
	      <EXIBE> expressaoPrincipal() ( < VIRGULA > expressaoPrincipal() )*   < PV > 
	}

	