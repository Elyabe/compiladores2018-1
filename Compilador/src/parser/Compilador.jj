options {
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compilador)
package parser;
import semantico.*;
import apoio.*;
import java.io.*; 
import java.util.LinkedList;
import geradorCodigo.*;
import comandos.*;

public class Compilador {

	static Tabela tabela = new Tabela();
	
   public static void main(String args[])  throws ErroSemantico
   {
      Compilador compilador = null;
      
      try {        
        compilador = new Compilador(new FileInputStream("exemplosSPC/exemplo16.spc"));
		
        Compilador.one_line();
         
      }
      catch(FileNotFoundException e) {
         System.out.println("Erro: arquivo nao encontrado");
      }
      catch(ErroSemantico e) {
         System.out.println("Erro semantico\n" + e.getMessage());
      }
      catch(TokenMgrError e) {
         System.out.println("Erro lexico\n" + e.getMessage());
      }
      catch(ParseException e) {
         System.out.println("Erro sintático\n" + e.getMessage());
      }
      
   }
}

PARSER_END(Compilador)

SKIP : { " " | "\t" | "\r" | "\n" }

//TOKENS DE COMANDOS
TOKEN [IGNORE_CASE] : {
  		<EXIBE: "exibe" >  |
  		<LEITURA: "le" > | 
		<SE: "se" > |
      	<FIMSE: "fim-se" > |
      	<ENQUANTO: "enquanto" > |
      	<FIMENQUANTO: "fim-enquanto" > 
}
//TOKENS DE TIPOS 
TOKEN [IGNORE_CASE] : {
  		<NUMERO: "numero" >  |
  		<PALAVRA: "palavra" >  
}
//----------CARACTERES----------
TOKEN : {
		< #CHAR: ["a"-"z"] | ["A" - "Z"] > | 
   		< AP: "(" > |
    	< FP: ")" > |
		< PV: ";" > |
		< VIRGULA: "," > |
    	< STRING: "\"" (~["\""])* "\"" > |
   		< VAR: (< CHAR >)+ (["a" - "z", "A" - "Z" ,"0" - "9", "_"])* > 
}
//-----------NUMEROS-----------
TOKEN : {
	< #DIGIT: ["0"-"9"] > |  
    < NUM: (< DIGIT >)* (".")? (< DIGIT >)+ > 
}
//----------OPERADORES---------
TOKEN : {
 	< SOMA: "+" > |
	< SUB: "-" > |
	< MUL: "*" > |
    < DIV: "/" > |
    < OU: "OR" > |
    < ATRIB: "<-"  > |
    < IGUAL: "=" > |
   	< CONCAT: "&" > 
}

//--------------------------------------------------------------------------------------------

Expressao expressao():{Expressao e = new Expressao();}
{
	iniciaExp(e)
	{
	 	//System.out.println(e.listaExpPosfixa);
	
	  return e;
	}
}

void iniciaExp(Expressao e):{Token s; Item item = null;}
{
	termo(e)	(s = < OU > termo(e)
	{
		e.listaExpPosfixa.add(new Item(Tipo.operacao,s.image));
	}
	)*
}

void termo(Expressao e):{Token s; Item item = null;}
{
	termo1(e) (s = < IGUAL > termo1(e)
	{
	  	e.listaExpPosfixa.add(new Item(Tipo.operacao,s.image));
	}
	)?
}

void termo1(Expressao e):{Token s; Item item = null;}
{
	termo2(e) (s = < CONCAT > termo2(e)
	{
		e.listaExpPosfixa.add(new Item(Tipo.operacao,s.image));
	}
	)*
}

void termo2(Expressao e): {Token s; Item item = null;}
{
	termo3(e) ((s = < SOMA > | s = < SUB >) termo3(e)	  
	{
	  e.listaExpPosfixa.add(new Item(Tipo.operacao, s.image));
	}	
	)*
}

void termo3(Expressao e): {Token s; Item item = null;} {
	termo4(e) ((s = < MUL > | s = < DIV >) termo4(e)
	{
	  e.listaExpPosfixa.add(new Item(Tipo.operacao, s.image));
	}	
	)*
}

void termo4(Expressao e): {Token s,a; Item item = null;}{
	< AP > expressao() <FP >
	| a = < NUM >
	{
	  e.listaExpPosfixa.add(new Item(Tipo.numero, a.image));
	}
	
	| s = < SOMA >	a = <NUM >
	{
	  e.listaExpPosfixa.add(new Item(Tipo.numero, a.image));
	  e.listaExpPosfixa.add(new Item(Tipo.operacao, s.image));
	}
	
	| s = < SUB >	a = <NUM >
	{
	  e.listaExpPosfixa.add(new Item(Tipo.numero, a.image));
	  e.listaExpPosfixa.add(new Item(Tipo.operacao, s.image));
	}
	
	| s = < VAR >
	{
	  e.listaExpPosfixa.add(new Item(Tipo.variavel, s.image));
	}
	 
	| s = < STRING >
	{
	  e.listaExpPosfixa.add(new Item(Tipo.palavra, s.image));
	}
}

//--------------------------------------------------------------------------------------------


void one_line() : {}
{
   inicio() <EOF>
}

void inicio(): {ListaComandosAltoNivel listaComandosAltoNivel = new ListaComandosAltoNivel(); } {
	(comando(listaComandosAltoNivel))*< EOF>
}

void comando(ListaComandosAltoNivel listaComandosAltoNivel): { ComandoAltoNivel c;} {
  	atribuicao(listaComandosAltoNivel)
  | declaracao(listaComandosAltoNivel)
  | se(listaComandosAltoNivel)
  | enquanto(listaComandosAltoNivel)
  | le(listaComandosAltoNivel)
  | exibe(listaComandosAltoNivel)
}

void atribuicao(ListaComandosAltoNivel listaComandosAltoNivel): {Expressao e;
					Token var,cmd;
					Simbolo simb = null;
					ComandoAtribuicao cmdA = null;}{
					   
	var = < VAR >
	{
	
  		AcoesSemanticas.inicializacao(tabela, var.image);
		simb = new Simbolo(var.image,Tipo.variavel);
  		
	}
	cmd = < ATRIB > e = expressao()
	{
		cmdA = new ComandoAtribuicao(simb,e,cmd);
	  	listaComandosAltoNivel.addComando(cmdA);
	}
	< PV >
	
}

void declaracao(ListaComandosAltoNivel listaComandosAltoNivel): {Expressao e;
					Simbolo simb = null;
					Token var,cmd;
					Tipo tipo;
					ComandoAtribuicao cmdA = null;} {
  	
	(< NUMERO >{ tipo = Tipo.numero; } | < PALAVRA >{ tipo = Tipo.palavra; })
	var=< VAR >
	{
	  	AcoesSemanticas.declaracao(tabela, var.image, simb, tipo);

	}
	(cmd = < ATRIB > e = expressao()
	{	  
		simb = new Simbolo(var.image,Tipo.variavel);
		cmdA = new ComandoAtribuicao(simb,e,cmd);
	  	listaComandosAltoNivel.addComando(cmdA);
	}
	)?
	(< VIRGULA > var = < VAR >(cmd = < ATRIB > e = expressao()
	{
		simb = new Simbolo(var.image,Tipo.variavel);
		cmdA = new ComandoAtribuicao(simb,e,cmd);
	  	listaComandosAltoNivel.addComando(cmdA);
	})?
	{
	  	AcoesSemanticas.declaracao(tabela, var.image, simb, tipo);
	}
	)*
	< PV >
	
}

void se(ListaComandosAltoNivel listaComandosAltoNivel): { } {
	< SE > <AP > expressao() < FP > inicio() < FIMSE >
}

void enquanto(ListaComandosAltoNivel listaComandosAltoNivel):
	{	Expressao e;
		Token var,cmd;
		ComandoEnquanto cmdE = null;} {

	cmd = < ENQUANTO > < AP > e = expressao() < FP > inicio()
	{
		cmdE = new ComandoEnquanto(e,listaComandosAltoNivel,cmd);
		listaComandosAltoNivel.addComando(cmdE);
	}< FIMENQUANTO >
}

void le(ListaComandosAltoNivel listaComandosAltoNivel): {Simbolo simb = null; Token cmd, r; ComandoEntrada cmdE = null;} {
	cmd = < LEITURA > r = < VAR >
	{
	  simb = new Simbolo(r.image, Tipo.variavel);
	  cmdE = new ComandoEntrada(simb ,cmd);
	  listaComandosAltoNivel.addComando(cmdE);
	}
	(< VIRGULA > r = <VAR >
	{
	  simb = new Simbolo(r.image, Tipo.variavel);
	  cmdE = new ComandoEntrada(simb ,cmd);
	  listaComandosAltoNivel.addComando(cmdE);
	}
	)*< PV >
	
}

void exibe(ListaComandosAltoNivel listaComandosAltoNivel): {Expressao e; ComandoSaida cmdS = null;Token cmd; } {
	cmd = < EXIBE > e = expressao()
	{
	  cmdS = new ComandoSaida(e,cmd);
	  listaComandosAltoNivel.addComando(cmdS);
	}
	(< VIRGULA > e = expressao()
	{
	   cmdS = new ComandoSaida(e,cmd);
	  listaComandosAltoNivel.addComando(cmdS);
	}
	)*< PV >
}