options {
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compilador)

package parser;

import java.io.*;
import semantico.*;
import geradorCodigo.*;
import apoio.*;
import tratamentoErro.*;
import java.util.LinkedList;

public class Compilador {

  public static Tabela tab = new Tabela();

   public static void main(String args[])  throws ParseException  {
      Compilador compilador = null;
            
      try {
       	 
         compilador = new Compilador(new FileInputStream("exemplo20.spc"));
         Compilador.inicio();
         System.out.println("");
         Tabela.imprimeTabela();
      }
      catch(FileNotFoundException e)
      {
         System.err.println("Erro: arquivo nao encontrado");
      }
      catch(TokenMgrError e)
      {
         System.err.println("Erro lexico: " + e.getMessage());
      }
      catch(ParseException e)
      {
		System.err.println("Erro Sintatico: " + e.getMessage());
      }
      catch(ErroSemantico e)
      {
		System.err.println("Erro Semantico: " + e.getMessage());
      }
   }
}
PARSER_END(Compilador)
 
SKIP : { " " | "\t" | "\r" | "\n" }

//TOKENS DE COMANDOS 
TOKEN [IGNORE_CASE] : {
  		<EXIBE: "exibe" >  |
  		<LEITURA: "le" > | 
		<SE: "se" > |
      	<FIMSE: "fim-se" > |
      	<ENQUANTO: "enquanto" > |
      	<FIMENQUANTO: "fim-enquanto" > 
}
//TOKENS DE TIPOS 
TOKEN [IGNORE_CASE] : {
  		<NUMERO: "numero" >  |
  		<PALAVRA: "palavra" >  
}
//----------CARACTERES----------
TOKEN : {
		< #CHAR: ["a"-"z"] | ["A" - "Z"] > | 
   		< AP: "(" > |
    	< FP: ")" > |
		< PV: ";" > |
		< VIRGULA: "," > |
    	< STRING: "\"" (~["\""])* "\"" > |
   		< VAR: (< CHAR >)+ (["a" - "z", "A" - "Z" ,"0" - "9", "_"])* > 
}
//-----------NUMEROS-----------
TOKEN : {
	< #DIGIT: ["0"-"9"] > |  
    < NUM: (< DIGIT >)* (".")? (< DIGIT >)+ > 
}
//----------OPERADORES---------
TOKEN : {
 	< SOMA: "+" > |
	< SUB: "-" > |
	< MUL: "*" > |
    < DIV: "/" > |
    < OU: "OR" > |
    < ATRIB: "<-"  > |
    < IGUAL: "=" > |
   	< CONCAT: "&" > 
}
  

//Gramatica de expressoes:

void iniciaExpressao():
{Expressao exp = new Expressao();}
{
	expressao(exp)
	{exp.imprimeExpressao();} 
}

void expressao(Expressao exp):
{Token t ;TipoOperador operador = null;}
{
	 termo(exp)(t=< OU > termo(exp)
	  {
	 	exp.addListaExpPosFixa(operador.OU, t.image);	 	
	 }
	 )*
		
}

void  termo(Expressao exp):
{Token t; TipoOperador operador = null;}
{
  	termo1(exp) (t=< IGUAL > termo1(exp)
  	{
	 	exp.addListaExpPosFixa(operador.IGUAL, t.image);
  	}
  	)?
}

void termo1(Expressao exp):
{Token t; TipoOperador operador = null;}
{
  	termo2(exp) (t=< CONCAT > termo2(exp)
  	{
  		exp.addListaExpPosFixa(operador.CONCAT, t.image);
  	}
  	)*
} 
void termo2(Expressao exp):
{Token t; TipoOperador operador;}
{
  	termo3(exp) ((t=< SOMA > {operador = TipoOperador.SOMA;} | t=< SUB > {operador = TipoOperador.SUB;}) termo3(exp)
  	{
  		exp.addListaExpPosFixa(operador, t.image);
  	}
  	)*
}

void termo3(Expressao exp):
{Token t; TipoOperador operador;}
{
   termo4(exp) ((t=< MUL > {operador = TipoOperador.MUL;} | t=< DIV > {operador = TipoOperador.DIV;}) termo4(exp)
   {
     	exp.addListaExpPosFixa(operador, t.image);
   }
  	)*
}

void termo4(Expressao exp):
{
	Token var, entrada, sinal;
	TipoDado tipo = null;
}
{
 <AP> expressao(exp) <FP> 
|entrada=<NUM>
{
  	exp.addListaExpPosFixa(tipo.NUMERO, entrada.image);
} 
|<SOMA>entrada=<NUM>
{
  	exp.addListaExpPosFixa(tipo.NUMERO, entrada.image);
}
|sinal=<SUB>entrada=<NUM>
{
  	exp.addListaExpPosFixa(tipo.NUMERO, (sinal.image+entrada.image));
}
|var=<VAR>
{
  	AcoesSemanticas.verificaVariavelDeclarada(tab, var.image);
  	exp.addListaExpPosFixa(tab.tipoVariavel(var.image), var.image);
}
|entrada=<STRING>
{
  	exp.addListaExpPosFixa(tipo.PALAVRA, entrada.image);
}

}
 
 
//GRAMATICA COMPLETA

void inicio():
{}
{
	programa() <EOF>
}

void programa() :
{}
{
  (comando())* 
  

}

void comando():
{}
{
    atribuicao() | declaracao() | se() | enquanto() | le() | exibe()
}

void atribuicao():
{}
{
  	< VAR > < ATRIB > iniciaExpressao() < PV >
}

void declaracao():
{ 	
 	Token tipo, variavel;
}
{
  	(tipo=<NUMERO>|tipo=<PALAVRA>) variavel=<VAR> 
  	{
  		Tabela.insereNaTabela(tab, variavel.image, tipo.image);
  	}
  	( <ATRIB> iniciaExpressao() )? (<VIRGULA>  variavel=<VAR> ( <ATRIB> iniciaExpressao() )? 
  	
  	{
	  	Tabela.insereNaTabela(tab, variavel.image, tipo.image);
  	}
  	
  	
  	)* <PV>
  	
  	
}

void se():
{}
{
  	<SE> <AP> iniciaExpressao() <FP> programa() <FIMSE>
}
 
void enquanto():
{}
{
  	<ENQUANTO> <AP> iniciaExpressao() <FP> programa() <FIMENQUANTO>
}
 
void le():
{}
{
  	<LEITURA> <VAR> ( <VIRGULA> <VAR> )* <PV>
}
 
void exibe():
{}
{
	<EXIBE> iniciaExpressao() ( <VIRGULA> iniciaExpressao() )* <PV>
}
	