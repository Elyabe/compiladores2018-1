/* Compilador para a Linguagem Removename (extensao spc2)
   Turma de Compiladores 2018 - Eng de Computacao e Ciencia da Computacao
   UFES - Campus de Sao Mateus

	 Para executar (prompt no diretorio saida):
	 java -jar jasmin.jar teste.j
	 java teste 
*/

options {
	DEBUG_PARSER = false;
	DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compilador)

package parser;

import java.io.*;
import semantico.*;
import apoio.*;
import tratamentoErro.*;
import comandoAltoNivel.*;
import comandoPrimitivo.*;
import codigoDestino.*;

public class Compilador {
	public static Tabela tabela = new Tabela();

	public static void main(String args[])  throws ParseException  {
		Compilador compilador = null;
		try {
			// Leitura do arquivo com o codigo fonte
			compilador = new Compilador(new FileInputStream(Config.pathProgFonte + Config.nomeArquivo + Config.extensaoFonte));

			// Primeira passagem
			ListaComandosAltoNivel listaComandosAltoNivel = new ListaComandosAltoNivel();
			Compilador.inicio(listaComandosAltoNivel);

			System.out.println("***** Primeira Passagem *****\n"
								+ "Lista de Comandos Alto Nivel:\n"
								+ listaComandosAltoNivel);

			// Exibicao da tabela de simbolos
			System.out.println("\n\n***** Tabela de Simbolos *****\n"
								+ tabela);

			//Warnings
			AcoesSemanticas.warnings();

			// Segunda passagem
			ListaComandosPrimitivos listaComandosPrimitivos = new ListaComandosPrimitivos();
			listaComandosPrimitivos = listaComandosAltoNivel.geraListaComandoPrimitivosCompleta();
			System.out.println("\n\n***** Segunda Passagem *****\n"
								+ "Lista de Comandos Primitivos:\n"
								+ listaComandosPrimitivos);

			// Terceira passagem
			CodigoDestino codigoDestino = new CodigoDestino(listaComandosPrimitivos);
			System.out.println("\n\n***** Terceira Passagem *****\n"
								+ "Lista de Comandos Destino:\n"
								+ codigoDestino);

			// Criacao do arquivo destino
			codigoDestino.geraArquivo(Config.pathSaida + Config.nomeArquivo + Config.extensaoCodigoDestino );
			System.out.println("\n\n***** Criacao do arquivo destino *****\n"
								+ "Arquivo destino: "
								+ Config.pathSaida + Config.nomeArquivo + Config.extensaoCodigoDestino);

			// Fim
			if(AcoesSemanticas.qtdWarnings > 0 ) {
			  System.out.println("\n\n***** Compilacao bem sucedida com "+AcoesSemanticas.qtdWarnings+" warnings! *****");
			}else {
				System.out.println("\n\n***** Compilacao bem sucedida! *****");
			}
			

		}
		catch(FileNotFoundException e) {
			System.err.println("\nErro: arquivo nao encontrado");
		}
		catch (IOException e) {
			System.out.println("Erro de criacao de arquivo" + e.getMessage());
		}
		catch(TokenMgrError e) {
			System.err.println("\nErro lexico: " + e.getMessage());
		}
		catch(ParseException e) {
			System.err.println("\nErro Sintatico: " + e.getMessage());
		}
		catch(ErroSemantico e) {
			System.err.println("\nErro Semantico: " + e.getMessage());
		}
	}
}
PARSER_END(Compilador)
 
SKIP : { " " | "\t" | "\r" | "\n" }

SKIP : { "/*" : comentarioGeral }
<comentarioGeral> SKIP: { "*/" : DEFAULT | <~[]> }

//TOKENS DE COMANDOS 
TOKEN [IGNORE_CASE] : {
	<EXIBE: "exibe" >  |
	<LEITURA: "le" > | 
	<SE: "se" > |
	<FIMSE: "fim-se" > |
	<ENQUANTO: "enquanto" > |
	<FIMENQUANTO: "fim-enquanto" > |
	<MATRIX3D : "matrix3D" > |
	<FIMMATRIX3D: "fim-matrix3D" >
}
//TOKENS DE TIPOS 
TOKEN [IGNORE_CASE] : {
	<NUMERO: "numero" >  |
	<PALAVRA: "palavra" >  
}

//-----------NUMEROS-----------
TOKEN : {
	< #DIGIT: ["0"-"9"] > |  
	< NUM: (< DIGIT >)* (".")? (< DIGIT >)+ > 
}
//----------OPERADORES---------
TOKEN : {
	< SOMA: "+" > |
	< SUB: "-" > |
	< MUL: "*" > |
	< DIV: "/" > |
	< OU: "OU" > |
	< E: "E" > |
	< ATRIB: "<-"  > |
	< IGUAL: "=" > |
	< CONCAT: "&" > |
	< MENOR: "<" > |
	< MAIORIGUAL: ">=" > |
	< TO: "to" >
}
//----------CARACTERES----------
TOKEN : {
	< #CHAR: ["a"-"z"] | ["A" - "Z"] > | 
	< AP: "(" > |
	< FP: ")" > |
	< PV: ";" > |
	< VIRGULA: "," > |
	< STRING: "\"" (~["\""])* "\"" >     	
}
//----------VARIAVEL---------
TOKEN : {
	< VAR: (< CHAR >)+ (["a" - "z", "A" - "Z" ,"0" - "9", "_"])* > 
}  

//Gramatica de expressoes:

Expressao iniciaExpressao():
{
	Expressao exp = new Expressao();
}
{
	expressao(exp)
	{
	    exp.otimizarPosFixaConst1();
        exp.otimizaPosfixa();
		return exp;
	}	
}

void expressao(Expressao exp):
{
	Token t ;
	Item item = null;
}
{
	termo(exp)
	(t = <OU> 
		{
			item = new Operador(TipoOperador.OU,t);
			exp.addListaExpInfixa(item);
		}
		termo(exp)
		{
			exp.addListaExpPosFixa(item);	 	
		}
	)*	 	
}

void termo(Expressao exp):
{
	Token t;
	Item item = null;
}
{
	termo1(exp)
	(t = <E>
		{
			item = new Operador(TipoOperador.E,t);
			exp.addListaExpInfixa(item);
		}
		termo1(exp)
		{
			exp.addListaExpPosFixa(item);
		}
	)* 
}

void  termo1(Expressao exp):
{
	Token t;
	Item item = null;
	TipoOperador operador;
}
{
	termo2(exp)
	(	  
	    (
	         t = <IGUAL> { operador = TipoOperador.IGUAL; } 
		   | t = <MENOR> { operador = TipoOperador.MENOR; } 
		   | t = <MAIORIGUAL> {operador = TipoOperador.MAIORIGUAL; }
	    )
	    {
			item = new Operador(operador,t);
			exp.addListaExpInfixa(item);
		}
		termo2(exp)
		{
			item = new Operador(operador,t);
			exp.addListaExpPosFixa(item);
		}
	)?
}

void termo2(Expressao exp):
{
	Token t;
	Item item = null;
}
{
	termo3(exp)
	( t = <CONCAT>
		{
			item = new Operador(TipoOperador.CONCAT,t);
			exp.addListaExpInfixa(item); 
		}
		termo3(exp)
		{
			item = new Operador(TipoOperador.CONCAT,t);
			exp.addListaExpPosFixa(item);
		}
	)*
} 
void termo3(Expressao exp):
{
	Token t;
	TipoOperador operador;
	Item item = null;
}
{
	termo4(exp)
	(
		(
		    t = <SOMA> {operador = TipoOperador.SOMA;} 
		  | t = <SUB> {operador = TipoOperador.SUB;}
		)
		{
			item = new Operador(operador,t);
			exp.addListaExpInfixa(item);
		}
		termo4(exp)
		{
			item = new Operador(operador,t);
			exp.addListaExpPosFixa(item);
		}
	)*
}

void termo4(Expressao exp):
{
	Token t;
	TipoOperador operador;
	Item item = null;
}
{
	termo5(exp)
	(
		(
		   t = <MUL> {operador = TipoOperador.MUL;} 
		 | t = <DIV> {operador = TipoOperador.DIV;}
		)
		{
			item = new Operador(operador,t);
			exp.addListaExpInfixa(item);
		}
		termo5(exp)
		{
			item = new Operador(operador,t);
			exp.addListaExpPosFixa(item);
		}
	)*
}

void termo5(Expressao exp):
{
	Token tokenVar, tokenEntrada;
	Item item = null;
}
{
	tokenEntrada = <AP>
	{
		item = new Operador(TipoOperador.AP, tokenEntrada);
		exp.addListaExpInfixa(item);
	}
	expressao(exp)
	tokenEntrada = <FP>
	{
		item = new Operador(TipoOperador.FP, tokenEntrada);
		exp.addListaExpInfixa(item);
	}

	| tokenEntrada = <NUM>
	{
		item = new Operando(TipoDado.NUMERO,TipoElemento.CTE, tokenEntrada, Sinal.POS);
		AcoesSemanticas.incompatibilidadeTipoExpressao(item,exp,tokenEntrada);
		exp.addListaExpInfixa(item);
		exp.addListaExpPosFixa(item);
	}

	| <SOMA> tokenEntrada = <NUM>
	{
		item = new Operando(TipoDado.NUMERO,TipoElemento.CTE, tokenEntrada, Sinal.POS);
		AcoesSemanticas.incompatibilidadeTipoExpressao(item,exp,tokenEntrada);
		exp.addListaExpInfixa(item);
		exp.addListaExpPosFixa(item);
	}

	| <SUB> tokenEntrada = <NUM>
	{
		item = new Operando(TipoDado.NUMERO,TipoElemento.CTE, tokenEntrada, Sinal.NEG);
		AcoesSemanticas.incompatibilidadeTipoExpressao(item,exp,tokenEntrada);
		exp.addListaExpInfixa(item);
		exp.addListaExpPosFixa(item);
	}

	| tokenVar = <VAR>
	{
		tabela.verificaVariavelDeclarada(tokenVar.image);
		item = new Operando(tabela.tipoVariavel(tokenVar.image),TipoElemento.VAR, tokenVar, Sinal.POS);
		AcoesSemanticas.incompatibilidadeTipoExpressao(item,exp,tokenVar);
		tabela.pesquisaTabela(tokenVar.image).setIsUtilizada(true);
		exp.addListaExpInfixa(item);
		exp.addListaExpPosFixa(item);
	}

	| tokenEntrada = <STRING>
	{
		item = new Operando(TipoDado.PALAVRA,TipoElemento.CTE, tokenEntrada, Sinal.POS);
		AcoesSemanticas.incompatibilidadeTipoExpressao(item,exp,tokenEntrada);
		exp.addListaExpInfixa(item);
		exp.addListaExpPosFixa(item);
	}
}
 
 
//GRAMATICA COMPLETA

void inicio(ListaComandosAltoNivel listaComandosAltoNivel):
{}
{
	programa(listaComandosAltoNivel) <EOF>
}

void programa(ListaComandosAltoNivel listaComandosAltoNivel) :
{}
{
	(comando(listaComandosAltoNivel))*
}

void comando(ListaComandosAltoNivel listaComandosAltoNivel):
{}
{
	(
	    atribuicao(listaComandosAltoNivel)
	  | declaracao(listaComandosAltoNivel) 
	  | se(listaComandosAltoNivel)  
	  | enquanto(listaComandosAltoNivel)
	  | le(listaComandosAltoNivel)
	  | exibe(listaComandosAltoNivel)
	  | matrix3D( listaComandosAltoNivel )
	)	
}

void atribuicao(ListaComandosAltoNivel listaComandosAltoNivel):
{
	Token atrib, var;
	ComandoAltoNivel comando = null;
	Expressao expressao = null;
}
{
	var = <VAR>
	{
		tabela.verificaVariavelDeclarada(var.image);
	}
		atrib = <ATRIB> expressao = iniciaExpressao()
	{
		AcoesSemanticas.incompatibilidadeTipoAtribuicao (tabela.pesquisaTabela(var.image), expressao, var);
		comando = new ComandoAtribuicao(tabela.pesquisaTabela(var.image), expressao, atrib);
		tabela.pesquisaTabela(var.image).setIsInicializada(true);
		AcoesSemanticas.faltaInicializacaoVariavel(expressao,var);
		listaComandosAltoNivel.addComando(comando);
	}
	<PV>
}

void declaracao(ListaComandosAltoNivel listaComandosAltoNivel):
{   
	Token atrib, variavel;
	TipoDado tipo = null;
	ComandoAltoNivel comando = null;
	Expressao expressao = null;
}
{
	(
	    <NUMERO> {tipo = TipoDado.NUMERO;}
	  | <PALAVRA> {tipo = TipoDado.PALAVRA;}
	)
	
	variavel = <VAR> 
	{
		tabela.insereNaTabela(variavel, tipo);
	}
	( 
		atrib = <ATRIB> expressao=iniciaExpressao() 
		{
			AcoesSemanticas.incompatibilidadeTipoAtribuicao (tabela.pesquisaTabela(variavel.image), expressao, variavel);
			comando = new ComandoAtribuicao(tabela.pesquisaTabela(variavel.image), expressao, atrib);
			tabela.pesquisaTabela(variavel.image).setIsInicializada(true);			
			AcoesSemanticas.faltaInicializacaoVariavel(expressao,variavel);			
			listaComandosAltoNivel.addComando(comando);
		}
	)?
	(
		<VIRGULA> variavel = <VAR>
		{
			//System.out.println(variavel.image);
			tabela.insereNaTabela(variavel, tipo);
		}
		(
			atrib = <ATRIB> expressao=iniciaExpressao()
			{
				AcoesSemanticas.incompatibilidadeTipoAtribuicao (tabela.pesquisaTabela(variavel.image), expressao, variavel);
				comando = new ComandoAtribuicao(tabela.pesquisaTabela(variavel.image), expressao, atrib);
				tabela.pesquisaTabela(variavel.image).setIsInicializada(true);
				AcoesSemanticas.faltaInicializacaoVariavel(expressao,variavel);
				listaComandosAltoNivel.addComando(comando);
			}
		)?
	)* <PV>
}

void  se(ListaComandosAltoNivel listaComandosAltoNivel):
{
	Token se;
	ListaComandosAltoNivel listaProgramaSe =  new ListaComandosAltoNivel();
	Expressao expressao = null;
	ComandoAltoNivel  comando = null;
}
{
	se = <SE> <AP> expressao = iniciaExpressao() <FP> programa(listaProgramaSe) <FIMSE>
	{
		comando = new ComandoCondicionalSimples(expressao, listaProgramaSe, se);
		AcoesSemanticas.faltaInicializacaoVariavel(expressao,se);
		listaComandosAltoNivel.addComando(comando);   
	}
}
 
void  enquanto(ListaComandosAltoNivel listaComandosAltoNivel):
{
	Token enq;
	ListaComandosAltoNivel listaProgramaEnquanto = new ListaComandosAltoNivel();
	Expressao expressao = null;
	ComandoAltoNivel comando = null;
}
{
	enq = <ENQUANTO> <AP> expressao = iniciaExpressao() <FP> programa(listaProgramaEnquanto)
	{
		comando = new ComandoEnquanto(expressao, listaProgramaEnquanto, enq);
		AcoesSemanticas.faltaInicializacaoVariavel(expressao,enq);
		listaComandosAltoNivel.addComando(comando);  
	}
	<FIMENQUANTO>
}
 
void le(ListaComandosAltoNivel listaComandosAltoNivel):
{
	Token le, t;
	ComandoEntrada comando = null;
}
{
	le = <LEITURA> t = <VAR>
	{
		comando = new ComandoEntrada(tabela.pesquisaTabela(t.image), le);
		tabela.pesquisaTabela(t.image).setIsInicializada(true);
		tabela.pesquisaTabela(t.image).setIsUtilizada(true);
		listaComandosAltoNivel.addComando(comando);  
	}
	( <VIRGULA> t = <VAR>
		{
			comando = new ComandoEntrada(tabela.pesquisaTabela(t.image), le);
			tabela.pesquisaTabela(t.image).setIsInicializada(true);
			listaComandosAltoNivel.addComando(comando);		
		}
	)* <PV>
}
 
void exibe(ListaComandosAltoNivel listaExibe):
{
	Token exibe;
	Expressao expressao = null;
	ComandoSaida comando = null;
}
{
	exibe = <EXIBE> expressao = iniciaExpressao()
	{
		comando = new ComandoSaida(expressao, exibe);
		AcoesSemanticas.faltaInicializacaoVariavel(expressao,exibe);
		listaExibe.addComando(comando); 
	}
	( <VIRGULA> expressao = iniciaExpressao()
		{
			comando = new ComandoSaida(expressao, exibe);
			AcoesSemanticas.faltaInicializacaoVariavel(expressao,exibe);
			listaExibe.addComando(comando);   
		}
	)* <PV>
}

// Tarefa 18
void matrix3D(ListaComandosAltoNivel listaMatrix3D ):
{
  	Token matrix3D, varDimX, varDimY, varDimZ, cteInit, cteLimSup;
  	ComandoAltoNivel comandoMatrix3D = null;
  	Item cteInicializacao = null;
	Item cteLimiteSuperior = null;
	Expressao expInicializacao = new Expressao();
	Expressao expCondicaoParada = new Expressao();
  	ListaComandosAltoNivel blocoComandosMatrix = new ListaComandosAltoNivel();
}
{
	matrix3D = <MATRIX3D> <AP>
				varDimX = <VAR>
				{
				  tabela.insereNaTabela( varDimX, TipoDado.NUMERO );
				  tabela.pesquisaTabela( varDimX.image ).setIsInicializada(true);
				} <VIRGULA>
				varDimY = <VAR>
				{
				  tabela.insereNaTabela( varDimY, TipoDado.NUMERO );
				  tabela.pesquisaTabela( varDimY.image ).setIsInicializada(true);
				} <VIRGULA>
				varDimZ = <VAR>
				{
				  tabela.insereNaTabela( varDimZ, TipoDado.NUMERO );
				  tabela.pesquisaTabela( varDimZ.image ).setIsInicializada(true);
				} <SUB>
				cteInit = <NUM>
				{
				  cteInicializacao = new Operando( TipoDado.NUMERO, TipoElemento.CTE, cteInit, Sinal.POS );
				  expInicializacao.addListaExpInfixa( cteInicializacao );
				  expInicializacao.addListaExpPosFixa( cteInicializacao );
				}  <TO>
				cteLimSup = <NUM>
				{
				  cteLimiteSuperior = new Operando( TipoDado.NUMERO, TipoElemento.CTE, cteLimSup, Sinal.POS );
				  expCondicaoParada.addListaExpInfixa( cteLimiteSuperior );
				  expCondicaoParada.addListaExpPosFixa( cteLimiteSuperior );
				} <FP> programa( blocoComandosMatrix ) <FIMMATRIX3D>
				{
					comandoMatrix3D = new ComandoMatrix3D( matrix3D, varDimX, varDimY, varDimZ, expInicializacao, expCondicaoParada, blocoComandosMatrix );
					listaMatrix3D.addComando( comandoMatrix3D );
										
				}
}
