options {
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compilador)
package parser;
import java.io.*;
import java.util.*;
import semantico.*;
import geradorCodigo.*;
import apoio.*;
import comando.*;
import comandoPrimitivo.*;

public class Compilador {  
   public static Tabela tabela;
   
   public static void main(String args[])  throws ParseException,  IOException{
      Compilador compilador = null;
      tabela = new Tabela();
      ListaComandosAltoNivel listaComandosAltoNivel;
      ListaComandosPrimitivos listaComandosPrimitivos;
      
      try {
         compilador = new Compilador(new FileInputStream("exemplo01.spc"));
         listaComandosAltoNivel = Compilador.programa();
		 System.out.println("\n---------------------------\n");
         System.out.println("TABELA DE SIMBOLOS");
         System.out.println(tabela.tab);
		 
		//começa a segunda passagem a partir daqui
        listaComandosPrimitivos = listaComandosAltoNivel.geraListaComandosPrimitivosTotal();
        System.out.println(listaComandosPrimitivos);

		//começa a terceira passagem a partir daqui
		String codigoDestino = listaComandosPrimitivos.geraCodigoDestinoTotal();
         
      }  
      catch(FileNotFoundException e) {
         System.out.println("Erro: arquivo nao encontrado");
      }
      catch(TokenMgrError e) { //Erro léxico
      	System.out.println("Erro lexico\n" + e.getMessage());
      }
      catch(ParseException e) { //Erro Sintatico
        System.out.println("Erro Sintático\n" + e.getMessage());
      }
      catch(ErroSemantico e) { //Erro Semântico
        System.out.println("Erro Semântico\n" + e.getMessage());
      }
   }
}
PARSER_END(Compilador)
 
SKIP : { " " | "\t" | "\r" | "\n" }


//TOKENS DE COMANDOS

TOKEN [IGNORE_CASE] : {
         <EXIBE: "exibe" > |
         <LEITURA: "le" > | 
         <SE: "se" > |
         <FIMSE: "fim-se" > |
         <ENQUANTO: "enquanto" >   |
         <FIMENQUANTO: "fim-enquanto" >
}

//TOKENS DE TIPOS

 TOKEN [IGNORE_CASE] : {
	<NUMERO: "numero" >  |
	<PALAVRA: "palavra" >  
 }

//CARACTERES

 TOKEN : {
	< #CHAR: ["a"-"z"] | ["A" - "Z"] > | 
	< AP: "(" > |
	< FP: ")" > |
	< PV: ";" > |
	< VIRGULA: "," > |
    < STRING: "\"" (~["\""])* "\"" > |
	< VAR: (< CHAR >)+ (["a" - "z", "A" - "Z" ,"0" - "9", "_"])* > 
 }

//NÚMEROS

 TOKEN : {
	< #DIGIT: ["0"-"9"] > |  
	< NUM: (< DIGIT >)* (".")? (< DIGIT >)+ > 
 }

//OPERADORES

 TOKEN : {
	< SOMA: "+" > |
	< SUB: "-" > |
	< MUL: "*" > |
	< DIV: "/" > |
	< OU: "|" > |//VER COM HENRIQUE PQ NOSSO OR NAO FUNCIONA
	< ATRIB: "<-"  > |
	< IGUAL: "=" > |
	< CONCAT: "&" > 
 }
  
ListaComandosAltoNivel programa() : {
  ListaComandosAltoNivel comandos = new ListaComandosAltoNivel();
  ComandoAltoNivel comandoAltoNivel;
}
{
  
  ( comandoAltoNivel = comando() { comandos.addComando(comandoAltoNivel); } )* { return comandos; }
}

ComandoAltoNivel comando() : {
  ComandoAltoNivel comando = null; }
{
  	(
	  comando = atribuicao() |
	  declaracao() |
	  comando = se() |
	  comando = enquanto() |
	  comando = le()|
	  comando = exibe()
  	){ return comando; }
  
}

ComandoAtribuicao atribuicao() : {
  	Expressao exp;
	Token v;
	ComandoAtribuicao comandoAtribuicao;
}
{
  v = <VAR> { tabela.verificaExistenciaSimbolo(v); } <ATRIB> exp = expressaoMestre() {
		comandoAtribuicao = new ComandoAtribuicao(v, tabela.consultaSimbolo(v.image), exp);
	} <PV> { return comandoAtribuicao; }
}

void declaracao( ) : {//PERGUNTAR SE EH NECESSARIO CRIAR UMA CLASSE OU PODE RETORNAR UM COMANDO ALTO NIVEL
  	Expressao exp;
	Simbolo simb;
	Token t, v; //t - recebe o tipo, v - recebe o nome da variavel;
}
{
  	(t = <NUMERO>| t = <PALAVRA>) v = <VAR>
	{
	  if (t.image.equals("numero")) { tabela.incluiSimbolo(v, TipoDado.NUM); }
	  else { tabela.incluiSimbolo(v, TipoDado.STR); }
	 }
	( <ATRIB> exp = expressaoMestre() )? (<VIRGULA> v = <VAR>	
		{
		  if (t.image.equals("numero")) { tabela.incluiSimbolo(v, TipoDado.NUM); }
	  	else { tabela.incluiSimbolo(v, TipoDado.STR); }
	  	}
	( <ATRIB> exp = expressaoMestre() )? )* <PV>
}

ComandoCondicional se() : {
  Expressao exp;
  ComandoCondicionalSimples comandoCondicionalSimples;
  ListaComandosAltoNivel  programaSe;
}
{
  <SE> <AP> exp = expressaoMestre() <FP> programaSe = programa() <FIMSE>
  	{  comandoCondicionalSimples = new ComandoCondicionalSimples(null, exp, programaSe);
  		return comandoCondicionalSimples;}
}

ComandoEnquanto enquanto() : {
  Expressao exp;
  ListaComandosAltoNivel comandosAltoNivel;
  ComandoEnquanto comandoEnquanto;}
{
  <ENQUANTO> <AP> exp = expressaoMestre() <FP> comandosAltoNivel = programa() <FIMENQUANTO>
  {
    comandoEnquanto = new ComandoEnquanto(null, exp, comandosAltoNivel);
    return comandoEnquanto;
  }
}

ComandoEntrada le() : {
	Token v;
	ComandoEntrada comandoEntrada;
	LinkedList<Simbolo> variaveis = new LinkedList<Simbolo>();
}
{
  <LEITURA> v = <VAR> {
	if(tabela.verificaExistenciaSimbolo(v)) {
		variaveis.add(tabela.consultaSimbolo(v.image));
	}
	} ( <VIRGULA> v = <VAR> {
	  if(tabela.verificaExistenciaSimbolo(v)) {
		variaveis.add(tabela.consultaSimbolo(v.image));
		}
	} )* <PV> {
	  comandoEntrada = new ComandoEntrada(null, variaveis);//PERGUNTAR PQ TA DIFERENTE NO DIAGRAMA
	  return comandoEntrada; }
}

ComandoSaida exibe() : {
  Expressao exp;
  ComandoSaida comandoSaida;
  LinkedList<Expressao> expressoes = new LinkedList<Expressao>();
}
{
  <EXIBE> exp = expressaoMestre()
	{ expressoes.add(exp); /*adiciona um item na lista*/ }
	( <VIRGULA> exp = expressaoMestre() { expressoes.add(exp); /*adiciona um item na lista*/ } )* <PV>
	{ //cria o objeto da classe Comando saida após ter adicionado todos os membros na lista
		comandoSaida = new ComandoSaida(null, expressoes); //PERGUNTAR PQ PRECISA DO TOKEN AQUI
		return comandoSaida;
	}
}

Expressao expressaoMestre() : {
	Expressao exp = new Expressao(); //cria uma nova linkedlist
}

{ 
  	expressao(exp) {  	  	
    	System.out.println("expressao posfixa: "+exp.expressaoPosfixa); /*imprime a lista*/
		return exp;
	}
	
}

void expressao(Expressao exp) : {
	Token sinal;
	Operador op;
}

{
  termo(exp)(sinal = <OU> termo(exp){ //adiciona operador
	op = new Operador(sinal, TipoOperador.OU);
	exp.addItemPosfixo(op);
  })*
}

void termo(Expressao exp) : {
	Token sinal;
	Operador op;
}
{
  termo1(exp)(sinal = <IGUAL> termo1(exp) {
    op = new Operador(sinal, TipoOperador.IGUAL);
	exp.addItemPosfixo(op);
    
  })?
}

void termo1(Expressao exp) : {
  Token sinal;
  Operador op;
}
{
  termo2(exp)(sinal = <CONCAT>termo2(exp){
   	op = new Operador(sinal, TipoOperador.CONCAT);
	exp.addItemPosfixo(op);
   })*
 
}

String termo2(Expressao exp) : {
	String a, b="";
	Token sinal;
	Operador op;
	
}
{
  a = termo3(exp)((sinal = <SOMA> { op = new Operador(sinal, TipoOperador.ADD); }| sinal = <SUB>{ op = new Operador(sinal, TipoOperador.SUB); }) b = termo3(exp) {
	//pegar o operador aqui e botar na lista
    exp.addItemPosfixo(op);
    a = a+b+sinal.image;
    })* { return a; } 
}

String termo3(Expressao exp) : {
	String a, b="";
	Token sinal;
	Operador op;
	
}
{
  a = termo4(exp)((sinal = <MUL>{ op = new Operador(sinal, TipoOperador.MUL); }|sinal = <DIV>{ op = new Operador(sinal, TipoOperador.DIV); }) b = termo4(exp) {
   exp.addItemPosfixo(op);
	a = a+b+sinal.image;
})* { return a; }
}

String termo4(Expressao exp) : { 
	Token folha;
	String a;
	Operando operando;
}
{
  <AP> expressao(exp) <FP> { return ""; }
  |folha = <NUM> { //adiciona um numero sem sinal
  		operando = new Operando(folha, TipoDado.NUM, TipoElemento.CTE);
  		exp.addItemPosfixo(operando);
		return folha.image;
	} //jah colocar na lista imediatamente
  |folha = <SOMA><NUM>{ //adiciona um numero com sinal positivo
		operando = new Operando(folha, TipoDado.NUM, TipoElemento.CTE);
  		exp.addItemPosfixo(operando);
		return folha.image;
	}
  |folha = <SUB><NUM>{ //adiciona um numero com sinal negativo
  		operando = new Operando(folha, TipoDado.NUM, TipoElemento.CTE);
  		exp.addItemPosfixo(operando);
		return folha.image;
	}
  |folha = <VAR> { //adiciona uma variavel
    if(tabela.verificaExistenciaSimbolo(folha)) { //caso a variavel tenha sido declarada
		operando = new Operando(folha, null, TipoElemento.CTE);
  		exp.addItemPosfixo(operando);
    }
    return folha.image;
  }
  |folha = <STRING>{ //adiciona uma string
  		operando = new Operando(folha, TipoDado.STR, TipoElemento.CTE);
  		exp.addItemPosfixo(operando);
	return folha.image;	
 }
}