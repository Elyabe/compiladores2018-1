options {
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compilador)

package parser;

import java.io.*;
import semantico.*;
import geradorCodigo.*;
import apoio.*;
import tratamentoErro.*;
import comandoAltoNivel.*;
import java.util.LinkedList;

public class Compilador {

  public static Tabela tabela = new Tabela();
  
   public static void main(String args[])  throws ParseException  {
      Compilador compilador = null;
            
      try {
       	 
         compilador = new Compilador(new FileInputStream("./src/apoio/exemplo10.spc2"));
         ListaComandosAltoNivel lista = new ListaComandosAltoNivel();
         Compilador.inicio(lista);         
         System.out.println("");
        // Tabela.imprimeTabela();

        System.out.println(lista);

      }
      catch(FileNotFoundException e)
      {
         System.err.println("Erro: arquivo nao encontrado");
      }
      catch(TokenMgrError e)
      {
         System.err.println("Erro lexico: " + e.getMessage());
      }
      catch(ParseException e)
      {
		System.err.println("Erro Sintatico: " + e.getMessage());
      }
      catch(ErroSemantico e)
      {
		System.err.println("Erro Semantico: " + e.getMessage());
      }
   }
}
PARSER_END(Compilador)
 
SKIP : { " " | "\t" | "\r" | "\n" }

//TOKENS DE COMANDOS 
TOKEN [IGNORE_CASE] : {
  		<EXIBE: "exibe" >  |
  		<LEITURA: "le" > | 
		<SE: "se" > |
      	<FIMSE: "fim-se" > |
      	<ENQUANTO: "enquanto" > |
      	<FIMENQUANTO: "fim-enquanto" > 
}
//TOKENS DE TIPOS 
TOKEN [IGNORE_CASE] : {
  		<NUMERO: "numero" >  |
  		<PALAVRA: "palavra" >  
}
//----------CARACTERES----------
TOKEN : {
		< #CHAR: ["a"-"z"] | ["A" - "Z"] > | 
   		< AP: "(" > |
    	< FP: ")" > |
		< PV: ";" > |
		< VIRGULA: "," > |
    	< STRING: "\"" (~["\""])* "\"" > |
   		< VAR: (< CHAR >)+ (["a" - "z", "A" - "Z" ,"0" - "9", "_"])* > 
}
//-----------NUMEROS-----------
TOKEN : {
	< #DIGIT: ["0"-"9"] > |  
    < NUM: (< DIGIT >)* (".")? (< DIGIT >)+ > 
}
//----------OPERADORES---------
TOKEN : {
 	< SOMA: "+" > |
	< SUB: "-" > |
	< MUL: "*" > |
    < DIV: "/" > |
    < OU: "OR" > |
    < ATRIB: "<-"  > |
    < IGUAL: "=" > |
   	< CONCAT: "&" > 
}
  

//Gramatica de expressoes:

Expressao iniciaExpressao():
{Expressao exp = new Expressao();}
{
	expressao(exp)
	{	//exp.imprimeExpressao();
		return exp;
	}
	
}

void expressao(Expressao exp):
{Token t ;TipoOperador operador = null;}
{
	 termo(exp)(t=< OU > termo(exp)
	  {
	 	exp.addListaExpPosFixa(operador.OU, t.image);	 	
	 }
	 )*
		
}

void  termo(Expressao exp):
{Token t; TipoOperador operador = null;}
{
  	termo1(exp) (t=< IGUAL > termo1(exp)
  	{
	 	exp.addListaExpPosFixa(operador.IGUAL, t.image);
  	}
  	)?
}

void termo1(Expressao exp):
{Token t; TipoOperador operador = null;}
{
  	termo2(exp) (t=< CONCAT > termo2(exp)
  	{
  		exp.addListaExpPosFixa(operador.CONCAT, t.image);
  	}
  	)*
} 
void termo2(Expressao exp):
{Token t; TipoOperador operador;}
{
  	termo3(exp) ((t=< SOMA > {operador = TipoOperador.SOMA;} | t=< SUB > {operador = TipoOperador.SUB;}) termo3(exp)
  	{
  		exp.addListaExpPosFixa(operador, t.image);
  	}
  	)*
}

void termo3(Expressao exp):
{Token t; TipoOperador operador;}
{
   termo4(exp) ((t=< MUL > {operador = TipoOperador.MUL;} | t=< DIV > {operador = TipoOperador.DIV;}) termo4(exp)
   {
     	exp.addListaExpPosFixa(operador, t.image);
   }
  	)*
}


void termo4(Expressao exp):
{
	Token var, entrada, sinal;
	TipoElemento tipo = null;
}
{
 <AP> expressao(exp) <FP> 
|entrada=<NUM>
{
  	exp.addListaExpPosFixa(TipoElemento.CTE, entrada.image);
} 
|<SOMA>entrada=<NUM>
{
  	exp.addListaExpPosFixa(TipoElemento.CTE, entrada.image);
}
|sinal=<SUB>entrada=<NUM>
{
  	exp.addListaExpPosFixa(TipoElemento.CTE, (sinal.image+entrada.image));
}
|var=<VAR>
{
  	Tabela.verificaVariavelDeclarada(var.image);
  	exp.addListaExpPosFixa(TipoElemento.VAR, var.image);
}
|entrada=<STRING>
{
  	exp.addListaExpPosFixa(TipoElemento.CTE, entrada.image);
}

}
 
 
//GRAMATICA COMPLETA

void inicio(ListaComandosAltoNivel listaComandosAltoNivel):
{}
{
	 programa(listaComandosAltoNivel) <EOF>
}

void programa(ListaComandosAltoNivel listaComandosAltoNivel) :
{}
{
  (comando(listaComandosAltoNivel))*
}

void comando(ListaComandosAltoNivel listaComandosAltoNivel):
{}
{
       ( atribuicao(listaComandosAltoNivel)
    | declaracao(listaComandosAltoNivel)
    | se(listaComandosAltoNivel)
    | enquanto(listaComandosAltoNivel)
    | le(listaComandosAltoNivel)
    | exibe(listaComandosAltoNivel) 
	)	
}

void atribuicao(ListaComandosAltoNivel listaComandosAltoNivel):
{
  Token atrib, var;
  ComandoAltoNivel comando = null;
  Expressao expressao = null;
}
{
  	var=< VAR >
  	{
  	  	Tabela.verificaVariavelDeclarada(var.image);
  	}
  	atrib=< ATRIB > expressao = iniciaExpressao()
  	{
  	  	comando = new ComandoAtribuicao(tabela.pesquisaTabela(var.image), expressao, atrib);
  	  	listaComandosAltoNivel.addComando(comando); 
  	}
  	< PV >
}

void declaracao(ListaComandosAltoNivel listaComandosAltoNivel):
{ 	
 	Token atrib, variavel;
 	TipoDado tipo = null;
 	ComandoAltoNivel comando = null;
    Expressao expressao = null;
}
{
  	(<NUMERO> {tipo = TipoDado.NUMERO;} |<PALAVRA> {tipo = TipoDado.PALAVRA;}) variavel=<VAR> 
  	{
  		Tabela.insereNaTabela(variavel, tipo);
  	}
  	( atrib = <ATRIB> expressao=iniciaExpressao() 
  	{
  	  	comando = new ComandoAtribuicao(tabela.pesquisaTabela(variavel.image), expressao, atrib);
  	  	listaComandosAltoNivel.addComando(comando);
  	}
  	)?
  	 (<VIRGULA>  variavel=<VAR> ( atrib = <ATRIB> expressao=iniciaExpressao()
  	{
	  	Tabela.insereNaTabela(variavel, tipo);
  	  	comando = new ComandoAtribuicao(tabela.pesquisaTabela(variavel.image), expressao, atrib);
  	  	listaComandosAltoNivel.addComando(comando);
  	}
  	)? 
  	
  	)* <PV> 	
  	
}

void  se(ListaComandosAltoNivel listaComandosAltoNivel):
{
  	Token se;
  	ListaComandosAltoNivel listaProgramaSe =  new ListaComandosAltoNivel();
	Expressao expressao = null;
	ComandoAltoNivel  comando = null;
}
{
  	se=<SE> <AP> expressao=iniciaExpressao() <FP> programa(new ListaComandosAltoNivel()) <FIMSE>
  	{
  	  	comando = new ComandoCondicionalSimples(expressao, listaProgramaSe, se);
  	  	//System.out.println(listaComandosAltoNivel.getListaComandosAltoNivel().get(0));
  	  	listaComandosAltoNivel.addComando(comando); 	
  	}
  	

}
 
void  enquanto(ListaComandosAltoNivel listaComandosAltoNivel):
{
  	Token enq;
  	ListaComandosAltoNivel listaProgramaEnquanto = new ListaComandosAltoNivel();
	Expressao expressao = null;
	ComandoAltoNivel comando = null;
}
{
  	enq = <ENQUANTO> <AP> expressao=iniciaExpressao() <FP> programa(listaProgramaEnquanto)
  	{
  	  	comando = new ComandoEnquanto(expressao, listaProgramaEnquanto, enq);
  	  	listaComandosAltoNivel.addComando(comando);  
  	}
  	<FIMENQUANTO>
  	
}
 
void le(ListaComandosAltoNivel listaComandosAltoNivel):
{ Token le, t;
  ComandoEntrada comando = null;
}
{
  	le=<LEITURA> t=<VAR>
  	{
    	comando = new ComandoEntrada(tabela.pesquisaTabela(t.image), le);
    	listaComandosAltoNivel.addComando(comando);  
  	}
  	( <VIRGULA> t=<VAR>
 	{
    	comando = new ComandoEntrada(tabela.pesquisaTabela(t.image), le);
    	listaComandosAltoNivel.addComando(comando);  
    		  
  	}
  	)* <PV>
}
 
void exibe(ListaComandosAltoNivel listaExibe):
{
  Token exibe;
  Expressao expressao = null;
  ComandoSaida comando = null;
}
{
	exibe =<EXIBE> expressao = iniciaExpressao()
	{
	  	comando = new ComandoSaida(expressao, exibe);
	  	listaExibe.addComando(comando);	
	}
	( <VIRGULA> iniciaExpressao()
	{
	  	comando = new ComandoSaida(expressao, exibe);
	  	listaExibe.addComando(comando);  	
	}
	)* <PV>
}
	