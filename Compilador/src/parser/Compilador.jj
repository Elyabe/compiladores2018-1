options {
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compilador)

package parser;
import java.io.*;
import apoio.*;
import geradorCodigo.*;
import semantico.*;
import exception.*;
import comando.altoNivel.*;
import comando.primitivo.*;

public class Compilador implements Config {
	public static Tabela tabela = new Tabela();
	
	static ListaComandosAltoNivel listaComandosAltoNivel = new ListaComandosAltoNivel();

	static ListaComandosPrimitivos listaComandosPrimitivos = new ListaComandosPrimitivos();
	
	public static void main(String args[]) throws SemanticException, ParseException,  IOException  {
      	try {
	         Compilador compilador = new Compilador(new FileInputStream(nomeArquivoFonte + extensaoFonte));
	         compilador.inicio(listaComandosAltoNivel);
	         listaComandosPrimitivos = listaComandosAltoNivel.geraListaComandosPrimitivosTotal();
	     //    System.out.println("\nAnalise lexica, sintatica e semantica sem erros!");
			
	        // System.out.println(listaComandosPrimitivos.toString());
	         String listaTerceiraPassagem = listaComandosPrimitivos.geraCodigoDestinoCompleto();
			 GeradorCodigoDestino.geraCodigoAssembler(listaTerceiraPassagem, nomeArquivoSaidaTerceiraPassagem);

	         System.out.println("\nTabela de Simbolos:");
	 		 System.out.println(tabela);
	 		 System.out.println("\nMarcador:\n" + tabela.getMarcador());
		 }
	     catch(TokenMgrError e) {
	        System.out.println("Erro lexico\n" + e.getMessage());
	     }
	     catch(ParseException e) {
	         System.out.println("Erro sintatico\n" + e.getMessage());
	     }
	      catch(SemanticException e) {
	         System.out.println("Erro semantico\n" + e.getMessage());
	     }
	     catch(FileNotFoundException e) {
	         System.out.println("Erro: arquivo de leitura nao encontrado");
	     }
	     catch(IOException e) {
			 System.out.println("Erro: erro no arquivo " + nomeArquivoSaidaTerceiraPassagem);
	     }
   }
}

PARSER_END(Compilador)

SKIP : { " " | "\t" | "\r" | "\n" }

//============================================TOKENS==============================================
//TOKENS DE COMANDOS 
TOKEN [IGNORE_CASE] : {
  		<EXIBE: "exibe" >  |
  		<LEITURA: "le" > | 
		<SE: "se" > |
      	<FIMSE: "fimse" > |
      	<ENQUANTO: "enquanto" > |
      	<FIMENQUANTO: "fimenquanto" > 
}
//TOKENS DE TIPOS 
TOKEN [IGNORE_CASE] : {
  		<NUMERO: "numero" >  |
  		<PALAVRA: "palavra" >  
}
//----------CARACTERES----------
TOKEN : {
		< #CHAR: ["a"-"z"] | ["A" - "Z"] > | 
   		< AP: "(" > |
    	< FP: ")" > |
		< PV: ";" > |
		< VIRGULA: "," > |
    	< STRING: "\"" (~["\""])* "\"" > |
   		< VAR: (< CHAR >)+ (["a" - "z", "A" - "Z" ,"0" - "9", "-"])* > 
}
//-----------NUMEROS-----------
TOKEN : {
	< #DIGIT: ["0"-"9"] > |  
    < NUM: (< DIGIT >)* (".")? (< DIGIT >)+ > 
}
//----------OPERADORES---------
TOKEN : {
 	< SOMA: "+" > |
	< SUB: "-" > |
	< MUL: "*" > |
    < DIV: "/" > |
    < POT: "^" > |
    < OU: "OU" > |
    < RECEBE: "<-"  > |
    < IGUAL: "=" > |
   	< CONCAT: "&" > 
}

//=========================================Gramática de Expressões==========================================
	Expressao expressaoPrincipal() : {Expressao _expressao = new Expressao();}  
	{
	     expressao(_expressao)	{ return _expressao; }
	}
	void expressao(Expressao _expressao) : {Token token;}  
	{
	      termo(_expressao) ( (token = < OU >) termo(_expressao)
	      {
	        _expressao.addItemPosfixo(new Operador(token, TipoOperador.OU));
	      }
	      )*  
	}
	void termo(Expressao _expressao) : {Token token;}  
	{
	      termo1(_expressao) ( (token = < IGUAL >) termo1(_expressao)
	      {
	        _expressao.addItemPosfixo(new Operador(token, TipoOperador.IGUAL));
	      }
	      )*
	        
	}
	void termo1(Expressao _expressao) : {Token token;}  
	{
	     termo2(_expressao) ((token = < CONCAT >) termo2(_expressao)
	     {
	       _expressao.addItemPosfixo(new Operador(token, TipoOperador.CONCAT));
	     }
	     )*
	         
	}
    void termo2(Expressao _expressao) : {Token token; TipoOperador tipo;}  
	{
	  		termo3(_expressao) ( (token = < SOMA > { tipo = TipoOperador.ADD; }
	  		| token = < SUB > { tipo = TipoOperador.SUB; } ) termo3(_expressao)
	  		{
	  		  _expressao.addItemPosfixo(new Operador(token, tipo));
	  		}
	        )*
	}
	void termo3(Expressao _expressao) : {Token token; TipoOperador tipo;}  
	{
	      termo4(_expressao) ( (token = < MUL > { tipo = TipoOperador.MUL; }| token = < DIV > { tipo = TipoOperador.DIV; }) termo4(_expressao)
	      {
	        _expressao.addItemPosfixo(new Operador(token, TipoOperador.OU));
		  }
	      )*
	}
	void termo4(Expressao _expressao) : {Token token, sinal; Item item = null;} 
	{
			< AP > expressao(_expressao) < FP >
		 	|token = < VAR >
		 	{
		  		AcoesSemanticas.tratamentoVariavelNaoDeclarada(tabela,token);
     			_expressao.addItemPosfixo(new Operando(token, TipoDado.STR, TipoElemento.VAR));
         	}
		  	|token = < STRING >
		  	{
     			_expressao.addItemPosfixo(new Operando(token, TipoDado.STR, TipoElemento.CTE));		
		    }
		    | token = <NUM>
		  	{
		  	  _expressao.addItemPosfixo(new Operando(token, TipoDado.NUM, TipoElemento.CTE));
      		}
		  	|< SOMA >  token = <NUM>
		  	{
		  	  _expressao.addItemPosfixo(new Operando(token, TipoDado.NUM, TipoElemento.CTE));
      		}
      		|sinal = < SUB >  token = <NUM>
      		{
		  	  _expressao.addItemPosfixo(new Operando(token, sinal,TipoDado.NUM, TipoElemento.CTE));
      		}
	}
	
//=========================================Gramática Completa==============================================
void inicio(ListaComandosAltoNivel listaComandoAltoNivel) : {}	
	{
	      programa(listaComandoAltoNivel)   < EOF >  
	}
	void programa(ListaComandosAltoNivel listaComandoAltoNivel) : {}	
	{
	      (comando(listaComandoAltoNivel) )* 
	}
	void comando(ListaComandosAltoNivel _listaComandoAltoNivel) : {} 
	{
		atribui(_listaComandoAltoNivel)
		| le(_listaComandoAltoNivel)
		| exibe(_listaComandoAltoNivel) 
	    | declaracao()
	    | enquanto(_listaComandoAltoNivel)
	    | se(_listaComandoAltoNivel)
	}
	void atribui(ListaComandosAltoNivel _listaComandoAltoNivel) :
	{Token token; Expressao expressao; ComandoAtribuicao comandoAtribuicao; Simbolo simbolo;} 
	{
		token = < VAR >
		{
		  AcoesSemanticas.tratamentoVariavelNaoDeclarada(tabela,token);
		}
		<RECEBE> expressao = expressaoPrincipal()
		{
			_listaComandoAltoNivel.addComando(comandoAtribuicao = new ComandoAtribuicao(token,tabela.consultaSimbolo(token.image),expressao));
		}
		< PV >
	}
	void le(ListaComandosAltoNivel _listaComandoAltoNivel) :
	{Token token; ComandoEntrada comandoEntrada; Simbolo simbolo;}
	{
	      <LEITURA> token = <VAR> 
	      {
				_listaComandoAltoNivel.addComando(comandoEntrada = new ComandoEntrada(token,tabela.consultaSimbolo(token.image)));
	      }
	      ( < VIRGULA > token = < VAR >
	      {
				_listaComandoAltoNivel.addComando(comandoEntrada = new ComandoEntrada(token,tabela.consultaSimbolo(token.image)));
	      }
	      )* < PV >
	}
	void exibe(ListaComandosAltoNivel _listaComandoAltoNivel) :
	{Token token; Expressao expressao; ComandoSaida comandoSaida;}
	{
	      token = <EXIBE> expressao = expressaoPrincipal()
	      {
	        	_listaComandoAltoNivel.addComando(comandoSaida = new ComandoSaida(token,expressao));
	      }
	      ( < VIRGULA > expressao = expressaoPrincipal()
	      {
	        	_listaComandoAltoNivel.addComando(comandoSaida = new ComandoSaida(token,expressao));
	      }
	      )* < PV > 
	}
	void declaracao() :
	{Token token; TipoDado tipo;}
	{
		(< NUMERO > {tipo = TipoDado.NUM;} | < PALAVRA > {tipo = TipoDado.STR ;}) token = < VAR >
		{
		  		AcoesSemanticas.tratamentoDeclaracao(tabela, token, tipo);
	 	}
	 	( < RECEBE > expressaoPrincipal())? (< VIRGULA > token = < VAR > (< RECEBE > expressaoPrincipal())? 
		{
			     AcoesSemanticas.tratamentoDeclaracao(tabela, token, tipo);
	   	}
	    )* < PV >
	}
	void enquanto(ListaComandosAltoNivel _listaComandoAltoNivel) :
	{Token token; Expressao expressao; ComandoEnquanto comandoEnquanto; ListaComandosAltoNivel listaComandoAltoNivel = new ListaComandosAltoNivel();}
	{
	      token = < ENQUANTO > < AP > expressao = expressaoPrincipal() < FP > programa(listaComandoAltoNivel)
	      {
				_listaComandoAltoNivel.addComando(comandoEnquanto = new ComandoEnquanto(token, expressao, listaComandoAltoNivel));
	      }
	      < FIMENQUANTO > 
	}
	void se(ListaComandosAltoNivel _listaComandoAltoNivel) :
	{Token token; Expressao expressao; ComandoCondicional comandoCondicional; ListaComandosAltoNivel listaComandoAltoNivel = new ListaComandosAltoNivel();}
	{
	      token = < SE > < AP > expressao = expressaoPrincipal() < FP > programa(listaComandoAltoNivel)
	      {
	        	_listaComandoAltoNivel.addComando(comandoCondicional = new ComandoCondicionalSimples(token, expressao, listaComandoAltoNivel));
	      }
	      < FIMSE >
	}