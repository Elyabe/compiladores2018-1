options {
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compilador)
package parser;

import java.util.LinkedList;
import java.util.Scanner;
import java.io.*;
import semantico.*;
import geradorCodigo.*;
import apoio.*;

public class Compilador {
  
  	static boolean error=false;
	static Tabela tabela = new Tabela();
	static AcoesSemanticas as=new AcoesSemanticas();

   public static void main(String args[])  throws ParseException  {
      Compilador compilador = null;
      Scanner ler=new Scanner(System.in);
      try {
        //System.out.print("Insira o nome do arquivo a ser analisado: ");
        //String arq=ler.nextLine();
        //System.out.println();
         compilador = new Compilador(new FileInputStream(Config.arqfonte));
         Compilador.inicio();
         System.out.println("\n"+tabela.imprime());
         
	      if(!error)
	      	System.out.println("\nSem erros sintáticos");
	      else
	      	System.out.println("\nForam encontrados erros sintáticos, mas foram ignorados");
      }
      catch(FileNotFoundException e) {
         System.out.println("Erro: arquivo nao encontrado");
      }
      catch(TokenMgrError e) {
         System.out.println("Erro lexico\n" + e.getMessage());
      }
   }
}

PARSER_END(Compilador)
 
SKIP : { " " | "\t" | "\r" | "\n" }

//TOKENS DE COMANDOS 
TOKEN [IGNORE_CASE] : {
  		<EXIBE: "exibe" >  |
  		<LEITURA: "le" > | 
		<SE: "se" > |
      	<FIMSE: "fim-se" > |
      	<ENQUANTO: "enquanto" > |
      	<FIMENQUANTO: "fim-enquanto" > 
}
//TOKENS DE TIPOS 
TOKEN [IGNORE_CASE] : {
  		<NUMERO: "numero" >  |
  		<PALAVRA: "palavra" >  
}
//----------CARACTERES----------
TOKEN : {
		< #CHAR: ["a"-"z"] | ["A" - "Z"] > | 
   		< AP: "(" > |
    	< FP: ")" > |
		< PV: ";" > |
		< VIRGULA: "," > |
    	< STRING: "\"" (~["\""])* "\"" > |
   		< VAR: (< CHAR >)+ (["a" - "z", "A" - "Z" ,"0" - "9", "_"])* > 
}
//-----------NUMEROS-----------
TOKEN : {
	< #DIGIT: ["0"-"9"] > |  
    < NUM: (< DIGIT >)* (".")? (< DIGIT >)+ > 
}
//----------OPERADORES---------
TOKEN : {
 	< SOMA: "+" > |
	< SUB: "-" > |
	< MUL: "*" > |
    < DIV: "/" > |
    < OU: "OR" > |
    < ATRIB: "<-"  > |
    < IGUAL: "=" > |
   	< CONCAT: "&" > 
}
  
void inicio() : { }
{
   
	 try {
	   (comando())*
	 }
	catch (ParseException e) {
	    System.out.println("\n"+e.toString()+"\nErro sintático encontrado, continuando análise após próximo \";\"\n");
	    Token t;
	    error=true;
	    do {
	      t = getNextToken();
	    } while (t.kind != PV);
	    inicio();
  	}
  }

void comando(): { }
{
	atribuicao() | declaracao() | se()
| enquanto() | le() | exibe()
}

void atribuicao() : { Token t; }
{
	t=< VAR > {
		as.verificaDeclaracao(t.image,t.beginLine,tabela);
		} < ATRIB > expressao() < PV >
}

void declaracao() : { Simbolo simb; Token t; int f=0;}
{
  (    < NUMERO > { f=2; }| < PALAVRA > { f=1; })
    t=< VAR >
    {
		as.declaraVariavel(t.image,t.beginLine,f,tabela);
      }(< ATRIB >expressao())?
	(	  < VIRGULA >t=< VAR >
	  {
		as.declaraVariavel(t.image,t.beginLine,f,tabela);
		}
    (< ATRIB > expressao())?)*< PV >
}

void se() : { }
{
  < SE >< AP > expressao() < FP > inicio() < FIMSE >
}

void enquanto() : { }
{
  < ENQUANTO > < AP > expressao() < FP > inicio() < FIMENQUANTO >
}

void le() : { }
{
	< LEITURA >< VAR > (< VIRGULA > < VAR >)* < PV >
}

void exibe() : { }
{
  < EXIBE > expressao() (< VIRGULA >expressao())* < PV >
}

void expressao() : {Expressao pilha = new Expressao();}
{
  	expressao2(pilha){pilha.imprime(); }
}

void expressao2(Expressao pilha) : {Item item = null; Token t; }
{
  termo(pilha)(t=< OU >termo(pilha) {pilha.add(Tipo.OPERADOR, t.image);})*
}

void termo(Expressao pilha) : {Token t; }
{
  termo1(pilha)(t=< IGUAL >termo1(pilha) {pilha.add(Tipo.OPERADOR, t.image);})?
}

void termo1(Expressao pilha) : {Token t; }
{
  termo2(pilha)(t=< CONCAT >termo2(pilha) {pilha.add(Tipo.OPERADOR, t.image);} )*
}

void termo2(Expressao pilha) : {Token t; }
{
  termo3(pilha)((t=< SOMA >|t=< SUB >)termo3(pilha){pilha.add(Tipo.OPERADOR, t.image);} )*
}

void termo3(Expressao pilha) : {Token t; }
{
  termo4(pilha)((t=< MUL >|t=< DIV >)termo4(pilha){pilha.add(Tipo.OPERADOR, t.image);} )*
}

void termo4(Expressao pilha) : {Token t=null; char sinal=' '; Tipo tipo=null;}
{
   < AP >expressao2(pilha)< FP >
| (t=< NUM >{tipo=Tipo.NUMERO;}
| < SOMA >t=<NUM > {tipo=Tipo.NUMERO;sinal='+';}
| < SUB >t=<NUM>{tipo=Tipo.NUMERO;sinal='-';}
| t=< VAR >{tipo=Tipo.VARIAVEL;}
| t=< STRING >{tipo=Tipo.STRING;}
){pilha.add(tipo, sinal + t.image);}
}




