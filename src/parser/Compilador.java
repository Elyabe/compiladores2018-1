/* Generated By:JavaCC: Do not edit this line. Compilador.java */
package parser; //pacote atual
// ----- importando outros pacotes que serao utilizados
import java.io.*;
import comandoPrimitivo.*;
import comandoAltoNivel.*;
import semantico.*;

public class Compilador implements CompiladorConstants {
  static Tabela tabela = new Tabela();
   static public ListaComandosAltoNivel listaComandosAltoNivel;

  public static void main(String args []) throws ParseException
  {
    Compilador compilador;
    try
    {
      compilador = new Compilador(new FileInputStream(Config.nomeArquivo));
      listaComandosAltoNivel= new ListaComandosAltoNivel();

      compilador.inicio(listaComandosAltoNivel);
      System.out.println(listaComandosAltoNivel);
      //listaComandosPrimitivos = listaComandosAltoNivel.geraListaComandoPrimitivosTotal();
      //System.out.println(listaComandosPrimitivos);
      System.out.println("\u005cnExecucao finalizada com sucesso !\u005cn");

    }
    catch (FileNotFoundException e)
    {
      System.out.println("Erro: arquivo nao encontrado");
    }
    catch (TokenMgrError e)
    {
      System.out.println("Erro lexico\u005cn" + e.getMessage());
    }
    catch (ParseException e)
    {
      System.out.println("Erro sintatico\u005cn" + e.getMessage());
    }
     catch (ErroSemantico e) {
     System.out.println("Erro semantico\u005cn" + e.getMessage());
    }
  }

  static final public void inicio(ListaComandosAltoNivel lista) throws ParseException {
    programa(lista);
  }

  static final public void programa(ListaComandosAltoNivel lista) throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXIBE:
      case LEITURA:
      case SE:
      case ENQUANTO:
      case NUMERO:
      case PALAVRA:
      case VAR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      comando(lista);
    }
  }

  static final public void comando(ListaComandosAltoNivel lista) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      atribuicao(lista);
      break;
    case NUMERO:
    case PALAVRA:
      declaracao();
      break;
    case SE:
      se(lista);
      break;
    case ENQUANTO:
      enquanto(lista);
      break;
    case LEITURA:
      le(lista);
      break;
    case EXIBE:
      exibe(lista);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void atribuicao(ListaComandosAltoNivel lista) throws ParseException {
                                                Token token; Expressao exp;
    token = jj_consume_token(VAR);
    jj_consume_token(ATRIB);
    exp = expressao();
    jj_consume_token(PV);
                                      lista.addComando(new ComandoAtribuicao(tabela.consultaSimbolo(token.image), exp));
  }

  static final public void declaracao() throws ParseException {
                    Token token; TipoDado tipo; TipoElemento tipo2; Simbolo simb;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO:
      jj_consume_token(NUMERO);
                 tipo = TipoDado.NUM;
      break;
    case PALAVRA:
      jj_consume_token(PALAVRA);
                  tipo = TipoDado.STRING;
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(VAR);
                                                simb = new Simbolo(t.image);
                                                if(!tabela.verificaExistenciaSimbolo(t.image))tabela.incluiSimbolo(simb);
                                                else {if (true) throw new ErroSemantico("A variavel -" + t.image + "- ja existe!\u005cn");}
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATRIB:
      jj_consume_token(ATRIB);
      expressao();
                           tipo2 = TipoElemento.CTE;
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(VIRGULA);
      t = jj_consume_token(VAR);
                                                simb = new Simbolo(t.image);
                                                        if(!tabela.verificaExistenciaSimbolo(t.image))tabela.incluiSimbolo(simb);
                                                else {if (true) throw new ErroSemantico("A variavel -" + t.image + "- ja existe!\u005cn");}
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATRIB:
        jj_consume_token(ATRIB);
        expressao();
                             tipo2 = TipoElemento.CTE;
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
    }
    jj_consume_token(PV);
  }

  static final public void se(ListaComandosAltoNivel lista) throws ParseException {
                                        Expressao exp; Token token; ListaComandosAltoNivel lista_se;
         lista_se = new ListaComandosAltoNivel();
    token = jj_consume_token(SE);
    jj_consume_token(AP);
    exp = expressao();
    jj_consume_token(FP);
    programa(lista_se);
    jj_consume_token(FIMSE);
         lista.addComando(new ComandoCondicionalSimples(token, exp, lista_se));
  }

  static final public void enquanto(ListaComandosAltoNivel lista) throws ParseException {
                                              Expressao exp; ListaComandosAltoNivel lista_enquanto; Token token;
         lista_enquanto = new ListaComandosAltoNivel();
    token = jj_consume_token(ENQUANTO);
    jj_consume_token(AP);
    exp = expressao();
    jj_consume_token(FP);
    programa(lista_enquanto);
    jj_consume_token(FIMENQUANTO);
         lista.addComando(new ComandoEnquanto(token, exp, lista_enquanto));
  }

  static final public void le(ListaComandosAltoNivel lista) throws ParseException {
                                        Token token, token_leitura;
    token_leitura = jj_consume_token(LEITURA);
    token = jj_consume_token(VAR);
         lista.addComando(new ComandoEntrada(token_leitura, tabela.consultaSimbolo(token.image)));
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      jj_consume_token(VIRGULA);
      token = jj_consume_token(VAR);
         lista.addComando(new ComandoEntrada(token_leitura, tabela.consultaSimbolo(token.image)));
    }
    jj_consume_token(PV);
  }

  static final public void exibe(ListaComandosAltoNivel lista) throws ParseException {
                                           Token token; Expressao exp;
    token = jj_consume_token(EXIBE);
    exp = expressao();
                                 lista.addComando(new ComandoSaida(token, exp));
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(VIRGULA);
      exp = expressao();
                                 lista.addComando(new ComandoSaida(token, exp));
    }
    jj_consume_token(PV);
  }

  static final public Expressao expressao() throws ParseException {
                         Expressao exp=new Expressao();
    segundaExpressao(exp);
                                                                                   System.out.println(exp.getExpressaoInfixa()); {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  static final public void segundaExpressao(Expressao exp) throws ParseException {
                                                 Item item;
                                                Token t;
                                                Simbolo simb;
    termo(exp);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OU:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      t = jj_consume_token(OU);
               item = new Operador(t,TipoOperador.OU,t.image); exp.addItemInfixo(item);
      termo(exp);
                                          simb = new Simbolo(t.image);
                                        tabela.incluiSimbolo(simb);
                                        item = new Operador(t,TipoOperador.OU,t.image); exp.addItemPosfixo(item);
    }
  }

  static final public void termo(Expressao exp) throws ParseException {
                                                 Token t;
                                                 Simbolo simb;
                                                 Item item;
    termo1(exp);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      t = jj_consume_token(IGUAL);
                  item = new Operador(t,TipoOperador.IGUAL,t.image); exp.addItemInfixo(item);
      termo1(exp);
                                          simb = new Simbolo(t.image);
                                        tabela.incluiSimbolo(simb);
                                         item = new Operador(t,TipoOperador.IGUAL,t.image); exp.addItemPosfixo(item);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
  }

  static final public void termo1(Expressao exp) throws ParseException {
                                                  Token t;
                                                Simbolo simb;
                                                Item item;
    termo2(exp);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCAT:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_6;
      }
      t = jj_consume_token(CONCAT);
                   item = new Operador(t,TipoOperador.CONCAT,t.image); exp.addItemInfixo(item);
      termo2(exp);
                                          simb = new Simbolo(t.image);
                                         tabela.incluiSimbolo(simb);
                                        item = new Operador(t,TipoOperador.CONCAT,t.image); exp.addItemPosfixo(item);
    }
  }

  static final public void termo2(Expressao exp) throws ParseException {
                                                  Token t;
                                                 Simbolo simb;
                                                 Item item;
                                                 TipoOperador op;
    termo3(exp);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
      case SUB:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
        t = jj_consume_token(SOMA);
                                         simb = new Simbolo(t.image);
                                         tabela.incluiSimbolo(simb);
                                         op=TipoOperador.SOMA;
        break;
      case SUB:
        t = jj_consume_token(SUB);
                                         simb = new Simbolo(t.image);
                                         tabela.incluiSimbolo(simb);
                                         op=TipoOperador.SUB;
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                          item = new Operador(t,op,t.image); exp.addItemInfixo(item);
      termo3(exp);
                     item = new Operador(t,op,t.image); exp.addItemPosfixo(item);
    }
  }

  static final public void termo3(Expressao exp) throws ParseException {
                                                 Token t;
                                                Simbolo simb;
                                                Item item;
                                                TipoOperador op;
    termo4(exp);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
      case DIV:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
        t = jj_consume_token(MUL);
                                         simb = new Simbolo(t.image);
                                         tabela.incluiSimbolo(simb);
                                         op=TipoOperador.MUL;
        break;
      case DIV:
        t = jj_consume_token(DIV);
                                           simb = new Simbolo(t.image);
                                         tabela.incluiSimbolo(simb);
                                         op=TipoOperador.DIV;
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                          item = new Operador(t,op,t.image); exp.addItemInfixo(item);
      termo4(exp);
                                  item = new Operador(t,op,t.image); exp.addItemPosfixo(item);
    }
  }

  static final public void termo4(Expressao exp) throws ParseException {
                                                  Token v, t=null;
                                                Simbolo simb, simb2;
                                                Item item, item2=null;
                                                boolean sinal=false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AP:
      jj_consume_token(AP);
      expressao();
      jj_consume_token(FP);
      break;
    case NUM:
      v = jj_consume_token(NUM);
                                                 simb = new Simbolo(v.image);
                                        tabela.incluiSimbolo(simb);
                                        item= new Operando(v,TipoDado.NUM,v.image);
      break;
    case SOMA:
      t = jj_consume_token(SOMA);
      v = jj_consume_token(NUM);
                                                 simb = new Simbolo(v.image);
                                        tabela.incluiSimbolo(simb);
                                        item= new Operando(v,TipoDado.NUM,v.image);
                                        item2= new Operador(t,TipoOperador.SOMA,t.image);
                                        sinal=true;
      break;
    case SUB:
      t = jj_consume_token(SUB);
      v = jj_consume_token(NUM);
                                                 simb = new Simbolo(v.image);
                                        tabela.incluiSimbolo(simb);
                                        item= new Operando(v,TipoDado.NUM,v.image);
                                        item2= new Operador(t,TipoOperador.SUB,t.image);
                                        sinal=true;
      break;
    case VAR:
      t = jj_consume_token(VAR);
                                                 simb2= new Simbolo(t.image);
                                        if (!tabela.verificaExistenciaSimbolo(t.image) )
                                                {if (true) throw new ErroSemantico("A variavel -" + t.image + "- \u005cn nao foi inicializada");}
                                        item=new Operando(t,TipoElemento.VAR,t.image);
      break;
    case STRING:
      v = jj_consume_token(STRING);
                                                 simb = new Simbolo(v.image);
                                        tabela.incluiSimbolo(simb);
                                        item=new Operando(v,TipoDado.STRING,v.image);
                                          if(sinal) { exp.addItemPosfixo(item2);exp.addItemPosfixo(item); exp.addItemInfixo(item2); exp.addItemInfixo(item);}
                                        else { exp.addItemPosfixo(item); exp.addItemInfixo(item);}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompiladorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x81ae0,0x81ae0,0x1800,0x8000000,0x20000,0x8000000,0x20000,0x20000,0x4000000,0x10000000,0x20000000,0xc00000,0xc00000,0x3000000,0x3000000,0xec4000,};
   }

  /** Constructor with InputStream. */
  public Compilador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compilador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Compilador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Compilador(CompiladorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompiladorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[30];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
