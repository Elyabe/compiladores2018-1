/* Compilador.java */
/* Generated By:JavaCC: Do not edit this line. Compilador.java */
package parser;
import java.io.*;
import semantico.*;
import apoio.*;
import gerador.*;
import apoio.*;
import comandoAltoNivel.*;
import comandoPrimitivo.*;
import jasmin.*;

public class Compilador implements CompiladorConstants {
        public static Tabela tabela = new Tabela();

        public static void main(String args[])  throws ParseException  {
                Compilador compilador = null;
                try {
                        compilador = new Compilador(new FileInputStream("exemplos/17.spc"));

                //Primeira Passagem
                        ListaComandosAltoNivel listaComandosAltoNivel = new ListaComandosAltoNivel();
                        listaComandosAltoNivel=Compilador.inicio();
                        System.out.println("< ============== Primeira Passagem ============== >");
                        System.out.println("\u005cnComandos Primeira Passagem: \u005cn" + listaComandosAltoNivel);

                //Segunda Passagem
                        System.out.println("\u005cn< ============== Segunda Passagem ============== >");
                        ListaComandosPrimitivos listaComandosPrimitivos = new ListaComandosPrimitivos();
                        listaComandosPrimitivos = listaComandosAltoNivel.geraListaComandosPrimitivosTotal();
                        System.out.println("\u005cnComandos Segunda Passagem: \u005cn" + listaComandosPrimitivos);

                //Terceira Passagem
                        System.out.println("\u005cn< ============== Terceira Passagem ============== >");
                        String codigoDestino;
                        codigoDestino = listaComandosPrimitivos.geraCodigoDestinoTotal();
                        System.out.println(codigoDestino);
                        AcoesSemanticas.gerarCodigoDestinoFinal ("codigo.j", codigoDestino);
                        String arquivo[] = { "codigo.j" };
                        Main.main(arquivo);

                } catch(FileNotFoundException e) {
                        System.out.println("Erro Arquivo");
                } catch(TokenMgrError e) {
                        System.out.println("Erro lexico\u005cn" + e.getMessage());
                } catch(ParseException e) {
                        System.out.println("Erro sint\ufffdtico\u005cn" + e.getMessage());
                } catch(ErroSemantico e) {
                        System.out.println(e.getMessage());
                }
        }

  static final public ListaComandosAltoNivel inicio() throws ParseException {ListaComandosAltoNivel listaComandosAltoNivel = new ListaComandosAltoNivel();
    programa(listaComandosAltoNivel);
    jj_consume_token(0);
{if ("" != null) return listaComandosAltoNivel;}
    throw new Error("Missing return statement in function");
  }

  static final public void programa(ListaComandosAltoNivel listaComandosAltoNivel) throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXIBE:
      case LEITURA:
      case SE:
      case ENQUANTO:
      case NUMERO:
      case PALAVRA:
      case VAR:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      comando(listaComandosAltoNivel);
    }
  }

  static final public void comando(ListaComandosAltoNivel listaComandosAltoNivel) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      atribuicao(listaComandosAltoNivel);
      break;
      }
    case NUMERO:
    case PALAVRA:{
      declaracao(listaComandosAltoNivel);
      break;
      }
    case SE:{
      se(listaComandosAltoNivel);
      break;
      }
    case ENQUANTO:{
      enquanto(listaComandosAltoNivel);
      break;
      }
    case LEITURA:{
      le(listaComandosAltoNivel);
      break;
      }
    case EXIBE:{
      exibe(listaComandosAltoNivel);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void atribuicao(ListaComandosAltoNivel listaComandosAltoNivel) throws ParseException {Token t; ComandoAltoNivel cmd = null; Expressao expressao;
    t = jj_consume_token(VAR);
tabela.consultaSimbolo(t.image);
    jj_consume_token(ATRIB);
    expressao = expressao();
cmd = new ComandoAtribuicao(t, new Simbolo(t,tabela.consultaSimbolo(t.image).getTipo(),tabela.consultaSimbolo(t.image).getReferencia()), expressao );
                listaComandosAltoNivel.addComando(cmd);
    jj_consume_token(PV);
  }

  static final public void declaracao(ListaComandosAltoNivel listaComandosAltoNivel) throws ParseException {Token t; TipoDado tipo; Simbolo simbolo; ComandoAltoNivel cmd = null; Expressao expressao;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMERO:{
      jj_consume_token(NUMERO);
tipo = TipoDado.NUM;
      break;
      }
    case PALAVRA:{
      jj_consume_token(PALAVRA);
tipo = TipoDado.STR;
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(VAR);
tabela.incluiSimbolo(simbolo = new Simbolo(t,tipo));
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ATRIB:{
      jj_consume_token(ATRIB);
      expressao = expressao();
cmd = new ComandoAtribuicao(t, new Simbolo(t,tabela.consultaSimbolo(t.image).getTipo(),tabela.consultaSimbolo(t.image).getReferencia()), expressao );
                listaComandosAltoNivel.addComando(cmd);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRGULA:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(VIRGULA);
      t = jj_consume_token(VAR);
tabela.incluiSimbolo(simbolo = new Simbolo(t,tipo));
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ATRIB:{
        jj_consume_token(ATRIB);
        expressao = expressao();
cmd = new ComandoAtribuicao(t, new Simbolo(t,tabela.consultaSimbolo(t.image).getTipo(),tabela.consultaSimbolo(t.image).getReferencia()), expressao );
                listaComandosAltoNivel.addComando(cmd);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
    }
    jj_consume_token(PV);
  }

  static final public void se(ListaComandosAltoNivel listaComandosAltoNivel) throws ParseException {ComandoAltoNivel cmd = null;Expressao expressao;ListaComandosAltoNivel listaComandosAltoNivelTrue = new ListaComandosAltoNivel();
    jj_consume_token(SE);
    jj_consume_token(AP);
    expressao = expressao();
    jj_consume_token(FP);
    programa(listaComandosAltoNivelTrue);
    jj_consume_token(FIMSE);
cmd = new ComandoCondicionalSimples(null,expressao,listaComandosAltoNivelTrue );
                listaComandosAltoNivel.addComando(cmd);
  }

  static final public void enquanto(ListaComandosAltoNivel listaComandosAltoNivel) throws ParseException {ComandoAltoNivel cmd = null;Expressao expressao;ListaComandosAltoNivel listaComandosAltoNivelTrue = new ListaComandosAltoNivel();
    jj_consume_token(ENQUANTO);
    jj_consume_token(AP);
    expressao = expressao();
    jj_consume_token(FP);
    programa(listaComandosAltoNivelTrue);
    jj_consume_token(FIMENQUANTO);
cmd = new ComandoEnquanto(null,expressao,listaComandosAltoNivelTrue);
                listaComandosAltoNivel.addComando(cmd);
  }

  static final public void le(ListaComandosAltoNivel listaComandosAltoNivel) throws ParseException {Token t; ComandoAltoNivel cmd = null;
    jj_consume_token(LEITURA);
    t = jj_consume_token(VAR);
tabela.consultaSimbolo(t.image);
                cmd = new ComandoEntrada(null,new Simbolo(t,tabela.consultaSimbolo(t.image).getTipo(),tabela.consultaSimbolo(t.image).getReferencia()));
                listaComandosAltoNivel.addComando(cmd);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRGULA:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      jj_consume_token(VIRGULA);
      t = jj_consume_token(VAR);
tabela.consultaSimbolo(t.image);
                cmd = new ComandoEntrada(null,new Simbolo(t,tabela.consultaSimbolo(t.image).getTipo(),tabela.consultaSimbolo(t.image).getReferencia()));
                listaComandosAltoNivel.addComando(cmd);
    }
    jj_consume_token(PV);
  }

  static final public void exibe(ListaComandosAltoNivel listaComandosAltoNivel) throws ParseException {Expressao expressao;ComandoAltoNivel cmd = null;
    jj_consume_token(EXIBE);
    expressao = expressao();
cmd = new ComandoSaida(null, expressao);
                listaComandosAltoNivel.addComando(cmd);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRGULA:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(VIRGULA);
      expressao = expressao();
cmd = new ComandoSaida(null, expressao);
                listaComandosAltoNivel.addComando(cmd);
    }
    jj_consume_token(PV);
  }

  static final public Expressao expressao() throws ParseException {Expressao expressao = new Expressao();
    expressaoAuxiliar(expressao);

{if ("" != null) return expressao;}
    throw new Error("Missing return statement in function");
  }

  static final public void expressaoAuxiliar(Expressao expressao) throws ParseException {Token t; Item item;
    termo(expressao);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OU:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      t = jj_consume_token(OU);
expressao.addItemInfixo(item = new Operador(t, TipoOperador.OU));
      termo(expressao);
expressao.addItemPosfixo(item = new Operador(t, TipoOperador.OU));
    }
  }

  static final public void termo(Expressao expressao) throws ParseException {Token t; Item item;
    termo1(expressao);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IGUAL:{
      t = jj_consume_token(IGUAL);
expressao.addItemInfixo(item = new Operador(t, TipoOperador.IGUAL));
      termo1(expressao);
expressao.addItemPosfixo(item = new Operador(t, TipoOperador.IGUAL));
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
  }

  static final public void termo1(Expressao expressao) throws ParseException {Token t; Item item;
    termo2(expressao);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONCAT:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_6;
      }
      t = jj_consume_token(CONCAT);
expressao.addItemInfixo(item = new Operador(t, TipoOperador.CONCAT));
      termo2(expressao);
expressao.addItemPosfixo(item = new Operador(t, TipoOperador.CONCAT));
    }
  }

  static final public void termo2(Expressao expressao) throws ParseException {Token t; Item item; TipoOperador tipoOperador;
    termo3(expressao);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SOMA:
      case SUB:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SOMA:{
        t = jj_consume_token(SOMA);
tipoOperador = TipoOperador.ADD;
        break;
        }
      case SUB:{
        t = jj_consume_token(SUB);
tipoOperador = TipoOperador.SUB;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
expressao.addItemInfixo(item = new Operador(t, tipoOperador));
      termo3(expressao);
expressao.addItemPosfixo(item = new Operador(t, tipoOperador));
    }
  }

  static final public void termo3(Expressao expressao) throws ParseException {Token t; Item item; TipoOperador tipoOperador;
    termo4(expressao);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:
      case DIV:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:{
        t = jj_consume_token(MUL);
tipoOperador = TipoOperador.MUL;
        break;
        }
      case DIV:{
        t = jj_consume_token(DIV);
tipoOperador = TipoOperador.DIV;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
expressao.addItemInfixo(item = new Operador(t, tipoOperador));
      termo4(expressao);
expressao.addItemPosfixo(item = new Operador(t, tipoOperador));
    }
  }

  static final public void termo4(Expressao expressao) throws ParseException {Token t; Token valor; Item item;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AP:{
      jj_consume_token(AP);
      expressaoAuxiliar(expressao);
      jj_consume_token(FP);
      break;
      }
    case NUM:{
      valor = jj_consume_token(NUM);
expressao.addItemPosfixo(item = new Operando(valor, TipoDado.NUM, TipoElemento.CTE));
                expressao.addItemInfixo(item = new Operando(valor, TipoDado.NUM, TipoElemento.CTE));
      break;
      }
    case SOMA:{
      jj_consume_token(SOMA);
      valor = jj_consume_token(NUM);
valor.image = "+"+valor.image;
                expressao.addItemPosfixo(item = new Operando(valor, TipoDado.NUM, TipoElemento.CTE));
                expressao.addItemInfixo(item = new Operando(valor, TipoDado.NUM, TipoElemento.CTE));
      break;
      }
    case SUB:{
      jj_consume_token(SUB);
      valor = jj_consume_token(NUM);
valor.image = "-"+valor.image;
                expressao.addItemPosfixo(item = new Operando(valor, TipoDado.NUM, TipoElemento.CTE));
                expressao.addItemInfixo(item = new Operando(valor, TipoDado.NUM, TipoElemento.CTE));
      break;
      }
    case VAR:{
      t = jj_consume_token(VAR);
tabela.consultaSimbolo(t.image);
                expressao.addItemPosfixo(item = new Operando(t, tabela.consultaSimbolo(t.image).getTipo(), TipoElemento.VAR));
                expressao.addItemInfixo(item = new Operando(t, tabela.consultaSimbolo(t.image).getTipo(), TipoElemento.VAR));
      break;
      }
    case STRING:{
      valor = jj_consume_token(STRING);
expressao.addItemPosfixo(item = new Operando(valor, TipoDado.STR, TipoElemento.CTE));
                expressao.addItemInfixo(item = new Operando(valor, TipoDado.STR, TipoElemento.CTE));
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompiladorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8001ae0,0x8001ae0,0x1800,0x40000,0x2000000,0x40000,0x2000000,0x2000000,0x20000,0x80000,0x100000,0x6000,0x6000,0x18000,0x18000,0x2c406000,};
   }

  /** Constructor with InputStream. */
  public Compilador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compilador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Compilador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Compilador(CompiladorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompiladorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[30];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
