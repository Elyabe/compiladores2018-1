options {
	DEBUG_PARSER = false;
	DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compilador)

package parser;
import java.io.*;
import semantico.*;
import apoio.*;
import gerador.*;
import apoio.*;
import comandoAltoNivel.*;
import comandoPrimitivo.*;
import jasmin.*;

public class Compilador {
	public static Tabela tabela = new Tabela();

	public static void main(String args[])  throws ParseException  {
		Compilador compilador = null;
		try {
			compilador = new Compilador(new FileInputStream("exemplos/17.spc"));

		//Primeira Passagem
			ListaComandosAltoNivel listaComandosAltoNivel = new ListaComandosAltoNivel();
			listaComandosAltoNivel=Compilador.inicio();
			System.out.println("< ============== Primeira Passagem ============== >");
			System.out.println("\nComandos Primeira Passagem: \n" + listaComandosAltoNivel);

		//Segunda Passagem
			System.out.println("\n< ============== Segunda Passagem ============== >");
			ListaComandosPrimitivos listaComandosPrimitivos = new ListaComandosPrimitivos();
			listaComandosPrimitivos = listaComandosAltoNivel.geraListaComandosPrimitivosTotal();
			System.out.println("\nComandos Segunda Passagem: \n" + listaComandosPrimitivos);

		//Terceira Passagem
			System.out.println("\n< ============== Terceira Passagem ============== >");
			String codigoDestino;
			codigoDestino = listaComandosPrimitivos.geraCodigoDestinoTotal();
			System.out.println(codigoDestino);
			AcoesSemanticas.gerarCodigoDestinoFinal ("codigo.j", codigoDestino);
			String arquivo[] = { "codigo.j" };
			Main.main(arquivo);

		} catch(FileNotFoundException e) {
			System.out.println("Erro Arquivo");
		} catch(TokenMgrError e) {
			System.out.println("Erro lexico\n" + e.getMessage());
		} catch(ParseException e) {
			System.out.println("Erro sintï¿½tico\n" + e.getMessage());
		} catch(ErroSemantico e) {
			System.out.println(e.getMessage());
		}
	}
}

PARSER_END(Compilador)

SKIP : { " " | "\t" | "\r" | "\n" }

//TOKENS DE COMANDOS 
TOKEN [IGNORE_CASE] : {
	<EXIBE: "exibe" >  |
	<LEITURA: "le" > | 
	<SE: "se" > |
	<FIMSE: "fimse" > |
	<ENQUANTO: "enquanto" > |
	<FIMENQUANTO: "fimenquanto" > 
}
//TOKENS DE TIPOS 
TOKEN [IGNORE_CASE] : {
	<NUMERO: "numero" >  |
	<PALAVRA: "palavra" >  
}

//----------OPERADORES---------
TOKEN : {
	< SOMA: "+" > |
	< SUB: "-" > |
	< MUL: "*" > |
	< DIV: "/" > |
	< OU: "OR" > |
	< ATRIB: "<-"  > |
	< IGUAL: "=" > |
	< CONCAT: "&" > 
}

//----------CARACTERES----------
TOKEN : {
	< #CHAR: ["a"-"z"] | ["A" - "Z"] > | 
	< AP: "(" > |
	< FP: ")" > |
	< PV: ";" > |
	< VIRGULA: "," > |
	< STRING: "\"" (~["\""])* "\"" > |
	< VAR: (< CHAR >)+ (["a" - "z", "A" - "Z" ,"0" - "9", "_"])* > 
}
//-----------NUMEROS-----------
TOKEN : {
	< #DIGIT: ["0"-"9"] > |  
	< NUM: (< DIGIT >)* (".")? (< DIGIT >)+ > 
}

ListaComandosAltoNivel inicio() : {ListaComandosAltoNivel listaComandosAltoNivel = new ListaComandosAltoNivel();}
{
	programa(listaComandosAltoNivel) <EOF>
	{ return listaComandosAltoNivel;}
}

void programa(ListaComandosAltoNivel listaComandosAltoNivel) : {}
{
	(comando(listaComandosAltoNivel))*

}

void comando(ListaComandosAltoNivel listaComandosAltoNivel) : {}
{
	atribuicao(listaComandosAltoNivel) | declaracao(listaComandosAltoNivel) | se(listaComandosAltoNivel) | enquanto(listaComandosAltoNivel) | le(listaComandosAltoNivel) | exibe(listaComandosAltoNivel)
}

void atribuicao(ListaComandosAltoNivel listaComandosAltoNivel) : {Token t; ComandoAltoNivel cmd = null; Expressao expressao;}
{
	t=<VAR>
	{
		tabela.consultaSimbolo(t.image);
	}
	<ATRIB> expressao = expressao()
	{
		cmd = new ComandoAtribuicao(t, new Simbolo(t,tabela.consultaSimbolo(t.image).getTipo(),tabela.consultaSimbolo(t.image).getReferencia()), expressao );
		listaComandosAltoNivel.addComando(cmd);

	}
	<PV>

}


void declaracao(ListaComandosAltoNivel listaComandosAltoNivel) : {Token t; TipoDado tipo; Simbolo simbolo; ComandoAltoNivel cmd = null; Expressao expressao;} { 
	(<NUMERO> {tipo = TipoDado.NUM;}|<PALAVRA> {tipo = TipoDado.STR;}) t=<VAR>
	{
		
		tabela.incluiSimbolo(simbolo = new Simbolo(t,tipo));
	}
	( <ATRIB> expressao = expressao()
	{
		cmd = new ComandoAtribuicao(t, new Simbolo(t,tabela.consultaSimbolo(t.image).getTipo(),tabela.consultaSimbolo(t.image).getReferencia()), expressao );
		listaComandosAltoNivel.addComando(cmd);
	}
	)? (<VIRGULA> t=<VAR>
	{
		tabela.incluiSimbolo(simbolo = new Simbolo(t,tipo));
	}
	( <ATRIB> expressao = expressao()
	{
		cmd = new ComandoAtribuicao(t, new Simbolo(t,tabela.consultaSimbolo(t.image).getTipo(),tabela.consultaSimbolo(t.image).getReferencia()), expressao );
		listaComandosAltoNivel.addComando(cmd);
	}
	)? )* <PV> 
}


void se(ListaComandosAltoNivel listaComandosAltoNivel) : { ComandoAltoNivel cmd = null;Expressao expressao;ListaComandosAltoNivel listaComandosAltoNivelTrue = new ListaComandosAltoNivel();}
{
	<SE> <AP> expressao = expressao() <FP> programa(listaComandosAltoNivelTrue) <FIMSE>
	{
		cmd = new ComandoCondicionalSimples(null,expressao,listaComandosAltoNivelTrue );
		listaComandosAltoNivel.addComando(cmd);
	}
}

void enquanto(ListaComandosAltoNivel listaComandosAltoNivel) : {ComandoAltoNivel cmd = null;Expressao expressao;ListaComandosAltoNivel listaComandosAltoNivelTrue = new ListaComandosAltoNivel();}
{
	<ENQUANTO> <AP> expressao = expressao() <FP> programa(listaComandosAltoNivelTrue) <FIMENQUANTO>
	{
		cmd = new ComandoEnquanto(null,expressao,listaComandosAltoNivelTrue);
		listaComandosAltoNivel.addComando(cmd);
	}
}

void le(ListaComandosAltoNivel listaComandosAltoNivel) : {Token t; ComandoAltoNivel cmd = null;}
{
	<LEITURA> t=<VAR>
	{
		tabela.consultaSimbolo(t.image);
		cmd = new ComandoEntrada(null,new Simbolo(t,tabela.consultaSimbolo(t.image).getTipo(),tabela.consultaSimbolo(t.image).getReferencia()));
		listaComandosAltoNivel.addComando(cmd);
	}
	( <VIRGULA> t=<VAR>
	{
		tabela.consultaSimbolo(t.image);
		cmd = new ComandoEntrada(null,new Simbolo(t,tabela.consultaSimbolo(t.image).getTipo(),tabela.consultaSimbolo(t.image).getReferencia()));
		listaComandosAltoNivel.addComando(cmd);
	}
	)* <PV>

}

void exibe(ListaComandosAltoNivel listaComandosAltoNivel) : {Expressao expressao;ComandoAltoNivel cmd = null;}
{
	<EXIBE> expressao = expressao()
	{
		cmd = new ComandoSaida(null, expressao);
		listaComandosAltoNivel.addComando(cmd);

	} ( <VIRGULA> expressao = expressao()
	{
		cmd = new ComandoSaida(null, expressao);
		listaComandosAltoNivel.addComando(cmd); 
	}
	)* <PV>
}

Expressao expressao() : {Expressao expressao = new Expressao();}
{
	expressaoAuxiliar(expressao)
	{
			//Expressao
			//System.out.println("\n< ============== Expressoes Pos e Infixa ============== >\n");
			//System.out.println(expressao.toString());
	}
	{ return expressao; }

}

void expressaoAuxiliar(Expressao expressao) : {Token t; Item item;} {
	termo(expressao)(t = <OU> {
		expressao.addItemInfixo(item = new Operador(t, TipoOperador.OU));
	}
	termo(expressao) {
		expressao.addItemPosfixo(item = new Operador(t, TipoOperador.OU));
	})*
}

void termo(Expressao expressao) : {Token t; Item item; } {
	termo1(expressao) (
		t = <IGUAL> {
			expressao.addItemInfixo(item = new Operador(t, TipoOperador.IGUAL));
		}
		termo1(expressao) {
			expressao.addItemPosfixo(item = new Operador(t, TipoOperador.IGUAL));
		}
		)?
}

void termo1(Expressao expressao) : {Token t; Item item; } {
	termo2(expressao) (
		t = <CONCAT> { 
			expressao.addItemInfixo(item = new Operador(t, TipoOperador.CONCAT));
		}
		termo2(expressao) {
			expressao.addItemPosfixo(item = new Operador(t, TipoOperador.CONCAT));
		}
		)*
}

void termo2(Expressao expressao) : {Token t; Item item; TipoOperador tipoOperador; }
{
	termo3(expressao) ((t=<SOMA> { tipoOperador = TipoOperador.ADD; }|t=<SUB> {tipoOperador = TipoOperador.SUB; })
	{
		expressao.addItemInfixo(item = new Operador(t, tipoOperador));
	}
	termo3(expressao)
	{
		expressao.addItemPosfixo(item = new Operador(t, tipoOperador));
	}
	)*
}

void termo3(Expressao expressao) : {Token t; Item item; TipoOperador tipoOperador; }
{
	termo4(expressao) ((t=<MUL> { tipoOperador = TipoOperador.MUL; }|t=<DIV> {tipoOperador = TipoOperador.DIV; })
	{
		expressao.addItemInfixo(item = new Operador(t, tipoOperador));
	}
	termo4(expressao)
	{
		expressao.addItemPosfixo(item = new Operador(t, tipoOperador));
	}
	)*
}

void termo4(Expressao expressao) : {Token t; Token valor; Item item;}
{
	<AP> expressaoAuxiliar(expressao) <FP>
	|valor= <NUM>
	{
		expressao.addItemPosfixo(item = new Operando(valor, TipoDado.NUM, TipoElemento.CTE));
		expressao.addItemInfixo(item = new Operando(valor, TipoDado.NUM, TipoElemento.CTE));
	}
	|<SOMA>valor=<NUM>
	{
		valor.image = "+"+valor.image;
		expressao.addItemPosfixo(item = new Operando(valor, TipoDado.NUM, TipoElemento.CTE));
		expressao.addItemInfixo(item = new Operando(valor, TipoDado.NUM, TipoElemento.CTE));
	}
	|<SUB>valor=<NUM>
	{
		valor.image = "-"+valor.image;
		expressao.addItemPosfixo(item = new Operando(valor, TipoDado.NUM, TipoElemento.CTE));
		expressao.addItemInfixo(item = new Operando(valor, TipoDado.NUM, TipoElemento.CTE));
	}
	|t=<VAR>
	{
		tabela.consultaSimbolo(t.image);
		expressao.addItemPosfixo(item = new Operando(t, tabela.consultaSimbolo(t.image).getTipo(), TipoElemento.VAR));
		expressao.addItemInfixo(item = new Operando(t, tabela.consultaSimbolo(t.image).getTipo(), TipoElemento.VAR));
	}
	|valor=<STRING>
	{
		expressao.addItemPosfixo(item = new Operando(valor, TipoDado.STR, TipoElemento.CTE));
		expressao.addItemInfixo(item = new Operando(valor, TipoDado.STR, TipoElemento.CTE));
	}
}
